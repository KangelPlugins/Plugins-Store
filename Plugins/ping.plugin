import requests
import time
from typing import Any

from android_utils import log, run_on_ui_thread
from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import run_on_queue, get_last_fragment, send_message
from ui.alert import AlertDialogBuilder

__id__ = "ping_checker"
__name__ = "Ping Checker"
__description__ = "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è [.ping]"
__author__ = "@extraplugin"
__version__ = "1.0.0"
__icon__ = "exteraPlugins/1"
__min_version__ = "11.12.0"

class PingPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.progress_dialog = None
        self.timeout = 10

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        log("PingChecker plugin loaded!")

    def _check_site_availability(self, url: str, peer_id: Any):
        try:
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
            
            start_time = time.time()
            response = requests.head(
                url, 
                timeout=self.timeout,
                allow_redirects=True,
                headers={
                    'User-Agent': 'Mozilla/5.0 (compatible; PingChecker/1.0)'
                }
            )
            end_time = time.time()
            response_time = round((end_time - start_time) * 1000)
            status_code = response.status_code
            is_available = 200 <= status_code < 400
            if is_available:
                message = self._format_success_message(url, response_time, status_code)
            else:
                message = self._format_error_message(url, response_time, status_code)
        except requests.exceptions.Timeout:
            response_time = self.timeout * 1000
            message = self._format_timeout_message(url)
        except requests.exceptions.ConnectionError:
            message = self._format_connection_error_message(url)
        except requests.exceptions.RequestException as e:
            message = self._format_request_error_message(url, str(e))
        except Exception as e:
            message = f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {url}:\n{str(e)}"
        self._send_result(message, peer_id)

    def _format_success_message(self, url: str, response_time: int, status_code: int):
        if response_time < 100:
            speed_emoji = "‚ö°"
            speed_text = "–û—Ç–ª–∏—á–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        elif response_time < 500:
            speed_emoji = "‚úÖ"
            speed_text = "–•–æ—Ä–æ—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        elif response_time < 1000:
            speed_emoji = "‚ö†Ô∏è"
            speed_text = "–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        else:
            speed_emoji = "üê¢"
            speed_text = "–ú–µ–¥–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å"
        
        return (f"{speed_emoji} **–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!**\n\n"
                f"‚Ä¢ **–°–∞–π—Ç:** {url}\n"
                f"‚Ä¢ **–°—Ç–∞—Ç—É—Å:** {status_code}\n"
                f"‚Ä¢ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {response_time}ms\n"
                f"‚Ä¢ **–ö–∞—á–µ—Å—Ç–≤–æ:** {speed_text}\n\n"
                f"‚úÖ –í–∞—à–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ—Ä—è–¥–∫–µ!")

    def _format_error_message(self, url: str, response_time: int, status_code: int):
        return (f"‚ö†Ô∏è **–°–∞–π—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å –æ—à–∏–±–∫–æ–π**\n\n"
                f"‚Ä¢ **–°–∞–π—Ç:** {url}\n"
                f"‚Ä¢ **–°—Ç–∞—Ç—É—Å:** {status_code}\n"
                f"‚Ä¢ **–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** {response_time}ms\n\n"
                f"üîß –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞, –∞ –Ω–µ –≤–∞—à–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

    def _format_timeout_message(self, url: str):
        return (f"‚è∞ **–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**\n\n"
                f"‚Ä¢ **–°–∞–π—Ç:** {url}\n"
                f"‚Ä¢ **–¢–∞–π–º–∞—É—Ç:** {self.timeout} —Å–µ–∫—É–Ω–¥\n\n"
                f"‚ùå –°–∞–π—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                f"  - –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º\n"
                f"  - –°–∞–π—Ç –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω\n"
                f"  - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º")

    def _format_connection_error_message(self, url: str):
        return (f"üîå **–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è**\n\n"
                f"‚Ä¢ **–°–∞–π—Ç:** {url}\n\n"
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ:\n"
                f"  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ\n"
                f"  - –í–æ–∑–º–æ–∂–Ω–æ, DNS –ø—Ä–æ–±–ª–µ–º—ã\n"
                f"  - –°–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ")

    def _format_request_error_message(self, url: str, error: str):
        return (f"üö´ **–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞**\n\n"
                f"‚Ä¢ **–°–∞–π—Ç:** {url}\n"
                f"‚Ä¢ **–û—à–∏–±–∫–∞:** {error}\n\n"
                f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL")

    def _send_result(self, message: str, peer_id: Any):
        def _send_and_dismiss():
            if self.progress_dialog:
                self.progress_dialog.dismiss()
                self.progress_dialog = None
            send_message({
                "message": message,
                "peer": peer_id
            })
        run_on_ui_thread(_send_and_dismiss)

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not isinstance(params.message, str) or not params.message.startswith(".ping"):
            return HookResult()
        try:
            parts = params.message.strip().split(" ", 1)
            if len(parts) < 2 or not parts[1].strip():
                params.message = "‚ùì **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`.ping example.com` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–π—Ç\n`.ping google.com youtube.com` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∞–π—Ç–æ–≤"
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
            sites = parts[1].strip().split()
            current_fragment = get_last_fragment()
            if not current_fragment:
                log("PingPlugin: Cannot get current fragment")
                params.message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏"
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
            activity = current_fragment.getParentActivity()
            if not activity:
                log("PingPlugin: Cannot get parent activity")
                params.message = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∑–∫–∏"
                return HookResult(strategy=HookStrategy.MODIFY, params=params)
            self.progress_dialog = AlertDialogBuilder(
                activity,
                AlertDialogBuilder.ALERT_TYPE_SPINNER
            )
            self.progress_dialog.set_title("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤...")
            self.progress_dialog.set_message(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º {len(sites)} —Å–∞–π—Ç(–æ–≤)")
            self.progress_dialog.set_cancelable(False)
            self.progress_dialog.show()
            for site in sites:
                run_on_queue(lambda s=site: self._check_site_availability(s, params.peer))
            return HookResult(strategy=HookStrategy.CANCEL)
        except Exception as e:
            log(f"Ping plugin error: {str(e)}")
            if self.progress_dialog:
                run_on_ui_thread(lambda: self.progress_dialog.dismiss())
                self.progress_dialog = None
            params.message = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

    def create_settings(self):
        return [
            Header(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Ping Checker"),
            Input(
                key="timeout",
                text="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (—Å–µ–∫—É–Ω–¥—ã)",
                default="10",
                subtext="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∞–π—Ç–∞"
            ),
            Switch(
                key="auto_https",
                text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—Ç—å https://",
                default=True,
                subtext="–î–æ–±–∞–≤–ª—è—Ç—å https:// –µ—Å–ª–∏ —Å—Ö–µ–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            ),
            Divider(text="–ö–æ–º–∞–Ω–¥–∞: .ping example.com\n–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–æ–≤ –∏ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        ]

    def on_plugin_unload(self):
        if self.progress_dialog:
            run_on_ui_thread(lambda: self.progress_dialog.dismiss())
        log("PingChecker plugin unloaded!")
