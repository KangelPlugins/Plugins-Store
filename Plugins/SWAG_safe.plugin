"""
╭─────────────────────────────────────────────────────────────╮
│                                                             │
│  ███╗   ███╗ █████╗ ███╗   ██╗██████╗ ██████╗ ███████╗      │
│  ████╗ ████║██╔══██╗████╗  ██║██╔══██╗██╔══██╗██╔════╝      │
│  ██╔████╔██║███████║██╔██╗ ██║██║  ██║██████╔╝█████╗        │
│  ██║╚██╔╝██║██╔══██║██║╚██╗██║██║  ██║██╔══██╗██╔══╝        │
│  ██║ ╚═╝ ██║██║  ██║██║ ╚████║██████╔╝██║  ██║███████╗      │
│  ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝╚══════╝      │
│                                                             │
│         █████╗ ██╗                                          │
│        ██╔══██╗██║    ╭───────────────────╮                 │
│        ███████║██║    │© 2024-2025        │                 │
│        ██╔══██║██║    │Licensed Product   │                 │
│        ██║  ██║██║    │All Rights Reserved│                 │
│        ╚═╝  ╚═╝╚═╝    ╰───────────────────╯                 │
│                                                             │
│  ╭───────────────────────────────────────────────────────╮  │
│  │ Unauthorized use, reproduction or distribution        │  │
│  │ of this software is strictly prohibited               │  │
│  ╰───────────────────────────────────────────────────────╯  │
│                                                             │
╰─────────────────────────────────────────────────────────────╯
"""
#      ,
#     /|      __
#    / |   ,-~ /
#   Y :|  //  /
#   | jj /( .^
#   >-"~"-v"
#  /       Y
# j    "   |
# |     "  |
# |       |
# |    |  |
# |    "  |
# |    l  |
# |    "  |
# l       |
#  \      /
#   "-..-"
# Шиншилла одобряет этот код.

__id__ = "mnd_swagsafe"
__name__ = "SwagSafe"
__version__ = "1.4.0"
__author__ = """MandreAI & СвагаНеТута
@swagnonher & @MandreAI_bot"""
__description__ = """1. Добавляет функцию защиты архива и отдельных чатов по ID.
2. Команда .swagsafe для просмотра окна аутентификации."""
__min_version__ = "11.9.0"
__icon__ = "fingerprint_solar"

import traceback
import weakref
import threading
from typing import Callable, Optional, List, Set

from base_plugin import BasePlugin, HookResult, HookStrategy, MethodHook
from client_utils import get_last_fragment
from android_utils import run_on_ui_thread, log
from ui.bulletin import BulletinHelper
from hook_utils import find_class
from ui.settings import Header, Switch, Divider, Input
from java import dynamic_proxy

# --- Константы ---
REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS = 1337
DEFAULT_AUTH_RESET_DELAY_SECONDS = 10

# --- Поиск и импорт Java классов ---
try:
    from android.os import Build, Bundle
    KeyguardManager = find_class("android.app.KeyguardManager")
    Activity = find_class("android.app.Activity")
    Intent = find_class("android.content.Intent")
    Integer = find_class("java.lang.Integer")
    DialogsActivity = find_class("org.telegram.ui.DialogsActivity")
    ChatActivity = find_class("org.telegram.ui.ChatActivity")
    Context = find_class("android.content.Context")
    View = find_class("android.view.View")
    ViewGroup = find_class("android.view.ViewGroup")
    FrameLayout = find_class("android.widget.FrameLayout")
    ImageView = find_class("android.widget.ImageView")
    Bitmap = find_class("android.graphics.Bitmap")
    Canvas = find_class("android.graphics.Canvas")
    
    if not all([KeyguardManager, Activity, Intent, Integer, DialogsActivity, ChatActivity, Context, View, ViewGroup, FrameLayout, ImageView, Bitmap, Canvas]):
        raise ImportError("Не удалось найти один или несколько ключевых классов.")
    
    JAVA_CLASSES_FOUND = True
except Exception as e:
    log(f"[SwagSafe] Критическая ошибка при импорте Java-классов: {e}")
    JAVA_CLASSES_FOUND = False

class SwagSafePlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self._activity_hook = None
        self._dialogs_resume_hook = None
        self._dialogs_pause_hook = None
        self._chat_resume_hook = None
        self._chat_pause_hook = None
        
        self._success_callback = None
        self._failure_callback = None
        
        self.is_session_authenticated = False
        self._protected_item_ref = None
        self._is_authenticating = False
        
        self._auth_scrim = None
        self._blur_overlay = None
        self._bitmaps_to_recycle: List[Bitmap] = []
        self._auth_reset_timer: Optional[threading.Timer] = None
        self._protected_ids_cache: Set[int] = set()

    def create_settings(self):
        return [
            Header(text="Безопасность SwagSafe"),
            Divider(text="Общие настройки"),
            Input(
                key="auth_reset_delay",
                text="Доверенное время (сек)",
                subtext=f"На сколько секунд запомнить успешный вход. По умолчанию: {DEFAULT_AUTH_RESET_DELAY_SECONDS} сек.",
                default=str(DEFAULT_AUTH_RESET_DELAY_SECONDS),
                icon="msg_timer_solar"
            ),
            Divider(text="Защита разделов"),
            Switch(
                key="archive_lock_enabled",
                text="Защитить архив",
                subtext="Запрашивать аутентификацию при входе в архив.",
                default=False,
                icon="chats_archive_solar"
            ),
            Input(
                key="protected_chat_ids",
                text="Защищенные чаты",
                subtext="Введите ID чатов через запятую (например: -100123, 777000)",
                default="",
                icon="msg_block_solar",
                on_change=lambda val: self._update_protected_ids_cache(val)
            )
        ]

    def on_plugin_load(self):
        if JAVA_CLASSES_FOUND:
            self.add_on_send_message_hook()
            self._hook_lifecycle_methods()
            self._update_protected_ids_cache(self.get_setting("protected_chat_ids", ""))
            self.log(f"Плагин '{self.name}' загружен и готов к работе.")
        else:
            self.log(f"Плагин '{self.name}' не может быть загружен: необходимые классы не найдены.")

    def on_plugin_unload(self):
        self._unhook_activity_result()
        self._unhook_lifecycle_methods()
        self._cancel_auth_reset_timer()
        self._remove_blur_effect()
        self._remove_scrim()
        self.log(f"Плагин '{self.name}' выгружен.")

    def _update_protected_ids_cache(self, ids_string: str):
        try:
            if not ids_string:
                self._protected_ids_cache = set()
                return
            
            ids = {int(i.strip()) for i in ids_string.split(',') if i.strip()}
            self._protected_ids_cache = ids
            log(f"[SwagSafe] Кэш защищенных ID обновлен: {self._protected_ids_cache}")
        except ValueError:
            log("[SwagSafe] Ошибка парсинга ID чатов. Убедитесь, что это числа, разделенные запятой.")
            self._protected_ids_cache = set()

    def _cancel_auth_reset_timer(self):
        if self._auth_reset_timer and self._auth_reset_timer.is_alive():
            self._auth_reset_timer.cancel()
            self._auth_reset_timer = None
            log("[SwagSafe] Таймер сброса аутентификации отменен.")

    def _reset_auth_state(self):
        self.is_session_authenticated = False
        self._auth_reset_timer = None
        delay = self.get_setting("auth_reset_delay", str(DEFAULT_AUTH_RESET_DELAY_SECONDS))
        log(f"[SwagSafe] Аутентификация сброшена после {delay} секунд.")

    def _hook_lifecycle_methods(self):
        try:
            if not self._dialogs_resume_hook:
                resume_method = DialogsActivity.getClass().getDeclaredMethod("onResume")
                self._dialogs_resume_hook = self.hook_method(resume_method, self.LifecycleHook(self, "resume"))
                pause_method = DialogsActivity.getClass().getDeclaredMethod("onPause")
                self._dialogs_pause_hook = self.hook_method(pause_method, self.LifecycleHook(self, "pause"))
                log("[SwagSafe] Установлены хуки на DialogsActivity.")
            
            if not self._chat_resume_hook:
                resume_method = ChatActivity.getClass().getDeclaredMethod("onResume")
                self._chat_resume_hook = self.hook_method(resume_method, self.LifecycleHook(self, "resume"))
                pause_method = ChatActivity.getClass().getDeclaredMethod("onPause")
                self._chat_pause_hook = self.hook_method(pause_method, self.LifecycleHook(self, "pause"))
                log("[SwagSafe] Установлены хуки на ChatActivity.")
        except Exception:
            log(f"[SwagSafe] Не удалось установить хуки: {traceback.format_exc()}")

    def _unhook_lifecycle_methods(self):
        hooks = ['_dialogs_resume_hook', '_dialogs_pause_hook', '_chat_resume_hook', '_chat_pause_hook']
        for hook_name in hooks:
            hook = getattr(self, hook_name, None)
            if hook:
                try: self.unhook_method(hook)
                except Exception: pass
                setattr(self, hook_name, None)
        log("[SwagSafe] Все хуки жизненного цикла удалены.")

    def on_send_message_hook(self, account, params):
        if getattr(params, "message", "").strip().lower() == ".swagsafe":
            run_on_ui_thread(lambda: self._show_lock_screen_prompt(
                success_callback=lambda: BulletinHelper.show_success("Аутентификация успешна!"),
                failure_callback=lambda: BulletinHelper.show_error("Аутентификация отменена.")
            ))
            return HookResult(strategy=HookStrategy.CANCEL)
        return HookResult()

    def _show_lock_screen_prompt(self, success_callback: Optional[Callable[[], None]] = None, failure_callback: Optional[Callable[[], None]] = None):
        try:
            self._success_callback = success_callback
            self._failure_callback = failure_callback
            fragment = get_last_fragment()
            activity = fragment.getParentActivity() if fragment else None

            if not activity:
                BulletinHelper.show_error("Не удалось получить доступ к текущему экрану.")
                if self._failure_callback: run_on_ui_thread(self._failure_callback)
                return

            keyguard_manager = activity.getSystemService("keyguard")
            if not keyguard_manager or not keyguard_manager.isKeyguardSecure():
                BulletinHelper.show_info("На устройстве не настроен экран блокировки. Доступ разрешен.")
                if self._success_callback:
                    run_on_ui_thread(self._success_callback)
                return

            intent = keyguard_manager.createConfirmDeviceCredentialIntent("Подтверждение личности", "Это необходимо для доступа.")
            if intent is None:
                BulletinHelper.show_error("Не удалось создать запрос на аутентификацию.")
                if self._failure_callback: run_on_ui_thread(self._failure_callback)
                return

            self._hook_activity_result(activity)
            activity.startActivityForResult(intent, REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS)

        except Exception:
            log(f"[SwagSafe] Ошибка при вызове экрана блокировки: {traceback.format_exc()}")
            BulletinHelper.show_error("Произошла непредвиденная ошибка.")
            if self._failure_callback: run_on_ui_thread(self._failure_callback)

    def _hook_activity_result(self, activity):
        self._unhook_activity_result()
        
        class ActivityResultHook(MethodHook):
            def __init__(self, plugin):
                super().__init__()
                self.plugin_ref = weakref.ref(plugin)

            def before_hooked_method(self, param):
                plugin = self.plugin_ref()
                if not plugin: return

                request_code, result_code = param.args[0], param.args[1]

                if request_code == REQUEST_CODE_CONFIRM_DEVICE_CREDENTIALS:
                    plugin._is_authenticating = False
                    plugin._unhook_activity_result()
                    if result_code == Activity.RESULT_OK:
                        if plugin._success_callback:
                            run_on_ui_thread(plugin._success_callback)
                    else:
                        if plugin._failure_callback:
                            run_on_ui_thread(plugin._failure_callback)
                    
                    plugin._success_callback = None
                    plugin._failure_callback = None
                    param.setResult(None)

        try:
            method = activity.getClass().getDeclaredMethod("onActivityResult", Integer.TYPE, Integer.TYPE, Intent)
            self._activity_hook = self.hook_method(method, ActivityResultHook(self))
        except Exception:
            log(f"[SwagSafe] Не удалось установить хук на onActivityResult: {traceback.format_exc()}")

    def _unhook_activity_result(self):
        if self._activity_hook:
            try: self.unhook_method(self._activity_hook)
            except Exception: pass
            self._activity_hook = None
    
    def _apply_blur_effect(self, activity):
        if self._blur_overlay: return
        try:
            decor_view = activity.getWindow().getDecorView()
            root_view = decor_view.getRootView()
            width, height = root_view.getWidth(), root_view.getHeight()
            if width <= 0 or height <= 0: return

            screenshot_bmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)
            self._bitmaps_to_recycle.append(screenshot_bmp)
            root_view.draw(Canvas(screenshot_bmp))

            scale_factor = 16
            small_bmp = Bitmap.createScaledBitmap(screenshot_bmp, width // scale_factor, height // scale_factor, True)
            self._bitmaps_to_recycle.append(small_bmp)
            
            blurred_bmp = Bitmap.createScaledBitmap(small_bmp, width, height, True)
            self._bitmaps_to_recycle.append(blurred_bmp)

            overlay = FrameLayout(activity)
            overlay.setLayoutParams(ViewGroup.LayoutParams(-1, -1))
            overlay.setClickable(True)

            image_view = ImageView(activity)
            image_view.setImageBitmap(blurred_bmp)
            image_view.setScaleType(ImageView.ScaleType.CENTER_CROP)
            overlay.addView(image_view)

            if isinstance(decor_view, ViewGroup):
                decor_view.addView(overlay)
                self._blur_overlay = overlay
                log("[SwagSafe] Оверлей с размытием добавлен.")
        except Exception:
            log(f"[SwagSafe] Ошибка при создании эффекта размытия: {traceback.format_exc()}")
            self._remove_blur_effect()

    def _remove_blur_effect(self):
        if not self._blur_overlay: return
        try:
            overlay = self._blur_overlay
            if overlay.getParent():
                overlay.getParent().removeView(overlay)
            log("[SwagSafe] Оверлей с размытием удален.")
        except Exception as e:
            log(f"[SwagSafe] Ошибка при удалении оверлея размытия: {e}")
        finally:
            self._blur_overlay = None
            for bmp in self._bitmaps_to_recycle:
                if bmp and not bmp.isRecycled():
                    bmp.recycle()
            self._bitmaps_to_recycle.clear()
            log("[SwagSafe] Ресурсы размытия очищены.")
    
    def _remove_scrim(self):
        if self._auth_scrim:
            try:
                if self._auth_scrim.getParent():
                    self._auth_scrim.getParent().removeView(self._auth_scrim)
            except Exception: pass
            self._auth_scrim = None

    class LifecycleHook(MethodHook):
        def __init__(self, plugin, hook_type):
            super().__init__()
            self.plugin_ref = weakref.ref(plugin)
            self.hook_type = hook_type
        
        def _is_target_protected(self, plugin, fragment):
            is_archive = isinstance(fragment, DialogsActivity) and fragment.getArguments().getInt("folderId", 0) == 1
            if is_archive and plugin.get_setting("archive_lock_enabled", False):
                return True
            
            if isinstance(fragment, ChatActivity):
                dialog_id = fragment.getDialogId()
                if dialog_id in plugin._protected_ids_cache:
                    return True
            
            return False

        def after_hooked_method(self, param):
            if self.hook_type != "resume": return
            
            plugin = self.plugin_ref()
            if not plugin: return
            
            fragment = param.thisObject
            if not self._is_target_protected(plugin, fragment): return

            plugin._protected_item_ref = weakref.ref(fragment)
            plugin._cancel_auth_reset_timer()
            
            if plugin.is_session_authenticated:
                log("[SwagSafe] Сессия аутентифицирована, доступ разрешен.")
                return
            
            if plugin._is_authenticating:
                log("[SwagSafe] Обнаружен onResume во время процесса аутентификации. Отмена.")
                if fragment: fragment.finishFragment()
                plugin._remove_blur_effect()
                plugin._remove_scrim()
                plugin._is_authenticating = False
                return
            
            log("[SwagSafe] Защищенный раздел, требуется аутентификация.")
            plugin._is_authenticating = True
            
            plugin._apply_blur_effect(fragment.getParentActivity())

            if plugin._auth_scrim is None:
                fragment_view = fragment.getFragmentView()
                if fragment_view and isinstance(fragment_view, ViewGroup):
                    scrim = View(fragment.getParentActivity())
                    scrim.setBackgroundColor(0x7F000000) 
                    scrim.setClickable(True)
                    fragment_view.addView(scrim, ViewGroup.LayoutParams(-1, -1))
                    plugin._auth_scrim = scrim

            def on_success():
                plugin.is_session_authenticated = True
                plugin._remove_blur_effect()
                plugin._remove_scrim()
                BulletinHelper.show_success("Доступ разрешен.")
            
            def on_failure():
                frag = plugin._protected_item_ref() if plugin._protected_item_ref else None
                if frag:
                    frag.finishFragment()
                BulletinHelper.show_error("Доступ запрещен.")
            
            plugin._show_lock_screen_prompt(on_success, on_failure)

        def before_hooked_method(self, param):
            if self.hook_type != "pause": return
            
            plugin = self.plugin_ref()
            if not plugin: return
            
            fragment = param.thisObject
            if not self._is_target_protected(plugin, fragment): return

            if not plugin._is_authenticating:
                plugin._remove_blur_effect()
                plugin._remove_scrim()
            
            if plugin.is_session_authenticated:
                log("[SwagSafe] Выход из защищенного раздела, запуск таймера сброса аутентификации.")
                plugin._cancel_auth_reset_timer()
                try:
                    delay = int(plugin.get_setting("auth_reset_delay", str(DEFAULT_AUTH_RESET_DELAY_SECONDS)))
                except ValueError:
                    delay = DEFAULT_AUTH_RESET_DELAY_SECONDS
                
                plugin._auth_reset_timer = threading.Timer(delay, plugin._reset_auth_state)
                plugin._auth_reset_timer.start()