"""
Если вы при разработке своего плагина использовали готовые фрагменты кода из моего, пожалуйста,
укажите в описании своего плагина @zwylair в качестве благодарности за вклад в разработку. Спасибо ♥

If you used code snippets from my plugin in the development of your own, please credit @zwylair
in your plugin’s description as a thank you for the contribution. Thanks ♥


⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣤⣀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣄⡀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⠿⠛⠛⠛⠛⠛⢿⣷⣤⣾⠿⠛⠛⠙⠛⠛⠿⠗
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⡿⠁⠀⠀⠀⠀⠀⠀⠀⠙⡿⠁⠀⠀⠀⢀⣤⣀⠀⠀⢀⣤⣶⡆
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⡇
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣧⣄
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠀⣿⣷⣄⣀⣤⡄⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⠷
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣁⣤⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠘⠛⠛⠛⠻⣿⣿⣿⠋⠉⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⢿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠹⣿⡟⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⠟⢙⠛⠛⠀⠀⠀⠀⠀⠀⣀⣴⡿⠓⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠈⠻⢿⣦⣄⠀⣠⣾⡿⠋⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⠿⠋⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠀
"""

import traceback
from typing import Any, Optional, Callable

from ui.settings import Header, Switch, Text
from base_plugin import BasePlugin, XposedHook
from hook_utils import get_private_field

from java import jclass
from java.util import Locale
from java.lang import Boolean, Integer

__name__ = "EndlessFoldersScroll"
__description__ = "Swipe the folders until your fingers rub off! (requires zwylib)"
__icon__ = "zwyPluginsIcons/5"
__version__ = "1.0.7"
__id__ = "endlessFoldersScroll"
__author__ = "@zwylair"
__min_version__ = "11.12.1"


class EndlessScrollHook(XposedHook):
    def replace_hooked_method(self, param):
        forward: bool = param.args[0]
        filter_tabs_view = param.thisObject

        position_to_id = get_private_field(filter_tabs_view, "positionToId")
        if position_to_id is None:
            return

        disable_moving_to_last_tab: bool = setting_getter("disable_moving_to_last_tab", DEFAULT_DISABLE_MOVING_TO_LAST_TAB)
        first_tab_id = filter_tabs_view.getFirstTabId()
        last_tab_id = position_to_id.get(position_to_id.size() - 1)
        current_pos = get_private_field(filter_tabs_view, "currentPosition")
        new_pos = current_pos + (1 if forward else -1)
        new_tab_id = position_to_id.get(new_pos, first_tab_id if forward else last_tab_id)
        is_first_tab_now = current_pos <= 0

        if disable_moving_to_last_tab and is_first_tab_now and not forward and new_tab_id == last_tab_id:
            return Integer(-1)
        return Integer(new_tab_id)


class Locales:
    en = {
        "zwylib_was_not_found": "ZwyLib plugin required for this plugin is not found!",
        "install_bulletin_button": "Install",
        "settings_header": "Settings",
        "disable_moving_to_last_tab_setting_title": "Limit swipe to left",
        "disable_moving_to_last_tab_setting_hint": "Swipe no longer prevents the side menu from opening on the first tab"
    }
    ru = {
        "zwylib_was_not_found": "Требуемый плагин ZwyLib не найден!",
        "install_bulletin_button": "Установить",
        "settings_header": "Настройки",
        "disable_moving_to_last_tab_setting_title": "Ограничить свайп влево",
        "disable_moving_to_last_tab_setting_hint": "Свайп больше не препятствует открытию бокового меню на первой папке"
    }
    uk = {
        "zwylib_was_not_found": "Не знайдено обов’язковий плагін ZwyLib!",
        "install_bulletin_button": "Встановити",
        "settings_header": "Налаштування",
        "disable_moving_to_last_tab_setting_title": "Обмежети спайв вліво",
        "disable_moving_to_last_tab_setting_hint": "Свайп більше не перешкоджає відкриттю бічного меню на першій папці"
    }
    default = en


def localise(key: str) -> str:
    locale_dict = getattr(Locales, LOCALE, Locales.default)
    return locale_dict.get(key, key)


AUTOUPDATE_CHANNEL_ID = 2521243181
AUTOUPDATE_MSG_ID = 52
LOG_PREFIX = __name__
LOCALE = Locale.getDefault().getLanguage()

DEFAULT_DISABLE_MOVING_TO_LAST_TAB = False

try:
    import zwylib
except (ImportError, ModuleNotFoundError):
    raise Exception(localise("zwylib_was_not_found"))

logger = zwylib.build_log(LOG_PREFIX)
BulletinHelper = zwylib.build_bulletin_helper(LOG_PREFIX)
setting_getter: Optional[Callable[[str, Optional[Any]], Any]] = None


class EndlessScrollPlugin(BasePlugin):
    def create_settings(self):
        try:
            return [
                Header(text=localise("settings_header")),
                Switch(
                    key="disable_moving_to_last_tab",
                    text=localise("disable_moving_to_last_tab_setting_title"),
                    subtext=localise("disable_moving_to_last_tab_setting_hint"),
                    icon="camera_revert2",
                    default=DEFAULT_DISABLE_MOVING_TO_LAST_TAB,
                ),
            ]
        except:
            text = (
                f"An exception occurred on {self.__class__.__name__}.create_settings():\n"
                f"{traceback.format_exc().strip()}"
            )
            logger.info(text)
            return [Text(text)]

    def on_plugin_load(self):
        global setting_getter, logger, BulletinHelper
        setting_getter = self.get_setting

        zwylib.add_autoupdater_task(__id__, AUTOUPDATE_CHANNEL_ID, AUTOUPDATE_MSG_ID)

        clazz = jclass("org.telegram.ui.Components.FilterTabsView").getClass()
        method = clazz.getDeclaredMethod("getNextPageId", Boolean.TYPE)
        self.hook_method(method, EndlessScrollHook())

        logger.info("Loaded")

    def on_plugin_unload(self):
        zwylib.remove_autoupdater_task(__id__)
        logger.info("Unloaded")
