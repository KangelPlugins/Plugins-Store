"""
╭─────────────────────────────────────────────────────────────╮
│                                                             │
│  ███╗   ███╗ █████╗ ███╗   ██╗██████╗ ██████╗ ███████╗      │
│  ████╗ ████║██╔══██╗████╗  ██║██╔══██╗██╔══██╗██╔════╝      │
│  ██╔████╔██║███████║██╔██╗ ██║██║  ██║██████╔╝█████╗        │
│  ██║╚██╔╝██║██╔══██║██║╚██╗██║██║  ██║██╔══██╗██╔══╝        │
│  ██║ ╚═╝ ██║██║  ██║██║ ╚████║██████╔╝██║  ██║███████╗      │
│  ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝╚══════╝      │
│                                                             │
│         █████╗ ██╗                                          │
│        ██╔══██╗██║    ╭───────────────────╮                 │
│        ███████║██║    │© 2024-2025        │                 │
│        ██╔══██║██║    │Licensed Product   │                 │
│        ██║  ██║██║    │All Rights Reserved│                 │
│        ╚═╝  ╚═╝╚═╝    ╰───────────────────╯                 │
│                                                             │
│  ╭───────────────────────────────────────────────────────╮  │
│  │ Unauthorized use, reproduction or distribution        │  │
│  │ of this software is strictly prohibited               │  │
│  ╰───────────────────────────────────────────────────────╯  │
│                                                             │
╰─────────────────────────────────────────────────────────────╯
"""

import traceback
from base_plugin import BasePlugin
from hook_utils import find_class, get_private_field
from android_utils import log, OnClickListener
from java import dynamic_proxy, jclass
from android.view import View, Gravity
from android.widget import FrameLayout
from org.telegram.ui import ChatActivity, ProfileActivity
from android.os import Bundle
from org.telegram.ui.ActionBar import Theme
from org.telegram.ui.Components import BackupImageView, AvatarDrawable
from org.telegram.messenger import AndroidUtilities, UserConfig, MessagesStorage

__id__ = "cherry_header"
__name__ = "CherryHeader"
__description__ = """Centers chat title/subtitle, overlays avatar on menu, and shows unread badge

Центрирует хедер по новому! """
__author__ = """MandreAI & СвагаНеТута

@swagnonher & @MandreAI_bot"""
__min_version__ = "11.12.0"
__icon__ = "exteraPlugins/0"
__version__ = "1.0"


class CherryHeaderPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.hook_chat_resume_ref = None
        self.hook_unread_badge_ref = None
        self.hook_back_button_draw_ref = None
        self.current_back_button = None
        self.unread_count = 0

    def on_plugin_load(self):
        try:
            ChatActivityCls = find_class("org.telegram.ui.ChatActivity")
            onResume = ChatActivityCls.getClass().getDeclaredMethod("onResume")
            onResume.setAccessible(True)
            self.hook_chat_resume_ref = self.hook_method(onResume, _ChatActivityResumeHook(self))
        except Exception:
            log(f"[CherryHeader] Failed to hook ChatActivity.onResume: {traceback.format_exc()}")

        self._hook_unread_badge()

    def on_plugin_unload(self):
        try:
            if self.hook_chat_resume_ref:
                self.unhook_method(self.hook_chat_resume_ref)
        except Exception:
            pass
        try:
            if self.hook_unread_badge_ref:
                self.unhook_method(self.hook_unread_badge_ref)
        except Exception:
            pass
        try:
            if self.hook_back_button_draw_ref:
                self.unhook_method(self.hook_back_button_draw_ref)
        except Exception:
            pass

    def _center_header(self, chat_activity):
        try:
            action_bar = chat_activity.getActionBar()
            if action_bar is None:
                return
            title_text_view = None
            subtitle_text_view = None
            container = None
            for fname in ("animatedAvatarContainer", "avatarContainer"):
                try:
                    f = chat_activity.getClass().getDeclaredField(fname)
                    f.setAccessible(True)
                    container = f.get(chat_activity)
                    if container is not None:
                        break
                except Exception:
                    continue
            if container is not None:
                try:
                    m = container.getClass().getMethod("getTitleTextView")
                    m.setAccessible(True)
                    title_text_view = m.invoke(container)
                except Exception:
                    try:
                        title_text_view = getattr(container, 'getTitleTextView')()
                    except Exception:
                        pass
                try:
                    m2 = container.getClass().getMethod("getSubtitleTextView")
                    m2.setAccessible(True)
                    subtitle_text_view = m2.invoke(container)
                except Exception:
                    try:
                        subtitle_text_view = getattr(container, 'getSubtitleTextView')()
                    except Exception:
                        pass
                try:
                    lp_c = container.getLayoutParams()
                    if lp_c is not None:
                        try:
                            lp_c.width = -1
                        except Exception:
                            pass
                        try:
                            setattr(lp_c, 'gravity', Gravity.CENTER)
                        except Exception:
                            pass
                        try:
                            if hasattr(lp_c, 'leftMargin'):
                                lp_c.leftMargin = 0
                            if hasattr(lp_c, 'rightMargin'):
                                lp_c.rightMargin = 0
                        except Exception:
                            pass
                        container.setLayoutParams(lp_c)
                except Exception:
                    pass
                try:
                    pdL = container.getPaddingLeft()
                    pdT = container.getPaddingTop()
                    pdR = container.getPaddingRight()
                    pdB = container.getPaddingBottom()
                    if pdL != 0 or pdR != 0:
                        container.setPadding(0, pdT, 0, pdB)
                except Exception:
                    pass
            
            if title_text_view is None:
                try:
                    title_field = action_bar.getClass().getDeclaredField("titleTextView")
                    title_field.setAccessible(True)
                    title_text_view = title_field.get(action_bar)
                except Exception:
                    title_text_view = None
            if subtitle_text_view is None:
                try:
                    subtitle_field = action_bar.getClass().getDeclaredField("subtitleTextView")
                    subtitle_field.setAccessible(True)
                    subtitle_text_view = subtitle_field.get(action_bar)
                except Exception:
                    subtitle_text_view = None
            try:
                if title_text_view is not None and hasattr(title_text_view, 'setLeftDrawable'):
                    title_text_view.setLeftDrawable(None)
            except Exception:
                pass

            def _center_view(tv):
                if tv is None:
                    return
                try:
                    tv.setGravity(Gravity.CENTER)
                except Exception:
                    pass
                try:
                    tv.setLines(1)
                    tv.setEllipsize(jclass("android.text.TextUtils").TruncateAt.END)
                except Exception:
                    pass
                try:
                    lp = tv.getLayoutParams()
                    if lp is not None:
                        try:
                            lp.width = -1
                        except Exception:
                            pass
                        try:
                            setattr(lp, 'gravity', Gravity.CENTER)
                        except Exception:
                            pass
                        try:
                            if hasattr(lp, 'leftMargin'):
                                lp.leftMargin = 0
                            if hasattr(lp, 'rightMargin'):
                                lp.rightMargin = 0
                        except Exception:
                            pass
                        tv.setLayoutParams(lp)
                except Exception:
                    pass
                try:
                    parent = tv.getParent()
                    if parent is not None:
                        name = parent.getClass().getSimpleName()
                        if 'FrameLayout' in name:
                            lp2 = jclass('android.widget.FrameLayout$LayoutParams')(-1, -2)
                            lp2.gravity = Gravity.CENTER
                            tv.setLayoutParams(lp2)
                        elif 'LinearLayout' in name:
                            lp3 = jclass('android.widget.LinearLayout$LayoutParams')(-1, -2)
                            tv.setLayoutParams(lp3)
                except Exception:
                    pass

            _center_view(title_text_view)
            _center_view(subtitle_text_view)
            try:
                if title_text_view is not None:
                    title_text_view.setVisibility(View.VISIBLE)
            except Exception:
                pass
            try:
                if subtitle_text_view is not None:
                    subtitle_text_view.setVisibility(View.VISIBLE)
            except Exception:
                pass
        except Exception:
            log(f"[CherryHeader] Failed to center header: {traceback.format_exc()}")

    def _overlay_avatar_on_menu(self, chat_activity):
        try:
            header_item = None
            try:
                header_item_field = chat_activity.getClass().getDeclaredField("headerItem")
                header_item_field.setAccessible(True)
                header_item = header_item_field.get(chat_activity)
            except Exception:
                header_item = None
            if header_item is None:
                return

            try:
                if header_item.findViewWithTag("CherryHeaderAvatarOverlay") is not None:
                    overlay = header_item.findViewWithTag("CherryHeaderAvatarOverlay")
                    self._update_overlay_image(chat_activity, overlay)
                    return
            except Exception:
                pass

            context = chat_activity.getContext() or chat_activity.getParentActivity()
            if context is None:
                return
            avatar_view = BackupImageView(context)
            avatar_view.setTag("CherryHeaderAvatarOverlay")
            try:
                avatar_view.setRoundRadius(AndroidUtilities.dp(14))
            except Exception:
                pass
            try:
                size = AndroidUtilities.dp(28)
                params = FrameLayout.LayoutParams(size, size)
                params.gravity = Gravity.CENTER
            except Exception:
                params = FrameLayout.LayoutParams(FrameLayout.LayoutParams.WRAP_CONTENT, FrameLayout.LayoutParams.WRAP_CONTENT)
                params.gravity = Gravity.CENTER

            self._update_overlay_image(chat_activity, avatar_view)

            def on_click(*_):
                try:
                    if hasattr(header_item, 'performClick'):
                        header_item.performClick()
                except Exception:
                    pass
            avatar_view.setOnClickListener(OnClickListener(on_click))

            try:
                header_item.addView(avatar_view, params)
            except Exception:
                try:
                    d = AvatarDrawable()
                    user = getattr(chat_activity, 'currentUser', None)
                    chat = getattr(chat_activity, 'currentChat', None)
                    if user:
                        d.setInfo(user)
                    elif chat:
                        d.setInfo(chat)
                    header_item.setIcon(d)
                except Exception:
                    pass
        except Exception:
            log(f"[CherryHeader] Failed overlay avatar: {traceback.format_exc()}")

    def _update_overlay_image(self, chat_activity, avatar_view):
        try:
            user = getattr(chat_activity, 'currentUser', None)
            chat = getattr(chat_activity, 'currentChat', None)
            if user is None and chat is None:
                return
            d = AvatarDrawable()
            if user:
                d.setInfo(user)
                avatar_view.setForUserOrChat(user, d)
            else:
                d.setInfo(chat)
                avatar_view.setForUserOrChat(chat, d)
        except Exception:
            pass

    def _hook_unread_badge(self):
        try:
            chat_activity_class = find_class("org.telegram.ui.ChatActivity")
            onResume_method = chat_activity_class.getClass().getDeclaredMethod("onResume")
            onResume_method.setAccessible(True)
            self.hook_unread_badge_ref = self.hook_method(onResume_method, _UnreadBadgeHook(self))
        except Exception:
            log(f"[CherryHeader] Failed to hook unread badge: {traceback.format_exc()}")

    def _hook_badges_load(self):
        try:
            candidates = [
                "com.exteragram.messenger.badges",
                "com.exteragram.messenger.badges.BadgesController",
                "com.exteragram.messenger.badges.Badges"
            ]
            for cname in candidates:
                try:
                    cls = find_class(cname)
                except Exception:
                    cls = None
                if not cls:
                    continue
                try:
                    for m in cls.getClass().getDeclaredMethods():
                        if m.getName() == "loadCustomBadges":
                            m.setAccessible(True)
                            self.hook_method(m, _BadgesLoadHook(self))
                            return
                except Exception:
                    continue
        except Exception:
            pass

    def _apply_adaptive_centering(self, chat_activity):
        try:
            action_bar = chat_activity.getActionBar()
            if action_bar is None:
                return
            container = None
            for fname in ("animatedAvatarContainer", "avatarContainer"):
                try:
                    f = chat_activity.getClass().getDeclaredField(fname)
                    f.setAccessible(True)
                    container = f.get(chat_activity)
                    if container is not None:
                        break
                except Exception:
                    continue
            if container is None:
                title_view = None
                try:
                    tf = action_bar.getClass().getDeclaredField("titleTextView")
                    tf.setAccessible(True)
                    title_view = tf.get(action_bar)
                except Exception:
                    title_view = None
                try:
                    parent = title_view.getParent() if title_view is not None else None
                    container = parent if parent is not None else None
                except Exception:
                    container = None
            target = container if container is not None else action_bar

            RunnableClass = find_class("java.lang.Runnable")
            RunnableProxy = dynamic_proxy(RunnableClass)

            class CenterRunnable(RunnableProxy):
                def __init__(self, plugin, bar, cont):
                    super().__init__()
                    self.plugin = plugin
                    self.bar = bar
                    self.cont = cont
                def run(self):
                    try:
                        try:
                            if self.bar.isActionModeShowed():
                                return
                        except Exception:
                            pass
                        aw = self.bar.getMeasuredWidth()
                        if aw <= 0 or self.cont is None:
                            return
                        cw = self.cont.getMeasuredWidth()
                        cl = self.cont.getLeft()
                        center_x = aw / 2.0
                        current_mid = cl + cw / 2.0
                        dx = center_x - current_mid
                        try:
                            self.cont.setTranslationX(dx)
                        except Exception:
                            pass
                    except Exception:
                        pass

            try:
                target.post(CenterRunnable(self, action_bar, target))
            except Exception:
                pass
        except Exception:
            pass

    def _attach_title_click_handler(self, chat_activity):
        # Make title/subtitle clicks trigger the overflow (three-dots) menu
        action_bar = chat_activity.getActionBar()
        if action_bar is None:
            return

        # Resolve overflow item: prefer ChatActivity.headerItem; else find ActionBar child with submenu
        header_item = None
        try:
            hf = chat_activity.getClass().getDeclaredField("headerItem")
            hf.setAccessible(True)
            header_item = hf.get(chat_activity)
        except Exception:
            header_item = None
        if header_item is None:
            try:
                count = action_bar.getChildCount() if hasattr(action_bar, 'getChildCount') else 0
                for i in range(count):
                    child = action_bar.getChildAt(i)
                    if child is None:
                        continue
                    name = child.getClass().getSimpleName()
                    if 'ActionBarMenuItem' in name:
                        try:
                            if hasattr(child, 'hasSubMenu') and child.hasSubMenu():
                                header_item = child
                                break
                        except Exception:
                            continue
            except Exception:
                pass
        if header_item is None:
            return

        # Resolve title/subtitle views from ActionBar
        title_view = None
        subtitle_view = None
        try:
            getTitle = getattr(action_bar, 'getTitleTextView', None)
            title_view = getTitle() if getTitle is not None else None
        except Exception:
            title_view = None
        if title_view is None:
            try:
                tf = action_bar.getClass().getDeclaredField("titleTextView")
                tf.setAccessible(True)
                title_view = tf.get(action_bar)
            except Exception:
                title_view = None
        try:
            getSubtitle = getattr(action_bar, 'getSubtitleTextView', None)
            subtitle_view = getSubtitle() if getSubtitle is not None else None
        except Exception:
            subtitle_view = None
        if subtitle_view is None:
            try:
                sf = action_bar.getClass().getDeclaredField("subtitleTextView")
                sf.setAccessible(True)
                subtitle_view = sf.get(action_bar)
            except Exception:
                subtitle_view = None

        def on_click(*_):
            # Open chat info (ProfileActivity) on title/subtitle clicks
            try:
                # Prefer using avatarContainer.openProfile if available
                cont = None
                for fname in ("animatedAvatarContainer", "avatarContainer"):
                    try:
                        f = chat_activity.getClass().getDeclaredField(fname)
                        f.setAccessible(True)
                        cont = f.get(chat_activity)
                        if cont is not None:
                            break
                    except Exception:
                        continue
                if cont is not None:
                    try:
                        if hasattr(cont, 'openProfile'):
                            cont.openProfile(False)
                            return
                    except Exception:
                        pass
                # Fallback: present ProfileActivity directly
                user = getattr(chat_activity, 'currentUser', None)
                chat = getattr(chat_activity, 'currentChat', None)
                args = Bundle()
                if user is not None:
                    try:
                        args.putLong("user_id", getattr(user, 'id', 0))
                    except Exception:
                        pass
                elif chat is not None:
                    try:
                        cid = getattr(chat, 'id', 0)
                        # ProfileActivity expects chat_id as negative
                        args.putLong("chat_id", -abs(cid))
                    except Exception:
                        pass
                if (user is not None or chat is not None):
                    try:
                        chat_activity.presentFragment(ProfileActivity(args))
                        return
                    except Exception:
                        pass
            except Exception:
                pass

        click_listener = OnClickListener(on_click)
        try:
            if title_view is not None:
                title_view.setClickable(True)
                title_view.setOnClickListener(click_listener)
        except Exception:
            pass
        try:
            if subtitle_view is not None:
                subtitle_view.setClickable(True)
                subtitle_view.setOnClickListener(click_listener)
        except Exception:
            pass

    def _remove_left_header_avatar(self, chat_activity):
        try:
            action_bar = chat_activity.getActionBar()
            if action_bar is None:
                return
            container = None
            for fname in ("animatedAvatarContainer", "avatarContainer"):
                try:
                    f = chat_activity.getClass().getDeclaredField(fname)
                    f.setAccessible(True)
                    container = f.get(chat_activity)
                    if container is not None:
                        break
                except Exception:
                    continue

            def hide_avatar_children(view_group):
                try:
                    if view_group is None or not hasattr(view_group, 'getChildCount'):
                        return False
                    removed = False
                    for i in range(view_group.getChildCount()):
                        child = view_group.getChildAt(i)
                        if child is None:
                            continue
                        name = child.getClass().getSimpleName()
                        if 'BackupImageView' in name or 'ImageView' in name or 'Avatar' in name:
                            try:
                                child.setVisibility(View.GONE)
                                removed = True
                            except Exception:
                                pass
                    return removed
                except Exception:
                    return False

            if container is not None:
                try:
                    for mname in ("setAvatarVisible", "setShowAvatar", "setDrawAvatar", "setAvatarEnabled"):
                        if hasattr(container, mname):
                            getattr(container, mname)(False)
                except Exception:
                    pass

                try:
                    removable = []
                    for i in range(container.getChildCount()):
                        ch = container.getChildAt(i)
                        if ch is None:
                            continue
                        n = ch.getClass().getSimpleName()
                        if 'BackupImageView' in n or 'ImageView' in n or 'Avatar' in n:
                            try:
                                ch.setVisibility(View.GONE)
                                removable.append(ch)
                            except Exception:
                                pass
                        elif 'TextView' in n or 'SimpleTextView' in n:
                            try:
                                ch.setVisibility(View.VISIBLE)
                            except Exception:
                                pass
                    try:
                        for rv in removable:
                            container.removeView(rv)
                    except Exception:
                        pass
                except Exception:
                    pass

                try:
                    lp = container.getLayoutParams()
                    if lp is not None:
                        try:
                            lp.width = -1
                        except Exception:
                            pass
                        try:
                            setattr(lp, 'gravity', Gravity.CENTER)
                        except Exception:
                            pass
                        try:
                            if hasattr(lp, 'leftMargin'):
                                lp.leftMargin = 0
                            if hasattr(lp, 'rightMargin'):
                                lp.rightMargin = 0
                        except Exception:
                            pass
                        container.setLayoutParams(lp)
                except Exception:
                    pass
                try:
                    pdT = container.getPaddingTop(); pdB = container.getPaddingBottom()
                    if container.getPaddingLeft() != 0 or container.getPaddingRight() != 0:
                        container.setPadding(0, pdT, 0, pdB)
                except Exception:
                    pass
                try:
                    title_text = None
                    subtitle_text = None
                    try:
                        m1 = container.getClass().getMethod("getTitleTextView")
                        m1.setAccessible(True)
                        title_tv = m1.invoke(container)
                        if title_tv is not None:
                            title_text = title_tv.getText()
                    except Exception:
                        pass
                    try:
                        m2 = container.getClass().getMethod("getSubtitleTextView")
                        m2.setAccessible(True)
                        subtitle_tv = m2.invoke(container)
                        if subtitle_tv is not None:
                            subtitle_text = subtitle_tv.getText()
                    except Exception:
                        pass
                    try:
                        if title_text is not None:
                            action_bar.setTitle(title_text)
                    except Exception:
                        pass
                    try:
                        if subtitle_text is not None:
                            action_bar.setSubtitle(subtitle_text)
                    except Exception:
                        pass
                except Exception:
                    pass
                try:
                    parent = container.getParent()
                    if parent is not None and hasattr(parent, 'removeView'):
                        parent.removeView(container)
                except Exception:
                    pass
                try:
                    container.setVisibility(View.GONE)
                except Exception:
                    pass
                return

            try:
                if hasattr(action_bar, 'getChildCount'):
                    for i in range(action_bar.getChildCount()):
                        child = action_bar.getChildAt(i)
                        hide_avatar_children(child)
                try:
                    title_field = action_bar.getClass().getDeclaredField("titleTextView")
                    title_field.setAccessible(True)
                    tv = title_field.get(action_bar)
                    if tv is not None:
                        tv.setVisibility(View.VISIBLE)
                except Exception:
                    pass
                try:
                    subtitle_field = action_bar.getClass().getDeclaredField("subtitleTextView")
                    subtitle_field.setAccessible(True)
                    sv = subtitle_field.get(action_bar)
                    if sv is not None:
                        sv.setVisibility(View.VISIBLE)
                except Exception:
                    pass
            except Exception:
                pass
        except Exception:
            pass


class _ChatActivityResumeHook:
    def __init__(self, plugin: CherryHeaderPlugin):
        self.plugin = plugin

    def after_hooked_method(self, param):
        try:
            chat_activity = param.thisObject
            self.plugin._center_header(chat_activity)
            self.plugin._remove_left_header_avatar(chat_activity)
            self.plugin._overlay_avatar_on_menu(chat_activity)
            self.plugin._apply_adaptive_centering(chat_activity)
            self.plugin._attach_title_click_handler(chat_activity)
        except Exception:
            pass


class _UnreadBadgeHook:
    def __init__(self, plugin: CherryHeaderPlugin):
        self.plugin = plugin

    def after_hooked_method(self, param):
        try:
            chat_activity = param.thisObject
            action_bar = chat_activity.getActionBar()
            if action_bar is None:
                return
            back_button = getattr(action_bar, 'backButtonImageView', None)
            if back_button is None:
                try:
                    back_button = action_bar.getBackButton()
                except Exception:
                    back_button = None
            if back_button is None:
                return

            messages_storage = MessagesStorage.getInstance(chat_activity.getCurrentAccount())
            total_unread_count = messages_storage.getMainUnreadCount()
            current_dialog_id = 0
            current_chat_unread = 0
            try:
                current_dialog_id = chat_activity.getDialogId()
                messages_controller = chat_activity.getMessagesController()
                if messages_controller and current_dialog_id != 0:
                    dialog = messages_controller.getDialog(current_dialog_id)
                    if dialog:
                        current_chat_unread = dialog.unread_count
            except Exception:
                pass
            unread_count = max(0, total_unread_count - current_chat_unread)

            if self.plugin.current_back_button != back_button:
                self._hook_back_button(back_button, action_bar)
                self.plugin.current_back_button = back_button

            self.plugin.unread_count = unread_count
            try:
                back_button.invalidate()
            except Exception:
                pass
        except Exception:
            pass

    def _hook_back_button(self, back_button, action_bar):
        try:
            back_button_class = back_button.getClass()
            on_draw_method = back_button_class.getDeclaredMethod("onDraw", jclass("android.graphics.Canvas"))
            on_draw_method.setAccessible(True)
            draw_hook = _BackButtonDrawHook(self.plugin, action_bar)
            self.plugin.hook_back_button_draw_ref = self.plugin.hook_method(on_draw_method, draw_hook)
        except Exception:
            pass


class _BackButtonDrawHook:
    def __init__(self, plugin: CherryHeaderPlugin, action_bar):
        self.plugin = plugin
        self.action_bar = action_bar
        self.rect = jclass("android.graphics.RectF")()

    def after_hooked_method(self, param):
        try:
            current_view = param.thisObject
            if current_view != self.plugin.current_back_button:
                return
            canvas = param.args[0]
            if canvas is None or self.plugin.unread_count <= 0:
                return
            try:
                parent_view = current_view.getParent()
                while parent_view is not None:
                    if parent_view.getClass().getSimpleName() == "ActionBar":
                        if parent_view.isActionModeShowed():
                            return
                        break
                    parent_view = parent_view.getParent()
            except Exception:
                pass

            paint = jclass("org.telegram.ui.ActionBar.Theme").dialogs_countPaint
            text_paint = jclass("org.telegram.ui.ActionBar.Theme").dialogs_countTextPaint
            count_text = "99+" if self.plugin.unread_count > 99 else str(self.plugin.unread_count)

            text_width = int(text_paint.measureText(count_text))
            badge_width = max(AndroidUtilities.dp(20), text_width + AndroidUtilities.dp(12))
            badge_height = AndroidUtilities.dp(20)

            badge_left = current_view.getMeasuredWidth() - badge_width - AndroidUtilities.dp(8)
            badge_top = AndroidUtilities.dp(8)

            self.rect.set(badge_left, badge_top, badge_left + badge_width, badge_top + badge_height)
            canvas.drawRoundRect(self.rect, AndroidUtilities.dp(10), AndroidUtilities.dp(10), paint)

            text_x = badge_left + (badge_width - text_width) / 2
            text_y = badge_top + AndroidUtilities.dp(14)
            canvas.drawText(count_text, text_x, text_y, text_paint)
        except Exception:
            pass
