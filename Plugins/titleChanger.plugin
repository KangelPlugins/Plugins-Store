__id__ = "title_changer"
__name__ = "App Title Changer"
__description__ = "Allows changing the title in Telegram's main menu (reload app after updating title)"
__author__ = "@koshbko"
__version__ = "release"
__icon__ = "gentoocat/12"
__min_version__ = "11.9.0"

from java import jclass
from base_plugin import BasePlugin
from ui.settings import Header, Input
from android.util import Log
from java.lang import Class

class CustomTitlePlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.unhook_object = None
        self.custom_title = "exteraGram"
        
    def on_plugin_load(self):
        # Load saved title if exists
        saved_title = self.get_setting("custom_title", None)
        if saved_title is not None:
            self.custom_title = saved_title
            
        # Try to install hook
        self.install_hook()
        
    def install_hook(self):
        try:
            # Get the LocaleUtils class using Java reflection
            clazz = Class.forName("com.exteragram.messenger.utils.LocaleUtils")
            
            # Get the method
            method = clazz.getDeclaredMethod("getActionBarTitle")
            method.setAccessible(True)
            
            # Create hook handler
            handler = self.TitleHookHandler(self)
            
            # Hook the method
            self.unhook_object = self.hook_method(method, handler)
            
            Log.i("CustomTitle", "ActionBar title hook installed successfully")
        except Exception as e:
            Log.e("CustomTitle", f"Failed to install hook: {e}")
            self.log(f"Failed to install hook: {e}")

    def on_plugin_unload(self):
        if self.unhook_object:
            self.unhook_method(self.unhook_object)

    def create_settings(self):
        def on_title_change(new_title):
            self.custom_title = new_title
            self.set_setting("custom_title", new_title)

        return [
            Header(text="Custom ActionBar Title Settings"),
            Input(
                key="custom_title",
                text="Title Text",
                default=self.custom_title,
                on_change=on_title_change,
                icon="msg_pin"
            )
        ]

    # Inner class to handle the hook
    class TitleHookHandler:
        def __init__(self, plugin):
            self.plugin = plugin
            
        def replace_hooked_method(self, param):
            return self.plugin.custom_title