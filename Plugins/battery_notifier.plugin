import time
from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import send_message, get_last_fragment, run_on_queue
from android_utils import log
from ui.settings import Header, Input, Divider
from android.content import IntentFilter, Context
from android.os import BatteryManager
from typing import Any, Optional

START_COMMAND = ".prstart"
STOP_COMMAND = ".prstop"

DEFAULT_START_MESSAGE = "‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏ –∑–∞–ø—É—â–µ–Ω."
DEFAULT_STOP_MESSAGE = "‚èπÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–∞—Ç–∞—Ä–µ–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
DEFAULT_UPDATE_MESSAGE = """üîã –ë–∞—Ç–∞—Ä–µ—è: {level}%
–°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}
–ò—Å—Ç–æ—á–Ω–∏–∫: {plug_emoji} {plug_text}
–°–∫–æ—Ä–æ—Å—Ç—å: {current_speed_emoji} {current_speed_ma} –º–ê
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: üå°Ô∏è {temperature}
–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: ‚ö° {voltage}"""
DEFAULT_POLLING_INTERVAL = "5"

class BatteryNotifierPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.is_monitoring = False
        self.chat_id: Optional[int] = None
        self.context = None
        self.last_known_level: int = -1

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        log("Battery Notifier+ Plugin Loaded")

    def on_plugin_unload(self):
        self._stop_monitoring(notify_user=False)
        log("Battery Notifier+ Plugin Unloaded")

    def create_settings(self):
        return [
            Header(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Ç–µ–∫—Å—Ç–æ–≤"),
            Input(
                key="start_message",
                text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ",
                default=DEFAULT_START_MESSAGE,
                icon="msg_info"
            ),
            Input(
                key="stop_message",
                text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ",
                default=DEFAULT_STOP_MESSAGE,
                icon="msg_cancel"
            ),
            Input(
                key="update_message",
                text="–®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—Ä—è–¥–µ",
                default=DEFAULT_UPDATE_MESSAGE,
                icon="msg_battery"
            ),
            Divider(text="–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {level}, {status_emoji}, {status_text}, {plug_emoji}, {plug_text}, {current_speed_emoji}, {current_speed_ma}, {temperature}, {voltage}"),
            Header(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø—Ä–æ—Å–∞"),
            Input(
                key="polling_interval",
                text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–µ–∫—É–Ω–¥—ã)",
                default=DEFAULT_POLLING_INTERVAL,
                icon="msg_updates"
            ),
        ]

    def _get_and_format_battery_info(self, context):
        intent_filter = IntentFilter("android.intent.action.BATTERY_CHANGED")
        intent = context.registerReceiver(None, intent_filter)
        if not intent:
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞—Ç–∞—Ä–µ–µ."

        level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1)
        scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1)
        if level == -1 or scale == -1:
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞."
        battery_pct = int((level / float(scale)) * 100)

        status = intent.getIntExtra(BatteryManager.EXTRA_STATUS, -1)
        status_emoji, status_text = "‚ùì", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if status == BatteryManager.BATTERY_STATUS_CHARGING:
            status_emoji, status_text = "üîå", "–ó–∞—Ä—è–∂–∞–µ—Ç—Å—è"
        elif status == BatteryManager.BATTERY_STATUS_DISCHARGING:
            status_emoji, status_text = "üîã", "–†–∞–∑—Ä—è–∂–∞–µ—Ç—Å—è"
        elif status == BatteryManager.BATTERY_STATUS_FULL:
            status_emoji, status_text = "üíØ", "–ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞—Ä—è–∂–µ–Ω–∞"
        elif status == BatteryManager.BATTERY_STATUS_NOT_CHARGING:
            status_emoji, status_text = "üõë", "–ù–µ –∑–∞—Ä—è–∂–∞–µ—Ç—Å—è"

        plugged = intent.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1)
        plug_emoji, plug_text = "‚úñÔ∏è", "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ"
        if plugged == BatteryManager.BATTERY_PLUGGED_AC:
            plug_emoji, plug_text = "üîå", "–°–µ—Ç—å (AC)"
        elif plugged == BatteryManager.BATTERY_PLUGGED_USB:
            plug_emoji, plug_text = "üíª", "USB"
        elif plugged == BatteryManager.BATTERY_PLUGGED_WIRELESS:
            plug_emoji, plug_text = "üì°", "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è"

        temp_val = intent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, -1)
        temperature = f"{temp_val / 10.0}¬∞C" if temp_val != -1 else "–Ω/–¥"
        volt_val = intent.getIntExtra(BatteryManager.EXTRA_VOLTAGE, -1)
        voltage = f"{volt_val / 1000.0:.2f} –í" if volt_val != -1 else "–Ω/–¥"

        try:
            battery_manager = context.getSystemService(Context.BATTERY_SERVICE)
            current_now_ua = battery_manager.getLongProperty(BatteryManager.BATTERY_PROPERTY_CURRENT_NOW)
            current_speed_ma = int(current_now_ua / 1000)
            
            if current_speed_ma > 0: current_speed_emoji = "üîº"
            elif current_speed_ma < 0: current_speed_emoji = "üîΩ"
            else: current_speed_emoji = "‚ûñ"
        except Exception:
            current_speed_ma = 0
            current_speed_emoji = "‚ùì"

        message_format = self.get_setting("update_message", DEFAULT_UPDATE_MESSAGE)
        try:
            message_text = message_format.format(
                level=battery_pct,
                status_emoji=status_emoji, status_text=status_text,
                plug_emoji=plug_emoji, plug_text=plug_text,
                current_speed_emoji=current_speed_emoji, current_speed_ma=abs(current_speed_ma),
                temperature=temperature, voltage=voltage
            )
        except KeyError as e:
            message_text = f"–û—à–∏–±–∫–∞ –≤ —à–∞–±–ª–æ–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á {e}"
        
        return battery_pct, message_text

    def _polling_loop(self):
        log("BatteryNotifierPlugin: Polling loop started.")
        
        while self.is_monitoring:
            try:
                interval_str = self.get_setting("polling_interval", DEFAULT_POLLING_INTERVAL)
                interval_sec = max(5, int(interval_str))

                if not self.context:
                    log("BatteryNotifierPlugin: Context is missing. Stopping poll.")
                    break
                    
                current_level, message_text = self._get_and_format_battery_info(self.context)

                if current_level is not None and current_level != self.last_known_level:
                    self.last_known_level = current_level
                    send_message({"peer": self.chat_id, "message": message_text})
                
                time.sleep(interval_sec)
            except Exception as e:
                log(f"BatteryNotifierPlugin: Error in polling loop: {e}")
                time.sleep(60)
        
        log("BatteryNotifierPlugin: Polling loop finished.")

    def _start_monitoring(self, peer_id: int):
        if self.is_monitoring:
            send_message({"peer": peer_id, "message": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω."})
            return

        current_fragment = get_last_fragment()
        if not current_fragment or not current_fragment.getParentActivity():
            send_message({"peer": peer_id, "message": "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥."})
            return

        self.context = current_fragment.getParentActivity().getApplicationContext()
        self.chat_id = peer_id
        self.is_monitoring = True
        
        start_message = self.get_setting("start_message", DEFAULT_START_MESSAGE)
        send_message({"peer": self.chat_id, "message": start_message})

        initial_level, initial_message = self._get_and_format_battery_info(self.context)
        if initial_level is not None:
            self.last_known_level = initial_level
            send_message({"peer": self.chat_id, "message": initial_message})
        
        run_on_queue(self._polling_loop)

    def _stop_monitoring(self, notify_user: bool = True):
        if not self.is_monitoring:
            if notify_user and self.chat_id:
                send_message({"peer": self.chat_id, "message": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω."})
            return
        
        self.is_monitoring = False

        if notify_user and self.chat_id:
            stop_message = self.get_setting("stop_message", DEFAULT_STOP_MESSAGE)
            send_message({"peer": self.chat_id, "message": stop_message})
        
        self.context, self.chat_id, self.last_known_level = None, None, -1

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not isinstance(params.message, str):
            return HookResult()

        message = params.message.strip().lower()

        if message == START_COMMAND:
            self.chat_id = params.peer
            self._start_monitoring(params.peer)
            return HookResult(strategy=HookStrategy.CANCEL)

        if message == STOP_COMMAND:
            self.chat_id = params.peer
            self._stop_monitoring()
            return HookResult(strategy=HookStrategy.CANCEL)

        return HookResult()

__id__ = "battery_notifier_v3"
__name__ = "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ë–∞—Ç–∞—Ä–µ–∏"
__description__ = "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –±–∞—Ç–∞—Ä–µ–µ: –∑–∞—Ä—è–¥, —Å–∫–æ—Ä–æ—Å—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∏ –¥—Ä. –ö–æ–º–∞–Ω–¥—ã: .prstart, .prstop"
__author__ = "@SHARKofficala"
__version__ = "1.2.0"
__icon__ = "kemomimiori/11"
__min_version__ = "11.12.0"
