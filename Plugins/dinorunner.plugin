from base_plugin import BasePlugin, MenuItemData, MenuItemType
from ui.alert import AlertDialogBuilder
from client_utils import get_last_fragment, get_messages_controller
from hook_utils import find_class
from java import dynamic_proxy
from android_utils import run_on_ui_thread
import random
import time
from ui.settings import Header, Input, Text, Divider, Selector, Switch
from ui.bulletin import BulletinHelper

TextView = find_class("android.widget.TextView")
LinearLayout = find_class("android.widget.LinearLayout")
AndroidUtilities = find_class("org.telegram.messenger.AndroidUtilities")
Theme = find_class("org.telegram.ui.ActionBar.Theme")
Gravity = find_class("android.view.Gravity")
OnClickListenerInterface = find_class("android.view.View$OnClickListener")
Typeface = find_class("android.graphics.Typeface")
DialogInterface = find_class("android.content.DialogInterface")

__id__ = "dinorunner"
__name__ = "Dino Runner"
__description__ = "–ò–≥—Ä–∞ google –¥–∏–Ω–æ–∑–∞–≤—Ä–∏–∫ —Å –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è–º–∏, —Ä–µ–∫–æ—Ä–¥–∞–º–∏ –∏ –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–µ–π."
__author__ = "@AyugramTop"
__version__ = "1.0"
__min_version__ = "11.12.0"
__icon__ = "Crocosaurus/11"

EMOJI_DEFAULTS = {
    'dino': 'ü¶ñ', 'dino_duck': 'ü¶ï', 'cactus': 'üåµ', 'bird': 'ü¶Ö',
    'cloud': '‚òÅÔ∏è', 'ground': 'üü®', 'empty': '‚ñ™Ô∏è', 'boom': 'üí•'
}
WIDTH_OPTIONS = [str(i) for i in range(8, 21)]
HEIGHT_OPTIONS = [str(i) for i in range(7, 16)]
FONT_SIZE_OPTIONS = [str(i) for i in range(15, 27, 1)]
DEFAULT_WIDTH_INDEX = 0
DEFAULT_HEIGHT_INDEX = 0
DEFAULT_FONT_SIZE_INDEX = 9
DEFAULT_SHOW_IN_CHAT_ACTION = True
DEFAULT_SHOW_IN_DRAWER = False
DEFAULT_SHOW_IN_CONTEXT = False
DEFAULT_SHOW_IN_PROFILE = False


class DinoGameState:
    JUMP_TRAJECTORY = [1, 2, 3, 3, 2, 1, 0]

    def __init__(self, plugin_instance):
        self.plugin = plugin_instance
        width_idx = self._get_setting_as_int("map_width_idx", DEFAULT_WIDTH_INDEX)
        height_idx = self._get_setting_as_int("map_height_idx", DEFAULT_HEIGHT_INDEX)
        self.FIELD_WIDTH = int(WIDTH_OPTIONS[width_idx])
        self.FIELD_HEIGHT = int(HEIGHT_OPTIONS[height_idx])
        self.GROUND_LEVEL = self.FIELD_HEIGHT - 1
        self.high_score = self._get_setting_as_int("high_score", 0)
        self.reset()

    def _get_setting_as_int(self, key, default_value):
        try:
            return int(self.plugin.get_setting(key, default_value))
        except (ValueError, TypeError):
            return default_value

    def get_emoji(self, emoji_type):
        return self.plugin.get_setting(f"{emoji_type}_emoji", EMOJI_DEFAULTS.get(emoji_type, '?'))

    def get_speed_level(self):
        speed_level = ((350 - self.game_speed_ms) // 15) + 1
        return speed_level

    def reset(self):
        self.dino_x = 1
        self.dino_y = 0
        self.is_jumping = False
        self.jump_phase = 0
        self.is_ducking = False
        self.obstacles = []
        self.obstacles_passed = 0
        self.cloud_offset = 0
        self._add_obstacle()
        self.score = 0
        self.game_over = False
        self.game_speed_ms = 350
        self.speed_increase_interval = 50
        self.jump_action = False
        self.duck_action = False

    def _add_obstacle(self):
        if random.random() < 0.25:
            obstacle_type = 'bird'
        else:
            obstacle_type = 'cactus'
        new_obstacle = {"type": obstacle_type, "x": self.FIELD_WIDTH}
        if obstacle_type == 'cactus':
            rand_val = random.random()
            if rand_val < 0.50:
                new_obstacle['height'] = 1
            elif rand_val < 0.85:
                new_obstacle['height'] = 2
            else:
                new_obstacle['height'] = 3
            new_obstacle['y_base'] = 0
        else:
            rand_val = random.random()
            if rand_val < 0.60:
                new_obstacle['height'] = 1
                new_obstacle['y_base'] = random.choice([1, 2, 3])
            elif rand_val < 0.90:
                new_obstacle['height'] = 2
                new_obstacle['y_base'] = 0
            else:
                new_obstacle['height'] = 3
                new_obstacle['y_base'] = 1
        if self.obstacles and self.obstacles[-1]['x'] > self.FIELD_WIDTH - 8:
            return
        self.obstacles.append(new_obstacle)

    def step(self):
        if self.game_over:
            return
        self.cloud_offset += 1
        if self.jump_action and not self.is_jumping and not self.is_ducking:
            self.is_jumping = True
            self.jump_phase = 0
        self.jump_action = False
        if self.is_jumping:
            self.dino_y = self.JUMP_TRAJECTORY[self.jump_phase]
            self.jump_phase += 1
            if self.jump_phase >= len(self.JUMP_TRAJECTORY):
                self.is_jumping = False
                self.dino_y = 0
        self.is_ducking = self.duck_action and not self.is_jumping
        for obs in self.obstacles:
            obs['x'] -= 1
        if self.obstacles and self.obstacles[0]['x'] < -2:
            self.obstacles.pop(0)
            self.obstacles_passed += 1
        self.score += 1
        if self.score > 0 and self.score % self.speed_increase_interval == 0:
            self.game_speed_ms = max(100, self.game_speed_ms - 15)
        if not self.obstacles or (self.obstacles[-1]['x'] < self.FIELD_WIDTH - random.randint(8, 10)):
            self._add_obstacle()
        self._check_collisions()

    def _check_collisions(self):
        for obs in self.obstacles:
            if obs['x'] <= self.dino_x < obs['x'] + 1:
                obs_h, y_base = obs.get('height', 1), obs.get('y_base', 0)
                if y_base == 0:
                    if self.dino_y < obs_h:
                        self.game_over = True
                else:
                    if obs_h == 1:
                        if self.dino_y == y_base:
                            self.game_over = True
                    elif obs_h == 3:
                        if not self.is_ducking:
                            self.game_over = True
            if self.game_over:
                if self.score > self.high_score:
                    self.high_score = self.score
                    self.plugin.set_setting("high_score", self.high_score)
                break

    def render(self):
        field = [[self.get_emoji('empty')] * self.FIELD_WIDTH for _ in range(self.FIELD_HEIGHT)]
        cloud_char = self.get_emoji('cloud')
        for x in range(self.FIELD_WIDTH):
            if (x + self.cloud_offset) % 8 < 2:
                field[1][x] = cloud_char
            if (x + self.cloud_offset // 2) % 9 < 2:
                field[0][x] = cloud_char
        if self.GROUND_LEVEL < self.FIELD_HEIGHT:
            for i in range(self.FIELD_WIDTH):
                field[self.GROUND_LEVEL][i] = self.get_emoji('ground')
        for obs in self.obstacles:
            x, char, height = obs['x'], self.get_emoji(obs['type']), obs.get('height', 1)
            y_base = obs.get('y_base', 0)
            for i in range(height):
                y_pos = self.GROUND_LEVEL - 1 - (y_base + i)
                if 0 <= x < self.FIELD_WIDTH and 0 <= y_pos < self.FIELD_HEIGHT:
                    field[y_pos][x] = char
        dino_y_pos = self.GROUND_LEVEL - 1 - self.dino_y
        if 0 <= dino_y_pos < self.FIELD_HEIGHT:
            char_to_draw = self.get_emoji('boom') if self.game_over else self.get_emoji(
                'dino_duck') if self.is_ducking else self.get_emoji('dino')
            field[dino_y_pos][self.dino_x] = char_to_draw

        game_field_str = "\n".join("".join(row) for row in field)
        return game_field_str

class GameInputListener(dynamic_proxy(OnClickListenerInterface)):
    def __init__(self, plugin, chat_id, action):
        super().__init__()
        self.plugin = plugin
        self.chat_id = chat_id
        self.action = action

    def onClick(self, view):
        self.plugin.on_input_action(self.chat_id, self.action)

class DinoRunnerPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.active_games, self.game_views, self.loop_running, self.active_dialogs = {}, {}, {}, {}
        self._menu_item_ids = []
        self.status_views = {}

    def on_plugin_load(self):
        self._update_menu_items()

    def _get_setting_as_int(self, key, default_value):
        try:
            return int(self.get_setting(key, default_value))
        except (ValueError, TypeError):
            return default_value

    def create_settings(self):
        settings_list = []
        settings_list.append(Header(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—Ä—Ç—ã"))
        settings_list.append(
            Selector(key="map_width_idx", text="–®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç—ã", icon="msg_arrow_forward", default=DEFAULT_WIDTH_INDEX, items=WIDTH_OPTIONS))
        settings_list.append(
            Selector(key="map_height_idx", text="–í—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç—ã", icon="msg_go_up", default=DEFAULT_HEIGHT_INDEX, items=HEIGHT_OPTIONS))
        settings_list.append(Selector(key="game_font_size_idx", text="–†–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ–ª—è", icon="msg_premium_icons", 
                                      default=DEFAULT_FONT_SIZE_INDEX, items=FONT_SIZE_OPTIONS))
        settings_list.append(Divider(text="–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ç—Ä–æ–≥–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∫–∞—Ä—Ç—ã."))
        settings_list.append(Header(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–º–∞–π–ª–∏–∫–æ–≤"))
        emoji_map = {'dino': '–î–∏–Ω–æ–∑–∞–≤—Ä (–æ–±—ã—á–Ω—ã–π)', 'dino_duck': '–î–∏–Ω–æ–∑–∞–≤—Ä–∏–∫ (–ø—Ä–∏—Å–µ—Å—Ç—å)', 'cactus': '–ö–∞–∫—Ç—É—Å',
                     'bird': '–ü—Ç–∏—Ü–∞', 'cloud': '–û–±–ª–∞–∫–æ', 'ground': '–ó–µ–º–ª—è', 'empty': '–ù–µ–±–æ', 'boom': '–í–∑—Ä—ã–≤'}
        for key, label in emoji_map.items():
            settings_list.append(Input(key=f"{key}_emoji", text=label, default=EMOJI_DEFAULTS.get(key, '')))
        settings_list.append(Divider(text="–ï—Å–ª–∏ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–≥—Ä–æ–≤—ã—Ö —Å–º–∞–π–ª–∏–∫–æ–≤, —Ç–æ –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –∏—Ö –Ω–∞ —Å–≤–æ–∏"))
        settings_list.append(Header(text="–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"))
        switches = [("show_in_chat_action", "–¢—Ä–∏ —Ç–æ—á–∫–∏ –≤ —á–∞—Ç–∞—Ö", "ic_ab_other", "3 —Ç–æ—á–∫–∏ –≤ —á–∞—Ç–∞—Ö, –∫–∞–Ω–∞–ª–∞—Ö, –±–æ—Ç–∞—Ö, –ª–∏—á–∫–µ", DEFAULT_SHOW_IN_CHAT_ACTION),
                    ("show_in_drawer", "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é", "menu_contact_existing", "–í –º–µ–Ω—é —á–∞—Ç–æ–≤ —Å–≤–∞–π–ø–Ω—É—Ç—å –≤–ø—Ä–∞–≤–æ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ 3 –ø–æ–ª–æ—Å–∫–∏", DEFAULT_SHOW_IN_DRAWER),
                    ("show_in_context", "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é", "menu_select_quote_solar", "–¢—ã–∫–Ω—É—Ç—å –ø–æ –ª—é–±–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é", DEFAULT_SHOW_IN_CONTEXT),
                    ("show_in_profile", "–¢—Ä–∏ —Ç–æ—á–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ", "msg_contacts", "–ó–∞–π—Ç–∏ –≤ –ª—é–±–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –Ω–∞–∂–∞—Ç—å –Ω–∞ 3 —Ç–æ—á–∫–∏", DEFAULT_SHOW_IN_PROFILE)]
        for key, text, icon, subtext, default in switches:
            settings_list.append(
                Switch(key=key, text=text, icon=icon, subtext=subtext, default=default, on_change=lambda v: self._update_menu_items()))
        settings_list.append(Divider(text="–í—ã–±–µ—Ä–∏—Ç–µ, –≥–¥–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—É–Ω–∫—Ç—ã –º–µ–Ω—é –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"))
        settings_list.append(Header(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"))
        settings_list.append(Text(text="–û –≤–µ—Ä—Å–∏–∏ 1.0", icon="msg_info", on_click=self._show_version_dialog))
        settings_list.append(Text(text="FAQ", icon="msg_help_14", on_click=self._show_faq_dialog))
        settings_list.append(Text(text="artem plugins", icon="msg_channel", accent=True, on_click=lambda view: run_on_ui_thread(
            lambda: get_messages_controller().openByUserName("ArtemPlugins", get_last_fragment(), 1))))
        settings_list.append(Text(text="–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ—Ä–¥", icon="msg_delete", red=True, on_click=self._reset_highscore))
        return settings_list

    def _update_menu_items(self):
        for menu_id in self._menu_item_ids:
            try:
                self.remove_menu_item(menu_id)
            except:
                pass
        self._menu_item_ids = []
        menu_locations = {"show_in_chat_action": MenuItemType.CHAT_ACTION_MENU,
                          "show_in_drawer": MenuItemType.DRAWER_MENU,
                          "show_in_context": MenuItemType.MESSAGE_CONTEXT_MENU,
                          "show_in_profile": MenuItemType.PROFILE_ACTION_MENU}
        defaults = {"show_in_chat_action": DEFAULT_SHOW_IN_CHAT_ACTION,
                    "show_in_drawer": DEFAULT_SHOW_IN_DRAWER, "show_in_context": DEFAULT_SHOW_IN_CONTEXT,
                    "show_in_profile": DEFAULT_SHOW_IN_PROFILE}
        for key, menu_type in menu_locations.items():
            if self.get_setting(key, defaults[key]):
                menu_id = self.add_menu_item(MenuItemData(menu_type=menu_type, text="Dino Runner",
                                                          icon="msg_groups_hw_remix", on_click=self.show_game_dialog))
                self._menu_item_ids.append(menu_id)

    def _reset_highscore(self, view):
        fragment = get_last_fragment()
        activity = fragment and fragment.getParentActivity()
        if not activity:
            return

        builder = AlertDialogBuilder(activity)
        builder.set_title("–°–±—Ä–æ—Å–∏—Ç—å —Ä–µ–∫–æ—Ä–¥")
        builder.set_message("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–∞—à —Ä–µ–∫–æ—Ä–¥? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.")

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ
        builder.set_negative_button("–û—Ç–º–µ–Ω–∞", None)

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞
        builder.set_positive_button("–°–±—Ä–æ—Å–∏—Ç—å", lambda d, w: self._perform_actual_reset())

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–∫—Ä–∞—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
        dialog = builder.show()
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–π –∫—Ä–∞—Å–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ —Ç–µ–º—ã
            positive_button = dialog.getButton(DialogInterface.BUTTON_POSITIVE)
            if positive_button:
                positive_button.setTextColor(Theme.getColor(Theme.key_dialogButtonRed))
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞: {e}")

    def _perform_actual_reset(self):
        self.set_setting("high_score", 0)
        BulletinHelper.show_info("–†–µ–∫–æ—Ä–¥ —Å–±—Ä–æ—à–µ–Ω. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ—Ä–¥–∞.")

    def _show_version_dialog(self, view):
        fragment = get_last_fragment()
        activity = fragment and fragment.getParentActivity()
        if not activity:
            return
        builder = AlertDialogBuilder(activity)
        builder.set_title("–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        builder.set_message("–í–µ—Ä—Å–∏—è 1.0\n- –†–µ–ª–∏–∑ –ø–ª–∞–≥–∏–Ω–∞")
        builder.set_positive_button("–ó–∞–∫—Ä—ã—Ç—å", None)
        builder.show()

    def _show_faq_dialog(self, view):
        fragment = get_last_fragment()
        activity = fragment and fragment.getParentActivity()
        if not activity:
            return
        builder = AlertDialogBuilder(activity)
        builder.set_title("FAQ")
        builder.set_message(
            "–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?\n\n- –ù–∞–∂–∏–º–∞–π—Ç–µ ‚¨ÜÔ∏è, —á—Ç–æ–±—ã –ø—Ä—ã–≥–∞—Ç—å.\n- –ù–∞–∂–∏–º–∞–π—Ç–µ ‚¨áÔ∏è, —á—Ç–æ–±—ã –ø—Ä–∏—Å–µ—Å—Ç—å.\n- –£–≤–æ—Ä–∞—á–∏–≤–∞–π—Ç–µ—Å—å –æ—Ç –∫–∞–∫—Ç—É—Å–æ–≤ –∏ –ø—Ç–∏—Ü, —á—Ç–æ–±—ã –Ω–∞–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!")
        builder.set_positive_button("–ó–∞–∫—Ä—ã—Ç—å", None)
        builder.show()

    def show_game_dialog(self, context: dict, restart_game=False):
        chat_id = context.get("dialog_id")
        if restart_game:
            self.cleanup_game(chat_id)
        self.stop_game_loop(chat_id)
        fragment = get_last_fragment()
        activity = fragment and fragment.getParentActivity()
        if not activity:
            return
        try:
            if chat_id not in self.active_games:
                self.active_games[chat_id] = DinoGameState(self)
            game = self.active_games[chat_id]
            game.reset()
        except Exception as e:
            BulletinHelper.show_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã: {e}")
            return

        builder = AlertDialogBuilder(activity)
        builder.set_title("Dino Runner")
        main_container = LinearLayout(activity)
        main_container.setOrientation(LinearLayout.VERTICAL)
        padding = AndroidUtilities.dp(20)
        main_container.setPadding(padding, AndroidUtilities.dp(8), padding, padding)
        status_container = LinearLayout(activity)
        status_container.setOrientation(LinearLayout.HORIZONTAL)
        status_container.setGravity(Gravity.CENTER_HORIZONTAL)
        status_container.setPadding(0, 0, 0, AndroidUtilities.dp(12))

        def create_status_block(icon, label_text):
            container = LinearLayout(activity)
            container.setOrientation(LinearLayout.VERTICAL)
            container.setGravity(Gravity.CENTER)
            params = LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0)
            margin = AndroidUtilities.dp(4)
            params.setMargins(margin, 0, margin, 0)
            container.setLayoutParams(params)
            bg = LinearLayout(activity)
            bg.setOrientation(LinearLayout.VERTICAL)
            bg.setGravity(Gravity.CENTER)
            bg.setBackgroundColor(Theme.getColor(Theme.key_chat_attachPhotoBackground))
            bg.setPadding(AndroidUtilities.dp(-2), AndroidUtilities.dp(4), AndroidUtilities.dp(-2), AndroidUtilities.dp(4))
            emoji = TextView(activity)
            emoji.setText(icon)
            emoji.setTextSize(14)
            emoji.setGravity(Gravity.CENTER)
            emoji.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
            bg.addView(emoji)
            label = TextView(activity)
            label.setText(label_text)
            label.setTextSize(8)
            label.setTextColor(Theme.getColor(Theme.key_dialogTextGray))
            label.setGravity(Gravity.CENTER)
            bg.addView(label)
            value_view = TextView(activity)
            value_view.setTextSize(14)
            value_view.setTypeface(None, Typeface.BOLD)
            value_view.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
            value_view.setGravity(Gravity.CENTER)
            bg.addView(value_view)
            container.addView(bg)
            return container, value_view

        status_block_definitions = [
            ('score', "üèÜ", "–°–ß–Å–¢"),
            ('obstacles', "üåµ", "–ü–†–ï–ü–Ø–¢–°–¢–í–ò–Ø"),
            ('speed', "‚ö°Ô∏è", "–°–ö–û–†–û–°–¢–¨"),
            ('highscore', "üëë", "–†–ï–ö–û–†–î")
        ]
        
        self.status_views[chat_id] = {}
        for key, icon, label in status_block_definitions:
            container, value_view = create_status_block(icon, label)
            self.status_views[chat_id][key] = value_view
            status_container.addView(container)

        main_container.addView(status_container)

        game_board_view = TextView(activity)
        font_size_idx = self._get_setting_as_int("game_font_size_idx", DEFAULT_FONT_SIZE_INDEX)
        font_size = int(FONT_SIZE_OPTIONS[font_size_idx])
        game_board_view.setTextSize(font_size)
        game_board_view.setGravity(Gravity.CENTER)
        game_board_view.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
        try:
            game_board_view.setTypeface(Typeface.MONOSPACE)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç: {e}")
        self.game_views[chat_id] = game_board_view
        main_container.addView(game_board_view)
        main_container.addView(self.create_controls(activity, chat_id))
        builder.set_view(main_container)
        builder.set_positive_button("–ó–∞–Ω–æ–≤–æ", lambda b, w: (
            b.dismiss(), self.show_game_dialog({"dialog_id": chat_id}, restart_game=True)))
        builder.set_negative_button("–ó–∞–∫—Ä—ã—Ç—å", lambda b, w: self.cleanup_game(chat_id))
        self.active_dialogs[chat_id] = builder.show()
        self._update_status_views(chat_id)
        self.start_game_loop(chat_id)

    def _update_status_views(self, chat_id):
        game = self.active_games.get(chat_id)
        views = self.status_views.get(chat_id)
        if not game or not views:
            return

        game_stats = {
            'score': game.score,
            'obstacles': game.obstacles_passed,
            'speed': game.get_speed_level(),
            'highscore': game.high_score
        }

        for key, value in game_stats.items():
            if key in views:
                views[key].setText(str(value))

    def create_controls(self, activity, chat_id):
        controls = LinearLayout(activity)
        controls.setOrientation(LinearLayout.HORIZONTAL)
        controls.setGravity(Gravity.CENTER)
        controls.setPadding(0, AndroidUtilities.dp(16), 0, 0)

        def create_button(text, action):
            btn = TextView(activity)
            btn.setText(text)
            btn.setTextSize(35)
            btn.setGravity(Gravity.CENTER)
            btn.setBackgroundColor(Theme.getColor(Theme.key_chat_attachPhotoBackground))
            params = LinearLayout.LayoutParams(AndroidUtilities.dp(100), AndroidUtilities.dp(60))
            params.setMargins(AndroidUtilities.dp(8), 0, AndroidUtilities.dp(8), 0)
            btn.setLayoutParams(params)
            btn.setOnClickListener(GameInputListener(self, chat_id, action))
            return btn

        controls.addView(create_button("‚¨ÜÔ∏è", "jump"))
        controls.addView(create_button("‚¨áÔ∏è", "duck"))
        return controls

    def on_input_action(self, chat_id: int, action: str):
        game = self.active_games.get(chat_id)
        if game and not game.game_over:
            if action == "jump":
                game.jump_action = True
            elif action == "duck":
                game.duck_action = True

        run_on_ui_thread(lambda: setattr(game, 'duck_action', False), delay=600)

    def start_game_loop(self, chat_id: int):
        self.stop_game_loop(chat_id)
        self.loop_running[chat_id] = True

        def game_loop():
            if not self.loop_running.get(chat_id):
                return
            game = self.active_games.get(chat_id)
            if not game:
                return
            if game.game_over:
                self.redraw_game(chat_id)
                self.stop_game_loop(chat_id)
                self._show_game_over_dialog(chat_id)
                return
            game.step()
            self.redraw_game(chat_id)
            self._update_status_views(chat_id)
            run_on_ui_thread(game_loop, delay=game.game_speed_ms)

        game_loop()

    def _show_game_over_dialog(self, chat_id):
        fragment = get_last_fragment()
        activity = fragment and fragment.getParentActivity()
        if not activity:
            return
        game = self.active_games.get(chat_id)
        if not game:
            return
        builder = AlertDialogBuilder(activity)
        builder.set_title("–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!")
        builder.set_message(f"–í–∞—à —Å—á—ë—Ç: {game.score}\n–†–µ–∫–æ—Ä–¥: {game.high_score}")
        builder.set_positive_button("–ó–∞–Ω–æ–≤–æ", lambda d, w: (
            d.dismiss(), self.show_game_dialog({"dialog_id": chat_id}, restart_game=True)))
        builder.set_negative_button("–ó–∞–∫—Ä—ã—Ç—å", lambda d, w: (d.dismiss(), self.cleanup_game(chat_id)))
        builder.set_cancelable(False)
        builder.show()

    def redraw_game(self, chat_id: int):
        game = self.active_games.get(chat_id)
        game_board_view = self.game_views.get(chat_id)
        if game and game_board_view:
            game_board_view.setText(game.render())

    def stop_game_loop(self, chat_id: int):
        if chat_id in self.loop_running:
            self.loop_running[chat_id] = False

    def cleanup_game(self, chat_id: int):
        self.stop_game_loop(chat_id)
        if chat_id in self.active_dialogs:
            try:
                self.active_dialogs.pop(chat_id).dismiss()
            except:
                pass
        if chat_id in self.active_games:
            del self.active_games[chat_id]
        if chat_id in self.game_views:
            del self.game_views[chat_id]
        if chat_id in self.status_views:
            del self.status_views[chat_id]