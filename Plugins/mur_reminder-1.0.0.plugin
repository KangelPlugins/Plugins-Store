import time
import os
import traceback
from base_plugin import BasePlugin, MethodHook
from ui.settings import Header, Switch, Input, Divider, Text
from client_utils import run_on_queue, get_last_fragment
from android_utils import log, run_on_ui_thread
from ui.bulletin import BulletinHelper

from android.app import NotificationManager, NotificationChannel, Notification, Activity
from android.content import Context, Intent
from android.os import Build
from android.net import Uri
from android.graphics import BitmapFactory
from java.io import File, FileOutputStream, ByteArrayOutputStream
from java import jclass

from org.telegram.messenger import ApplicationLoader, R

__id__ = "mur_reminder"
__name__ = "Напоминалка (Reminder)"
__description__ = "Напоминает тебе о чем-либо с помощью системных уведомлений в exteraGram/AyuGram."
__author__ = "@muralovty (@mur_live)"
__version__ = "1.0.0"
__icon__ = "Chaos_MuralovTY/24"
__min_version__ = "11.12.0"

class ReminderPlugin(BasePlugin):
    FILE_PICKER_REQUEST_CODE = 1488

    class ActivityResultHook(MethodHook):
        def __init__(self, plugin_instance):
            self.plugin = plugin_instance

        def before_hooked_method(self, param):
            request_code, result_code, data = param.args
            if request_code == self.plugin.FILE_PICKER_REQUEST_CODE:
                param.setResult(None) 
                if result_code == Activity.RESULT_OK and data and data.getData():
                    run_on_queue(lambda: self.plugin._handle_file_uri(data.getData()))
                else:
                    log("[Reminder] File selection was canceled or failed.")
                
                if self.plugin.activity_hook:
                    self.plugin.unhook_method(self.plugin.activity_hook)
                    self.plugin.activity_hook = None
                    log("[Reminder] Temporary onActivityResult hook removed.")

    def __init__(self):
        super().__init__()
        self.is_started = False
        self.pg_current_task_id = None
        self.activity_hook = None
        self._plugin_dir_path = ""

    def on_plugin_load(self):
        try:
            base_dir = ApplicationLoader.getFilesDirFixed()
            if base_dir:
                plugin_folder = File(base_dir, self.id)
                if not plugin_folder.exists():
                    plugin_folder.mkdirs()
                self._plugin_dir_path = plugin_folder.getAbsolutePath()
        except Exception as e:
            log(f"[Reminder] Critical error creating plugin folder: {e}")

        if self.get_setting("enabled", True):
            self.start_reminder_cycle()
        log("[Reminder] Plugin loaded.")

    def on_plugin_unload(self):
        self.stop_reminder_cycle()
        if self.activity_hook:
            self.unhook_method(self.activity_hook)
        log("[Reminder] Plugin unloaded.")

    def create_settings(self):
        image_path = self.get_setting("image_path", "")
        image_info = os.path.basename(image_path) if image_path and os.path.exists(image_path) else "Изображение не выбрано"

        return [
            Header(text="Основные настройки"),
            Switch(
                key="enabled",
                text="Включить напоминания",
                default=True,
                on_change=self._handle_enabled_change,
                icon="input_notify_on"
            ),
            Divider(),
            Header(text="Содержимое уведомления"),
            Input(
                key="notification_title",
                text="Заголовок",
                default="Время фембойчика! :3",
                icon="msg_info"
            ),
            Input(
                key="reminder_text",
                text="Описание",
                default="Не забудь скинуть ножки в чат :3",
                icon="menu_tag_rename"
            ),
            Input(
                key="interval_minutes",
                text="Интервал (в минутах)",
                default="5",
                subtext="Частота отправки.",
                icon="menu_feature_hourglass"
            ),
            Divider(),
            Header(text="Изображение"),
            Switch(
                key="show_image",
                text="Показывать изображение",
                default=True,
                icon="menu_feature_wallpaper",
            ),
            Text(
                text="Выбрать фотографию",
                icon="msg_gallery",
                on_click=self._launch_file_picker
            ),
            Text(
                text="Удалить фотографию",
                icon="msg_delete",
                red=True,
                on_click=self._delete_image
            ),
            Divider(text=f"Текущий файл: {image_info}")
        ]

    def _launch_file_picker(self, view=None):
        try:
            fragment = get_last_fragment()
            if not fragment:
                BulletinHelper.show_error("Не удалось получить текущий экран.")
                return
            activity = fragment.getParentActivity()
            if not activity:
                BulletinHelper.show_error("Не удалось получить родительский экран.")
                return

            if self.activity_hook:
                self.unhook_method(self.activity_hook)

            Class = jclass("java.lang.Class")
            IntegerClass = jclass("java.lang.Integer")
            IntentClass = jclass("android.content.Intent")
            
            ActivityClass = Class.forName(activity.getClass().getName())
            method = ActivityClass.getDeclaredMethod("onActivityResult", IntegerClass.TYPE, IntegerClass.TYPE, IntentClass)
            
            if method:
                method.setAccessible(True)
                self.activity_hook = self.hook_method(method, self.ActivityResultHook(self))
                log("[Reminder] Temporary hook on onActivityResult set.")
            else:
                BulletinHelper.show_error("Внутренняя ошибка: метод не найден.")
                return

            intent = Intent(Intent.ACTION_GET_CONTENT)
            intent.setType("image/*")
            activity.startActivityForResult(Intent.createChooser(intent, "Выберите изображение"), self.FILE_PICKER_REQUEST_CODE)
        except Exception as e:
            log(f"[Reminder] Failed to launch file picker: {e}\n{traceback.format_exc()}")
            BulletinHelper.show_error(f"Ошибка открытия галереи: {e}")

    def _handle_file_uri(self, uri: Uri):
        input_stream, byte_stream, output_stream = None, None, None
        try:
            content_resolver = ApplicationLoader.applicationContext.getContentResolver()
            input_stream = content_resolver.openInputStream(uri)
            if not input_stream:
                run_on_ui_thread(lambda: BulletinHelper.show_error("Не удалось открыть файл."))
                return

            byte_stream = ByteArrayOutputStream()
            buffer = bytearray(4096)
            bytes_read = input_stream.read(buffer)
            while bytes_read != -1:
                byte_stream.write(buffer, 0, bytes_read)
                bytes_read = input_stream.read(buffer)
            
            image_bytes = byte_stream.toByteArray()
            if not image_bytes:
                run_on_ui_thread(lambda: BulletinHelper.show_error("Файл пустой или поврежден."))
                return
            
            file_path = os.path.join(self._plugin_dir_path, f"reminder_image_{int(time.time())}.png")
            
            self._delete_image(show_bulletin=False)

            output_stream = FileOutputStream(file_path)
            output_stream.write(image_bytes)

            run_on_ui_thread(lambda: self._update_settings_on_success(file_path))
        except Exception as e:
            log(f"[Reminder] Error processing file URI: {e}\n{traceback.format_exc()}")
            run_on_ui_thread(lambda: BulletinHelper.show_error("Ошибка обработки файла."))
        finally:
            for stream in [input_stream, byte_stream, output_stream]:
                if stream:
                    try:
                        stream.close()
                    except Exception as e:
                        log(f"[Reminder] Stream closing error: {e}")
    
    def _update_settings_on_success(self, file_path: str):
        self.set_setting("image_path", file_path, reload_settings=True)
        BulletinHelper.show_success("Изображение успешно установлено")

    def _delete_image(self, view=None, show_bulletin=True):
        file_path = self.get_setting("image_path", None)
        if file_path and os.path.exists(file_path):
            try:
                os.remove(file_path)
            except OSError as e:
                log(f"[Reminder] Failed to delete file {file_path}: {e}")
        
        self.set_setting("image_path", "", reload_settings=True)
        if show_bulletin:
            BulletinHelper.show_success("Изображение удалено")

    def _handle_enabled_change(self, new_value: bool):
        if new_value:
            self.start_reminder_cycle()
        else:
            self.stop_reminder_cycle()

    def start_reminder_cycle(self):
        if self.is_started:
            return
        self.is_started = True
        log("[Reminder] Reminder cycle starting.")
        self.pg_current_task_id = time.time()
        run_on_queue(lambda: self._run_reminder_task(self.pg_current_task_id))

    def stop_reminder_cycle(self):
        if not self.is_started:
            return
        self.is_started = False
        self.pg_current_task_id = None
        log("[Reminder] Reminder cycle stopped.")

    def _run_reminder_task(self, task_id):
        if task_id != self.pg_current_task_id or not self.is_started:
            log("[Reminder] Task aborted.")
            self.is_started = False
            return

        try:
            self._show_system_notification()
            interval_str = self.get_setting("interval_minutes", "5")
            interval_minutes = 5
            try:
                parsed_interval = int(interval_str)
                if parsed_interval >= 1:
                    interval_minutes = parsed_interval
            except (ValueError, TypeError):
                pass
            
            delay_ms = interval_minutes * 60 * 1000
            run_on_queue(lambda: self._run_reminder_task(task_id), delay=delay_ms)
            log(f"[Reminder] Next reminder scheduled in {interval_minutes} minutes.")

        except Exception as e:
            log(f"[Reminder] Error in reminder task: {e}")
            run_on_queue(lambda: self._run_reminder_task(task_id), delay=5 * 60 * 1000)

    def _show_system_notification(self):
        def build_and_show():
            try:
                context = ApplicationLoader.applicationContext
                notification_manager = context.getSystemService(Context.NOTIFICATION_SERVICE)
                channel_id = "reminder_plugin_channel_pg"
                
                if Build.VERSION.SDK_INT >= Build.VERSION_CODES.O:
                    channel_name = "Напоминания от плагина"
                    channel = NotificationChannel(channel_id, channel_name, NotificationManager.IMPORTANCE_DEFAULT)
                    notification_manager.createNotificationChannel(channel)
                
                builder = Notification.Builder(context, channel_id) if Build.VERSION.SDK_INT >= Build.VERSION_CODES.O else Notification.Builder(context)
                
                notification_title = self.get_setting("notification_title", "Время фембойчика! :3")
                reminder_text = self.get_setting("reminder_text", "Не забудь скинуть ножки в чат :3")

                builder.setContentTitle(notification_title)
                builder.setContentText(reminder_text)
                builder.setSmallIcon(R.drawable.notification)
                builder.setAutoCancel(True)

                if self.get_setting("show_image", True):
                    image_path = self.get_setting("image_path", None)
                    if image_path and os.path.exists(image_path):
                        bitmap = BitmapFactory.decodeFile(image_path)
                        if bitmap:
                            builder.setLargeIcon(bitmap)
                            builder.setStyle(Notification.BigPictureStyle().bigPicture(bitmap))

                notification_manager.notify(1489, builder.build())
                log("[Reminder] System notification shown.")

            except Exception as e:
                log(f"[Reminder] Failed to show system notification: {e}\n{traceback.format_exc()}")

        run_on_ui_thread(build_and_show)