from base_plugin import BasePlugin
from ui.settings import Input
from hook_utils import find_class
from java.lang import Integer
from java.util import Locale

__id__ = "chatInputLines"
__name__ = "Input Line"
__description__ = "Adjusts max lines of the chat input field"
__icon__ = "chaotianjiang/36"
__version__ = "1.0.0"
__author__ = "@ArThirtyFour | @KangelPlugins"
__min_version__ = "11.9.0"


DEFAULT_MAX_LINES = 10
MIN_LINES = 1
MAX_LINES = 50


class Locales:
    default = {
        "label": "Max lines",
        "hint": "Enter number of lines for input field ({min}..{max})",
    }
    en = default
    ru = {
        "label": "Макс. строк",
        "hint": "Введите количество строк ({min}..{max})",
    }


def t(key: str) -> str:
    try:
        lang = Locale.getDefault().getLanguage()
    except Exception:
        lang = "en"
    table = getattr(Locales, lang, Locales.default)
    return table.get(key, Locales.default.get(key, key))


class SetMaxLinesHook:
    def __init__(self, plugin: "Plugin"):
        self.plugin = plugin

    def before_hooked_method(self, param):
        max_lines = self.plugin._current_max_lines
        param.args[0] = Integer(max_lines)


class Plugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self._current_max_lines = DEFAULT_MAX_LINES

    def on_plugin_load(self):
        self._current_max_lines = self._clamp_lines(self.get_setting("max_lines", DEFAULT_MAX_LINES))
        et_cls = find_class("org.telegram.ui.Components.EditTextCaption")
        method = et_cls.getClass().getMethod("setMaxLines", Integer.TYPE)
        self.hook_method(method, SetMaxLinesHook(self))

    def create_settings(self):
        return [
            Input(
                key="max_lines",
                text=t("label"),
                subtext=t("hint").format(min=MIN_LINES, max=MAX_LINES),
                icon="media_more",
                default=str(self._current_max_lines),
                on_change=lambda v: self._on_setting_change(v),
            ),
        ]

    def _on_setting_change(self, v):
        self._current_max_lines = self._clamp_lines(v)

    def _clamp_lines(self, value):
        try:
            n = int(str(value).strip())
        except Exception:
            n = DEFAULT_MAX_LINES
        if n < MIN_LINES:
            n = MIN_LINES
        if n > MAX_LINES:
            n = MAX_LINES
        return n

