__id__ = "neofetch"
__name__ = "neofetch"
__author__ = "@bandaliyev"
__version__ = "1.0.0"
__description__ = """neofetch"""

__icon__ = "pus_heen/10"
__min_version__ = "11.9.1"

import traceback
from typing import Any

from base_plugin import BasePlugin, HookResult, HookStrategy
from ui.settings import Header, Switch, Divider
from android_utils import log

from android.os import Build, SystemClock
from android.app import ActivityManager
from android.content import Context

from org.telegram.messenger import ApplicationLoader, UserConfig, LocaleController
from org.telegram.tgnet import TLRPC
from java.util import ArrayList
from com.exteragram.messenger.plugins import PluginsController

class NeofetchPlugin(BasePlugin):
    def on_plugin_load(self):
        self.add_on_send_message_hook()

    def create_settings(self):
        lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
        is_ru = lang.startswith("ru")

        use_quote_text = "Использовать цитату" if is_ru else "Use blockquote"
        use_quote_subtext = "Форматировать вывод как цитату" if is_ru else "Format output as a blockquote"
        collapse_quote_text = "Сворачивать цитату" if is_ru else "Collapse blockquote"
        collapse_quote_subtext = "Цитата будет по умолчанию свёрнута" if is_ru else "The quote will be collapsed by default"
        header_text = "Neofetch настройки" if is_ru else "Neofetch Settings"

        return [
            Header(text=header_text),
            Switch(
                key="use_blockquote",
                text=use_quote_text,
                subtext=use_quote_subtext,
                default=True,
                icon="msg_quote"
            ),
            Switch(
                key="collapse_quote",
                text=collapse_quote_text,
                subtext=collapse_quote_subtext,
                default=True,
                icon="msg_archive"
            ),
            Divider()
        ]

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not isinstance(params.message, str) or not params.message.lower().startswith(".neo"):
            return HookResult()

        try:
            pi_info_text = self._get_neofetch_text()
            params.message = pi_info_text

            if self.get_setting("use_blockquote", True):
                if not hasattr(params, "entities") or params.entities is None:
                    params.entities = ArrayList()
                else:
                    params.entities.clear()

                entity = TLRPC.TL_messageEntityBlockquote()
                entity.collapsed = self.get_setting("collapse_quote", True)
                entity.offset = 0
                entity.length = len(pi_info_text.encode('utf-16-le')) // 2
                params.entities.add(entity)

        except Exception as e:
            log(f"Neofetch Error: {e}\n{traceback.format_exc()}")
            error_msg = f"Neofetch Error:\n\n`{traceback.format_exc()}`"
            params.message = error_msg
            if hasattr(params, "entities") and params.entities is not None:
                params.entities.clear()
        
        return HookResult(strategy=HookStrategy.MODIFY, params=params)

    def _get_neofetch_text(self) -> str:
        uptime_ms = SystemClock.elapsedRealtime()
        uptime_seconds = int(uptime_ms / 1000)
        days = uptime_seconds // 86400
        hours = (uptime_seconds % 86400) // 3600
        minutes = (uptime_seconds % 3600) // 60
        seconds = uptime_seconds % 60
        uptime_str = f"{days}d {hours}h {minutes}m {seconds}s"

        plugins_controller = PluginsController.getInstance()
        all_plugins_collection = plugins_controller.plugins.values()
        all_plugins_list = list(ArrayList(all_plugins_collection).toArray())
        
        active_plugins_count = sum(1 for p in all_plugins_list if p.isEnabled())
        total_plugins_count = len(all_plugins_list)
        plugins_str = f"{active_plugins_count}/{total_plugins_count}"

        context = ApplicationLoader.applicationContext
        activity_manager = context.getSystemService(Context.ACTIVITY_SERVICE)
        mem_info = ActivityManager.MemoryInfo()
        activity_manager.getMemoryInfo(mem_info)
        total_mem = mem_info.totalMem / (1024 * 1024)
        avail_mem = mem_info.availMem / (1024 * 1024)
        used_mem = total_mem - avail_mem
        mem_str = f"{int(used_mem)}MB / {int(total_mem)}MB"

        user_id = UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId()
        package_name = context.getPackageName()
        
        pi_info_list = [
            f"User: {user_id}",
            f"Device: {Build.MANUFACTURER} {Build.MODEL}",
            f"OS: Android {Build.VERSION.RELEASE} (API {Build.VERSION.SDK_INT})",
            f"CPU: {Build.SOC_MANUFACTURER.upper()} {Build.SOC_MODEL}",
            f"Uptime: {uptime_str}",
            f"Memory: {mem_str}",
            f"App: {package_name}",
            f"Plugins: {plugins_str}"
        ]

        return "\n".join(pi_info_list)
