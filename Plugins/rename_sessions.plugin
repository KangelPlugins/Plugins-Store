"""
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⡿⠟⠋⠉⠉⠉⠉⠛⠿⣿⣿⣿⣿⡿⠛⠉⠉⠄⠈⠉⠙⠿⣿⣿⣿⣿
⣿⣿⡿⠋⠄⣠⣶⣿⣿⣿⣷⣦⣄⠈⠛⢟⢁⣠⣤⣴⣶⣤⣄⠄⠄⠄⠈⢿⣿⣿
⣿⡿⠁⢠⣾⣿⣿⣿⣿⣿⣿⣿⡿⣿⣦⣀⠈⠛⠛⠋⣸⣿⣿⣷⡄⠄⠄⠄⢻⣿
⣿⠁⢀⣿⣿⣿⣿⣿⣿⣿⠋⠄⠄⣿⣿⣿⣿⣶⣶⣾⣿⣿⣿⣿⣧⠄⠄⠄⠄⣿
⣿⠄⢸⣿⣿⣿⣿⣿⠟⠁⠄⠄⠄⠄⠙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⣿
⣿⠄⠘⣿⣿⣿⣿⡏⠄⠄⠄⠄⠄⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⣿
⣿⠄⠄⢻⣿⣿⣿⠁⠄⠄⠄⠄⠄⠄⠄⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⢀⣿
⣿⡆⠄⠈⠿⠿⠋⠄⠄⠄⠄⠄⠄⢰⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠄⠄⠄⣸⣿
⣿⣿⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠄⠄⣰⣿⣿
⣿⣿⣷⡄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠄⠄⣰⣿⣿⣿
⣿⣿⣿⣿⣄⠄⠄⠄⠄⠄⠄⠄⠄⣰⣿⣿⣿⣿⣿⣿⣿⣿⠏⠄⢀⣴⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣷⣄⠄⠄⠄⠄⠄⣰⣿⣿⣿⣿⣿⣿⣿⡿⠃⠄⣠⣾⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣷⣄⠄⠄⠄⢿⣿⣿⣿⣿⣿⡿⠋⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣀⠄⠙⢿⣿⠟⠋⣠⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⣨⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿

by @mihailkotovski
Перед копированием/изменением кода уведомите @mihailkotovski
"""

import json
from typing import Optional

from base_plugin import BasePlugin, XposedHook
from hook_utils import find_class, get_private_field
from android_utils import OnLongClickListener, run_on_ui_thread
from client_utils import get_last_fragment, get_user_config
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder

from org.telegram.tgnet import TLRPC
from org.telegram.ui.Components import EditTextBoldCursor
from org.telegram.ui.ActionBar import Theme
from android.text import InputType
from android.graphics import Color
from android.graphics.drawable import ColorDrawable
from android.content.res import ColorStateList
from org.telegram.messenger import AndroidUtilities, R


__id__ = "rename_sessions"
__name__ = "Rename Sessions"
__description__ = "Local names for active devices (long press on session)"
__author__ = "@mihailkotovski & @mishabotov"
__version__ = "1.0.0 [hot-fix]"
__icon__ = "KeyKeyandKey_by_stickerparsebot/56"
__min_version__ = "11.12.1"


class _SetSessionHook(XposedHook):
    def __init__(self, plugin: "RenameSessionsPlugin"):
        super().__init__()
        self.plugin = plugin

    def after_hooked_method(self, param):
        try:
            cell = getattr(param, "thisObject", None)
            obj = None
            try:
                if hasattr(param, "args") and param.args and len(param.args) > 0:
                    obj = param.args[0]
            except Exception:
                obj = None

            if obj is None:
                return

            auth_hash = None
            try:
                auth_hash = getattr(obj, "hash", None)
            except Exception:
                auth_hash = None

            if auth_hash is not None:
                key = self.plugin._make_session_key(auth_hash)
                try:
                    self.plugin._auth_map[key] = obj
                except Exception:
                    pass
                custom = self.plugin._get_custom_name(key)
                if custom:
                    name_tv = get_private_field(cell, "nameTextView")
                    if name_tv:
                        run_on_ui_thread(lambda: name_tv.setText(custom))

            if cell is not None and auth_hash is not None:
                def on_long_click(*_args, **_kwargs):
                    try:
                        if getattr(self.plugin, "_dialog_open", False):
                            return True
                        self.plugin._show_rename_dialog(cell, auth_hash)
                        try:
                            self.plugin._cancel_pending_clicks(cell)
                        except Exception:
                            pass
                    except Exception:
                        pass
                    return True

                try:
                    def _attach(v):
                        try:
                            if v is None:
                                return False
                            try:
                                if hasattr(v, 'setLongClickable'):
                                    v.setLongClickable(True)
                            except Exception:
                                pass
                            v.setOnLongClickListener(OnLongClickListener(on_long_click))
                            return True
                        except Exception:
                            return False

                    attached = False
                    try:
                        attached = _attach(get_private_field(cell, "nameTextView")) or attached
                    except Exception:
                        pass
                    try:
                        attached = _attach(get_private_field(cell, "imageView")) or attached
                    except Exception:
                        pass
                    try:
                        attached = _attach(get_private_field(cell, "detailTextView")) or attached
                    except Exception:
                        pass
                    try:
                        attached = _attach(get_private_field(cell, "detailExTextView")) or attached
                    except Exception:
                        pass

                    if not attached:
                        try:
                            if hasattr(cell, 'setLongClickable'):
                                cell.setLongClickable(True)
                        except Exception:
                            pass
                        cell.setOnLongClickListener(OnLongClickListener(on_long_click))
                except Exception:
                    pass

        except Exception:
            pass


class RenameSessionsPlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self._hook_ref = None
        self._names_map = {}
        self._dialog_open = False
        self._auth_map = {}

    def on_plugin_load(self):
        self._load_names_map()
        self._apply_hook()
        self.log(f"Plugin '{self.name}' loaded.")

    def on_plugin_unload(self):
        self._remove_hook()
        self.log(f"Plugin '{self.name}' unloaded.")

    def _load_names_map(self):
        try:
            raw = self.get_setting("rs_map", "{}")
            self._names_map = json.loads(raw) if raw else {}
            if not isinstance(self._names_map, dict):
                self._names_map = {}
        except Exception:
            self._names_map = {}

    def _save_names_map(self):
        try:
            self.set_setting("rs_map", json.dumps(self._names_map))
        except Exception:
            pass

    def _cancel_pending_clicks(self, view):
        try:
            try:
                if hasattr(view, 'setPressed'):
                    view.setPressed(False)
            except Exception:
                pass

            parent = view
            steps = 0
            while parent is not None and steps < 10:
                try:
                    try:
                        m = getattr(parent, 'cancelClickRunnables', None)
                        if callable(m):
                            m(True)
                            try:
                                rd = getattr(parent, 'requestDisallowInterceptTouchEvent', None)
                                if callable(rd):
                                    rd(True)
                            except Exception:
                                pass
                            break
                    except Exception:
                        pass
                    gp = getattr(parent, 'getParent', None)
                    parent = gp() if callable(gp) else None
                except Exception:
                    break
                finally:
                    steps += 1
        except Exception:
            pass

    def _current_account(self) -> int:
        try:
            uc = get_user_config()
            return int(uc.getCurrentAccount())
        except Exception:
            return 0

    def _make_session_key(self, auth_hash: int) -> str:
        return f"{self._current_account()}:{int(auth_hash)}"

    def _get_custom_name(self, key: str) -> Optional[str]:
        try:
            name = self._names_map.get(key)
            if name and str(name).strip():
                return str(name)
            return None
        except Exception:
            return None

    def _set_custom_name(self, key: str, value: Optional[str]):
        try:
            if value is None or not str(value).strip():
                if key in self._names_map:
                    self._names_map.pop(key, None)
            else:
                self._names_map[key] = str(value).strip()
            self._save_names_map()
        except Exception:
            pass

    def _compute_default_name(self, auth_obj) -> Optional[str]:
        try:
            if not auth_obj:
                return None
            dm = getattr(auth_obj, 'device_model', '') or ''
            platform = getattr(auth_obj, 'platform', '') or ''
            sysver = getattr(auth_obj, 'system_version', '') or ''
            if dm and str(dm).strip():
                return str(dm)
            result = ''
            if platform and str(platform).strip():
                result += str(platform)
            if sysver and str(sysver).strip():
                if result:
                    result += ' '
                result += str(sysver)
            return result
        except Exception:
            return None

    def _apply_hook(self):
        try:
            self._remove_hook()
            cls = find_class("org.telegram.ui.Cells.SessionCell")
            if not cls:
                return
            set_method = None
            try:
                methods = cls.getClass().getDeclaredMethods()
                for m in methods:
                    try:
                        if str(m.getName()) == "setSession" and m.getParameterTypes() and len(m.getParameterTypes()) == 2:
                            set_method = m
                            break
                    except Exception:
                        continue
            except Exception:
                set_method = None

            if set_method is not None:
                self._hook_ref = self.hook_method(set_method, _SetSessionHook(self))
        except Exception:
            pass

    def _remove_hook(self):
        if self._hook_ref:
            try:
                self.unhook_method(self._hook_ref)
            except Exception:
                pass
            finally:
                self._hook_ref = None

    def _show_rename_dialog(self, cell_view, auth_hash: int):
        try:
            if self._dialog_open:
                return
            fragment = get_last_fragment()
            if not fragment or not hasattr(fragment, 'getParentActivity'):
                BulletinHelper.show_error("Не удалось открыть диалог")
                return
            context = fragment.getParentActivity()
            if not context:
                BulletinHelper.show_error("Не удалось открыть диалог")
                return

            key = self._make_session_key(auth_hash)
            current_custom = self._get_custom_name(key)
            default_name = None
            try:
                default_name = self._compute_default_name(self._auth_map.get(key))
            except Exception:
                default_name = None

            placeholder = None
            try:
                name_tv = get_private_field(cell_view, "nameTextView")
                if name_tv and hasattr(name_tv, 'getText'):
                    placeholder = str(name_tv.getText())
            except Exception:
                placeholder = None

            initial_text = current_custom or default_name or placeholder or ""

            builder = AlertDialogBuilder(context, AlertDialogBuilder.ALERT_TYPE_MESSAGE)
            builder.set_title("Переименовать устройство")
            try:
                if R is not None and Theme is not None:
                    try:
                        top_bg = Theme.getColor(Theme.key_dialogTopBackground)
                    except Exception:
                        top_bg = 0
                    try:
                        builder.set_top_image(R.drawable.msg_edit, top_bg)
                    except Exception:
                        pass
            except Exception:
                pass

            edit = None
            try:
                if EditTextBoldCursor is not None:
                    edit = EditTextBoldCursor(context)
                    edit.setSingleLine(True)
                    edit.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES)
                    edit.setText(initial_text)
                    try:
                        if Theme is not None:
                            try:
                                edit.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
                            except Exception:
                                pass
                            try:
                                edit.setHintTextColor(Theme.getColor(Theme.key_dialogTextGray3))
                            except Exception:
                                pass
                            try:
                                edit.setLineColors(
                                    Theme.getColor(Theme.key_dialogInputField),
                                    Theme.getColor(Theme.key_dialogInputFieldActivated),
                                    Theme.getColor(Theme.key_text_RedBold)
                                )
                            except Exception:
                                pass
                            try:
                                edit.setCursorColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText))
                            except Exception:
                                pass
                        if ColorDrawable is not None:
                            edit.setBackground(ColorDrawable(0))
                        if ColorStateList is not None and Color is not None:
                            edit.setBackgroundTintList(ColorStateList.valueOf(Color.TRANSPARENT))
                        try:
                            if AndroidUtilities is not None:
                                padding_h = AndroidUtilities.dp(20)
                                padding_v = AndroidUtilities.dp(12)
                                edit.setPadding(padding_h, padding_v, padding_h, padding_v)
                        except Exception:
                            pass
                    except Exception:
                        pass
            except Exception:
                edit = None

            if edit is not None:
                builder.set_view(edit)
            else:
                builder.set_message("Не удалось создать поле ввода")

            def on_save(b, w):
                try:
                    new_value = str(edit.getText()) if edit is not None else ""
                    new_value = new_value.strip()
                    self._set_custom_name(key, new_value if new_value else None)
                    try:
                        name_tv2 = get_private_field(cell_view, "nameTextView")
                        if name_tv2:
                            run_on_ui_thread(lambda: name_tv2.setText(new_value if new_value else (placeholder or "")))
                    except Exception:
                        pass
                    BulletinHelper.show_success("Имя сохранено")
                except Exception:
                    BulletinHelper.show_error("Ошибка сохранения")
                finally:
                    try:
                        b.dismiss()
                    except Exception:
                        pass

            def on_reset(b, w):
                try:
                    self._set_custom_name(key, None)
                    try:
                        name_tv3 = get_private_field(cell_view, "nameTextView")
                        target_text = default_name or placeholder or ""
                        if name_tv3:
                            run_on_ui_thread(lambda: name_tv3.setText(target_text))
                    except Exception:
                        pass
                    BulletinHelper.show_info("Имя сброшено")
                except Exception:
                    pass
                finally:
                    try:
                        b.dismiss()
                    except Exception:
                        pass

            builder.set_positive_button("Сохранить", on_save)
            builder.set_neutral_button("Сбросить", on_reset)
            builder.set_negative_button("Отмена", lambda b, w: b.dismiss())
            try:
                builder.set_on_dismiss_listener(lambda _b: self._set_dialog_open(False))
            except Exception:
                pass
            self._set_dialog_open(True)
            builder.show()

        except Exception:
            BulletinHelper.show_error("Ошибка открытия диалога")

    def _set_dialog_open(self, value: bool):
        try:
            self._dialog_open = bool(value)
        except Exception:
            self._dialog_open = False


