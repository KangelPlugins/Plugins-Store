from base_plugin import BasePlugin, HookResult, HookStrategy
from android_utils import log as logcat, run_on_ui_thread
from ui.bulletin import BulletinHelper
from typing import Any
import re
import random
import requests

__name__ = "CowSay"
__description__ = ".cowsay text/daily/none(for random quote)"
__version__ = "cow2"
__author__ = "@koshbko"
__id__ = "cowsay"
__icon__ = "OtagatO_by_fStikBot/25"
__min_version__ = "11.12.0"

FALLBACK_QUOTES = [
    ("Ты молодец!", 10),
    ("Держись, всё получится.", 10),
    ("Верь в себя!", 10),
    ("Сегодня удачный день!", 10),
    ("Корова сказала: mooo", 10),
    ("Если программа работает сразу — значит, ты что-то забыл проверить.", 10),
    ("To err is human, to moo bovine.", 10),
    ("Не паникуй.", 10),
    ("Привет! Я использую exteraGram!", 7),
    ("ОШИБКА: СЫН МЕРТВОЙ ШЛЮХИ", 1),
    ("Твоя сессия уже у меня.", 4),
    ("Как день?", 10),
    ("sudo rm -rf exteraGram/", 3),
    ("Читайте FAQ", 8),
    ("Сегодня я взглянула на код @koshbkoplugins, День испорчен.", 1),
]

ZENQUOTES_TODAY_API = "https://zenquotes.io/api/today/"

class CowSay(BasePlugin):
    def __init__(self):
        super().__init__()

    def on_plugin_load(self):
        logcat("CowSay: Загрузка плагина...")
        self.add_on_send_message_hook()

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not params.message or not isinstance(params.message, str):
            return HookResult()

        try:
            if params.message.startswith(".cowsay"):
                return self.handle_cowsay(params)
            return HookResult()
        except Exception as e:
            error_msg = f"Ошибка: {str(e)}"
            logcat(f"CowSay: {error_msg}")
            self.show_error(error_msg)
            return HookResult(strategy=HookStrategy.CANCEL)

    def handle_cowsay(self, params):
        # Проверка на аргумент 'daily'
        match_daily = re.search(r'\.cowsay\s+daily\b', params.message)
        if match_daily:
            quote = self.get_quote_of_the_day()
            if not quote:
                self.show_error("❌ Не удалось получить цитату дня")
                return HookResult(strategy=HookStrategy.CANCEL)
            text = quote
        else:
            # Ищем явный текст (в кавычках или без)
            match = re.search(r'\.cowsay\s+"(.*?)"', params.message)
            if not match:
                match = re.search(r'\.cowsay\s+(.+)', params.message)

            if match:
                text = match.group(1).strip()
            else:
                text = ""

            # Если текст не указан, используем локальные цитаты по весам
            if not text:
                text = self.get_weighted_quote()

        result = self.make_cow_say(text)
        return HookResult(
            strategy=HookStrategy.MODIFY,
            params=self.modify_params(params, result)
        )

    def get_quote_of_the_day(self):
        try:
            resp = requests.get(ZENQUOTES_TODAY_API, timeout=5)
            if resp.status_code == 200:
                data = resp.json()
                # [{"q": "...", "a": "..."}]
                if isinstance(data, list) and len(data) > 0:
                    quote = data[0].get("q", "")
                    author = data[0].get("a", "")
                    return f"{quote} — {author}" if author else quote
        except Exception as e:
            logcat(f"CowSay: Ошибка при запросе цитаты дня: {e}")
        return None

    def get_weighted_quote(self):
        quote_texts = [q[0] for q in FALLBACK_QUOTES]
        quote_weights = [q[1] for q in FALLBACK_QUOTES]
        return random.choices(quote_texts, weights=quote_weights, k=1)[0]

    def make_cow_say(self, text):
        if len(text) > 100:
            text = text[:97] + "..."

        text_line = f"< {text} >"
        border_len = len(text_line)

        top = " " + "_" * border_len
        bottom = " " + "-" * border_len

        cow = [
            "        \\   ^__^",
            "         \\  (oo)\\_______",
            "             (__)\\              )\\/\\",
            "                     ||--------w |",
            "                     ||            ||"
        ]

        return f"{text_line}\n" + "\n".join(cow)

    def show_error(self, text):
        def run():
            BulletinHelper.show_error(text)
        run_on_ui_thread(run)

    def modify_params(self, params, text):
        params.message = text
        return params
