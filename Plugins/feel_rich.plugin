from base_plugin import BasePlugin, MethodReplacement
from hook_utils import find_class
from ui.settings import Input
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from java.lang import Boolean, Runnable
from org.telegram.tgnet.tl import TL_stars
from decimal import Decimal, getcontext
from client_utils import get_last_fragment, run_on_queue
from android_utils import run_on_ui_thread
from org.telegram.ui.Stars import StarsController
from java.lang.reflect import Modifier

__id__ = "feel_rich"
__name__ = "Feel Rich"
__description__ = "*Locally* modify stars balance in your profile"
__author__ = "@PESSDES_Plugins"
__min_version__ = "11.12.0"
__icon__ = "VoiceToText7/1"
__version__ = "3.2"

getcontext().prec = 10

NEW_VERSION = Modifier.isAbstract(TL_stars.StarsAmount.getClass().getModifiers())
HAS_TON = any(x.getName() == "ton" for x in StarsController.getClass().getDeclaredFields())

STARS_AMOUNT = "stars_amount"
TON_AMOUNT = "ton_amount"

class Plugin(BasePlugin):
    stars_amount: Decimal = 1000
    ton_amount: Decimal = 10
    
    def on_plugin_load(self):
        self.log(NEW_VERSION)
        self.set_amount(self.get_setting(STARS_AMOUNT, "1000"), ignore=False, ton=False)
        if HAS_TON:
            self.set_amount(self.get_setting(TON_AMOUNT, "10"), ignore=True, ton=True)

        getBalance = StarsController.getClass().getDeclaredMethod("getBalance", Boolean.TYPE, Runnable.getClass(), Boolean.TYPE)
        self.hook_method(getBalance, GetBalanceHook(self))
    
    def create_settings(self):
        settings = [Input(STARS_AMOUNT, "Stars amount", default="1000", icon="filled_giveaway_stars", on_change=self.set_amount)]
        if HAS_TON:
            settings.append(Input(TON_AMOUNT, "TON amount", default="10", icon="filled_giveaway_stars", on_change=lambda v: self.set_amount(v, ton=True)))
        return settings

    def set_amount(self, value, ignore: bool = False, ton = False):
        setting = STARS_AMOUNT if not ton else TON_AMOUNT
        value = str(value)
        try:
            if ignore:
                self.set_setting(setting, value)
                setattr(self, setting, Decimal(value))
                return
            
            value = Decimal(value)
            if (not ignore and getattr(self, setting) < 10**10 and value > 10**10):
                def show_alert():
                    alert = AlertDialogBuilder(get_last_fragment().getParentActivity())
                    alert.set_title("Warning")
                    alert.set_message('You are trying to set the value too high. At this value, the application may start to freeze or even crash. Select a lower value. By clicking "OK", you accept the possible risks.')     
                    alert.set_positive_button("ОК", lambda a, b: (self.set_amount(value, True))) 
                    alert.set_negative_button("Cancel")
                    alert.show()
                
                run_on_ui_thread(show_alert)
                self.set_setting(setting, str(getattr(self, setting)))
            else:
                self.set_setting(setting, str(value))
                setattr(self, setting, Decimal(value))
                return
        except ValueError:
            self.set_setting(setting, str(getattr(self, setting)))
            BulletinHelper.show_error("Invalid amount")
        except Exception as e:
            self.log(f"{e.__traceback__.tb_lineno}:Failed to set stars amount: {e}")

class GetBalanceHook(MethodReplacement):
    def __init__(self, plugin: Plugin):
        self.plugin = plugin

    def replace_hooked_method(self, param):
        return self.decimal_to_amount(HAS_TON and param.thisObject.ton)

    def decimal_to_amount(self, is_ton: bool = False) -> TL_stars.StarsAmount:
        value = self.plugin.stars_amount if not is_ton else self.plugin.ton_amount
        if is_ton:
            nano_ton_value = int(value * Decimal("1000000000"))
            amount = TL_stars.TL_starsTonAmount()
            amount.amount = nano_ton_value
            return amount

        frac_part = value - int(value)
        nanos = int((frac_part * Decimal("1000000000")).to_integral_value())

        if NEW_VERSION:
            amount = TL_stars.StarsAmount.ofStars(int(value))
        else:
            amount = TL_stars.StarsAmount(int(value))
        amount.nanos = nanos
        return amount