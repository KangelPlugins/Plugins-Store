import traceback

from android.net import Uri
from android_utils import log
from base_plugin import BasePlugin, MethodHook
from hook_utils import find_class
from java.lang import CharSequence, Thread, Integer
from java.util import ArrayList
from org.telegram.messenger import AndroidUtilities

__name__ = "Better Previews"
__description__ = "Modifies specific URLs (Twitter, TikTok, Reddit, Instagram, Pixiv) for better previews."
__version__ = "1.0.1"
__id__ = "better_previews"
__author__ = "@immat0x1"
__icon__ = "exteraPlugins/1"
__min_version__ = "11.12.0"


# thx neko for method
def _apply_url_fix(url: str) -> str:
    try:
        processed_url = url
        if not url.startswith("http://") and not url.startswith("https://"):
            processed_url = "https://" + url

        uri = Uri.parse(processed_url)
        if uri is None:
            return url

        host = AndroidUtilities.getHostAuthority(str(uri).lower())
        if host is None:
            return url

        if host == "twitter.com" or host == "x.com":
            target_authority = "fixupx.com"
        elif host == "tiktok.com" or host.endswith(".tiktok.com"):
            target_authority = host.replace("tiktok.com", "vxtiktok.com")
        elif host == "reddit.com" or host == "www.reddit.com":
            target_authority = "vxreddit.com"
        elif host == "instagram.com" or host == "www.instagram.com":
            target_authority = "ddinstagram.com"
        elif host == "pixiv.net" or host == "www.pixiv.net":
            target_authority = "phixiv.net"
        else:
            return url

        modified_uri = uri.buildUpon().authority(target_authority).build()
        return modified_uri

    except Exception as e:
        log(e)
        return url


class ModifyUrlsHook(MethodHook):
    def __init__(self, plugin) -> None:
        self.plugin = plugin

    def before_hooked_method(self, param):
        try:
            if param.args[0] != " ":
                return

            called_from_intended_context = False
            for element in Thread.currentThread().getStackTrace()[2:]:
                if (
                        element.getClassName().startswith(
                            "org.telegram.messenger.DispatchQueue"
                        )
                        and element.getMethodName() == "run"
                ):
                    called_from_intended_context = True
                    break

            if not called_from_intended_context:
                return

            modified_urls = ArrayList()
            modified_count = 0

            for url_sequence in param.args[1].toArray():
                if not isinstance(url_sequence, CharSequence):
                    modified_urls.add(url_sequence)
                    continue

                original_url = str(url_sequence)
                modified_url = _apply_url_fix(original_url)

                if modified_url != original_url:
                    modified_count += 1

                modified_urls.add(modified_url)

            if modified_count > 0:
                param.args[1] = modified_urls

        except Exception as e:
            self.plugin.log(f"{e}\n{traceback.format_exc()}")


class LargeVideoHook(MethodHook):
    def __init__(self, plugin) -> None:
        self.plugin = plugin

    def after_hooked_method(self, param):
        if param.thisObject.isVideo:
            param.thisObject.webpageSmall = False


class BetterPreviews(BasePlugin):
    def on_plugin_load(self):
        try:
            text_utils = find_class("android.text.TextUtils")
            if text_utils:
                join_method = text_utils.getClass().getDeclaredMethod(
                    "join", CharSequence.getClass(), find_class("java.lang.Iterable").getClass()
                )
                self.hook_method(join_method, ModifyUrlsHook(self))

            preview_params = find_class("org.telegram.messenger.MessagePreviewParams")
            if preview_params:
                update_link = preview_params.getClass().getDeclaredMethod(
                    "updateLink",
                    Integer.TYPE,
                    find_class("org.telegram.tgnet.TLRPC$WebPage").getClass(),
                    CharSequence.getClass(),
                    find_class("org.telegram.messenger.MessageObject").getClass(),
                    find_class("org.telegram.ui.ChatActivity$ReplyQuote").getClass(),
                    find_class("org.telegram.messenger.MessageObject").getClass()
                )
                self.hook_method(update_link, LargeVideoHook(self))

        except Exception as e:
            self.log(
                f"Failed to activate hook during plugin load: {e}\n{traceback.format_exc()}"
            )
