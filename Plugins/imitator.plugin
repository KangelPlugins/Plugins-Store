#  _____
# |_   _|____  ____ _ _ __   ___
#   | |/ _ \ \/ / _` | '_ \ / _ \
#   | | (_) >  < (_| | | | | (_) |
#   |_|\___/_/\_\__,_|_| |_|\___/
#
# meta developer: @Toxano_Modules
# scope: @Toxano_Modules

__id__ = "imitator_plugin_enhanced"
__name__ = "Imitator"
__description__ = "–ò–º–∏—Ç–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —á–∞—Ç–µ\n\n–ö–æ–º–∞–Ω–¥—ã:\n.im - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n.im <—Ä–µ–∂–∏–º> - –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫\n.imstop - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ —á–∞—Ç–µ\n.imstopall - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–∑–¥–µ\n\n–†–µ–∂–∏–º—ã: typing, voice, video, game, photo, round, audio, document, location, contact, sticker, mixed"
__version__ = "1.4.0"
__author__ = "@Toxano_modules"
__icon__ = "T_modules/0"
__min_version__ = "11.12.0"
#—Å–ø–∏–∑–¥–∏–ª –∫–æ–¥ - –º–∞—Ç—å —à–ª—é—Ö–∞

import time
import random
import threading
from typing import Any

from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import send_request, get_messages_controller, get_last_fragment
from hook_utils import find_class
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from android_utils import run_on_ui_thread
from org.telegram.tgnet import TLRPC
from android_utils import log

class ImitatorPlugin(BasePlugin):

    MODES = [
        "typing", "voice", "video", "game", "photo", "round", "audio", 
        "document", "location", "contact", "sticker", "mixed"
    ]
    
    MODE_NAMES = {
        "typing": "üìù –ø–µ—á–∞—Ç–∞–µ—Ç...",
        "voice": "üé§ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "video": "üé¨ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ", 
        "game": "üéÆ –∏–≥—Ä–∞–µ—Ç –≤ –∏–≥—Ä—É",
        "photo": "üì∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ",
        "round": "‚≠ï –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä—É–∂–æ—á–µ–∫",
        "audio": "üéµ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª",
        "document": "üìÑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª",
        "location": "üìç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
        "contact": "üë§ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç",
        "sticker": "üòÄ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–∫–µ—Ä",
        "mixed": "üîÄ —Å–ª—É—á–∞–π–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è"
    }
    
    DELAY = 2.2

    def __init__(self):
        super().__init__()
        self._tasks = {}
        self._lock = threading.Lock()

    def on_plugin_load(self):
        self.add_on_send_message_hook()

    def on_plugin_unload(self):
        with self._lock:
            for task_key in list(self._tasks.keys()):
                self._stop_task(task_key, show_bulletin=False)

    def _get_action_by_name(self, name: str) -> Any:
        action_map = {
            "typing": TLRPC.TL_sendMessageTypingAction,
            "voice": TLRPC.TL_sendMessageRecordAudioAction,
            "video": TLRPC.TL_sendMessageRecordVideoAction,
            "game": TLRPC.TL_sendMessageGamePlayAction,
            "photo": TLRPC.TL_sendMessageUploadPhotoAction,
            "round": TLRPC.TL_sendMessageRecordRoundAction,
            "audio": TLRPC.TL_sendMessageUploadAudioAction,
            "document": TLRPC.TL_sendMessageUploadDocumentAction,
            "location": TLRPC.TL_sendMessageGeoLocationAction,
            "contact": TLRPC.TL_sendMessageChooseContactAction,
            "sticker": TLRPC.TL_sendMessageChooseStickerAction
        }
        ActionClass = action_map.get(name)
        return ActionClass() if ActionClass else None

    def _imitation_loop(self, chat_id: int, top_msg_id: int, mode: str, stop_event: threading.Event):
        input_peer = get_messages_controller().getInputPeer(chat_id)
        if not input_peer:
            log(f"Imitator: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å InputPeer –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return

        def send_single_action():
            try:
                available_modes = [m for m in self.MODES if m != "mixed"]
                action_name = random.choice(available_modes) if mode == "mixed" else mode
                action_obj = self._get_action_by_name(action_name)
                if not action_obj:
                    return

                req = TLRPC.TL_messages_setTyping()
                req.peer = input_peer
                req.action = action_obj
                
                if top_msg_id != 0:
                    req.top_msg_id = top_msg_id
                    req.flags |= 1
                    
                send_request(req, lambda res, err: None)
            except Exception as e:
                log(f"Imitator: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")
        
        try:
            send_single_action()

            while not stop_event.is_set():
                if stop_event.wait(timeout=self.DELAY):
                    break
                
                if not stop_event.is_set():
                    send_single_action()

        except Exception as e:
            log(f"Imitator: –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –∏–º–∏—Ç–∞—Ü–∏–∏: {e}")
        finally:
            try:
                cancel_action = TLRPC.TL_sendMessageCancelAction()
                req_cancel = TLRPC.TL_messages_setTyping()
                req_cancel.peer = input_peer
                req_cancel.action = cancel_action
                
                if top_msg_id != 0:
                    req_cancel.top_msg_id = top_msg_id
                    req_cancel.flags |= 1
                    
                send_request(req_cancel, lambda res, err: None)
            except Exception as e:
                log(f"Imitator: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è: {e}")

    def _stop_task(self, task_key: tuple, show_bulletin: bool = True):
        task_info = self._tasks.pop(task_key, None)
        if task_info:
            task_info["stop_event"].set()
            if show_bulletin:
                mode_name = self.MODE_NAMES.get(task_info.get("mode", ""), "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                BulletinHelper.show_info(f"–ò–º–∏—Ç–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {mode_name}")

    def _start_imitation(self, chat_id: int, top_msg_id: int, mode: str):
        task_key = (chat_id, top_msg_id)

        with self._lock:
            if task_key in self._tasks:
                self._stop_task(task_key, show_bulletin=False)

            stop_event = threading.Event()
            thread = threading.Thread(
                target=self._imitation_loop,
                args=(chat_id, top_msg_id, mode, stop_event),
                daemon=True
            )
            
            self._tasks[task_key] = {
                "thread": thread,
                "stop_event": stop_event,
                "mode": mode
            }
            thread.start()

        mode_name = self.MODE_NAMES.get(mode, mode)
        BulletinHelper.show_success(f"–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞: {mode_name}")

    def _show_mode_selection_menu(self, chat_id: int, top_msg_id: int):
        def show_menu():
            fragment = get_last_fragment()
            if not fragment:
                BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç")
                return
                
            activity = fragment.getParentActivity()
            if not activity:
                BulletinHelper.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")
                return

            items = []
            for mode in self.MODES:
                mode_display = self.MODE_NAMES.get(mode, mode)
                items.append(f"{mode} - {mode_display}")
            
            def on_item_selected(builder, index):
                builder.dismiss()
                selected_mode = self.MODES[index]
                self._start_imitation(chat_id, top_msg_id, selected_mode)

            builder = AlertDialogBuilder(activity)
            builder.set_title("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–º–∏—Ç–∞—Ü–∏–∏")
            builder.set_items(items, on_item_selected)
            builder.set_negative_button("–û—Ç–º–µ–Ω–∞", lambda bld, which: bld.dismiss())
            builder.show()

        run_on_ui_thread(show_menu)

    def _get_current_chat_info(self):
        try:
            fragment = get_last_fragment()
            if not fragment:
                return None, None

            ChatActivity = find_class("org.telegram.ui.ChatActivity")
            if not isinstance(fragment, ChatActivity):
                return None, None

            chat_id = fragment.getDialogId()
            top_msg_id = fragment.getTopicId() if hasattr(fragment, 'getTopicId') else 0
            
            return chat_id, top_msg_id
        except Exception as e:
            log(f"Imitator: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ: {e}")
            return None, None

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        if not hasattr(params, "message") or not isinstance(params.message, str):
            return HookResult()

        msg_text = params.message.strip().lower()
        
        if msg_text == ".imstopall":
            with self._lock:
                count = len(self._tasks)
                for task_key in list(self._tasks.keys()):
                    self._stop_task(task_key, show_bulletin=False)
                    
            if count > 0:
                BulletinHelper.show_success(f"–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {count} –∏–º–∏—Ç–∞—Ü–∏–π –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö")
            else:
                BulletinHelper.show_info("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∏–º–∏—Ç–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return HookResult(strategy=HookStrategy.CANCEL)

        chat_id, top_msg_id = self._get_current_chat_info()
        if chat_id is None:
            return HookResult()
            
        task_key = (chat_id, top_msg_id)

        if msg_text == ".imstop":
            with self._lock:
                if task_key in self._tasks:
                    self._stop_task(task_key)
                else:
                    BulletinHelper.show_info("–ò–º–∏—Ç–∞—Ü–∏—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
            return HookResult(strategy=HookStrategy.CANCEL)

        if msg_text == ".im":
            self._show_mode_selection_menu(chat_id, top_msg_id)
            return HookResult(strategy=HookStrategy.CANCEL)

        if msg_text.startswith(".im "):
            parts = msg_text.split()
            if len(parts) >= 2:
                mode = parts[1].lower()
                if mode in self.MODES:
                    self._start_imitation(chat_id, top_msg_id, mode)
                else:
                    available_modes = ", ".join(self.MODES)
                    BulletinHelper.show_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º! –î–æ—Å—Ç—É–ø–Ω—ã–µ: {available_modes}")
            else:
                self._show_mode_selection_menu(chat_id, top_msg_id)
            return HookResult(strategy=HookStrategy.CANCEL)

        return HookResult()