# MandreAI Stileg+ v2.3.0

"""
╭─────────────────────────────────────────────────────────────╮
│                                                             │
│  ███╗   ███╗ █████╗ ███╗   ██╗██████╗ ██████╗ ███████╗      │
│  ████╗ ████║██╔══██╗████╗  ██║██╔══██╗██╔══██╗██╔════╝      │
│  ██╔████╔██║███████║██╔██╗ ██║██║  ██║██████╔╝█████╗        │
│  ██║╚██╔╝██║██╔══██║██║╚██╗██║██║  ██║██╔══██╗██╔══╝        │
│  ██║ ╚═╝ ██║██║  ██║██║ ╚████║██████╔╝██║  ██║███████╗      │
│  ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝ ╚═╝  ╚═╝╚══════╝      │
│                                                             │
│         █████╗ ██╗                                          │
│        ██╔══██╗██║    ╭───────────────────╮                 │
│        ███████║██║    │© 2024-2025        │                 │
│        ██╔══██║██║    │Licensed Product   │                 │
│        ██║  ██║██║    │All Rights Reserved│                 │
│        ╚═╝  ╚═╝╚═╝    ╰───────────────────╯                 │
│                                                             │
│  ╭───────────────────────────────────────────────────────╮  │
│  │ Unauthorized use, reproduction or distribution        │  │
│  │ of this software is strictly prohibited               │  │
│  ╰───────────────────────────────────────────────────────╯  │
│                                                             │
╰─────────────────────────────────────────────────────────────╯

"""
#       /`·.¸
#      /¸...¸`:·
#  ¸.·´  ¸   `·.¸.·´)
# : © ):´;      ; ´)
#  `·.¸ `·  ¸.·´\`·¸)
#      `\\´´\¸.·´

__id__ = "stileg"
__name__ = "Stileg"
__author__ = """
@swagnonher & @plugins_lishonov"""
__version__ = "1.0"
__description__ = """Нейросеть переделывает ваш текст после команды ".stile" на выбранный вами стиль.
Команды:
• .stileges — Открыть окно для выбора стиля.
• .stile <текст> — Применить выбранный стиль к тексту."""

__icon__ = "Swagapluginsicon/3"
__min_version__ = "11.12.0"

# Импорты для базового плагина и работы с сообщениями
from base_plugin import BasePlugin, HookResult, HookStrategy
from typing import Any

# Импорты для работы с UI и утилитами
from client_utils import send_message, get_last_fragment
from android_utils import run_on_ui_thread, log
from ui.bulletin import BulletinHelper
from ui.alert import AlertDialogBuilder
from org.telegram.messenger import LocaleController

# Импорты для работы с сетью и потоками
import requests
import threading
import json

AI_API_URL = "https://text.pollinations.ai/openai/v1/chat/completions"
AI_MODEL = "gemini"

class TextStylerPlugin(BasePlugin):
    """
    Плагин для стилизации текста с помощью AI.
    Предоставляет команды для изменения стиля сообщений.
    """
    def on_plugin_load(self):
        self.add_on_send_message_hook()
        log(f"[{self.__class__.__name__}] Плагин успешно загружен!")

    def get_strings(self):
        """
        Возвращает локализованные строки для UI плагина.
        """
        lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
        is_ru = lang.startswith('ru')
        
        strings = {
            'ru': {
                'style_thug': "Быдло",
                'style_neutral': "Нейтральный",
                'style_gentleman': "Джентльмен",
                'style_official': "Официальный",
                'style_funny': "Смешной",
                'usage_info': "Используйте .stileges для выбора стиля, а затем .stile <ваш текст> для его применения.",
                'generating': "Стилизую текст...",
                'generation_success': "Текст успешно стилизован!",
                'generation_failed': "Ошибка стилизации: {}",
                'ai_unavailable': "AI недоступен или вернул пустой ответ.",
                'choose_style_title': "Выберите стиль текста",
                'cancel_button': "Отмена",
                'no_text_error': "Пожалуйста, введите текст для стилизации.",
                'ui_context_error': "Не удалось получить контекст UI.",
                'style_switched_success': "Стиль изменен на: {}"
            },
            'en': {
                'style_thug': "Thug",
                'style_neutral': "Neutral",
                'style_gentleman': "Gentleman",
                'style_official': "Official",
                'style_funny': "Funny",
                'usage_info': "Use .stileges to select a style, then use .stile <your text> to apply it.",
                'generating': "Styling text...",
                'generation_success': "Text styled successfully!",
                'generation_failed': "Styling failed: {}",
                'ai_unavailable': "AI is unavailable or returned an empty response.",
                'choose_style_title': "Choose text style",
                'cancel_button': "Cancel",
                'no_text_error': "Please enter text to style.",
                'ui_context_error': "Failed to get UI context.",
                'style_switched_success': "Style switched to: {}"
            }
        }
        return strings['ru'] if is_ru else strings['en']

    def _get_ai_prompt(self, style: str, text: str):
        """
        Генерирует промпт для AI на основе выбранного стиля.
        """
        s = self.get_strings()
        if style == s['style_thug']:
            return (
                f"Перепиши мой следующий текст от моего лица в стиле быдло: грубый, с матами, агрессивный, как у гопника. "
                f"Сохрани смысл оригинала, но адаптируй под стиль. Не описывай текст, а именно перепиши его от моего лица (например: привет ребята должно превратиться в: привет пацики, понял?). "
                f"Оригинальный текст: '{text}'"
            )
        elif style == s['style_neutral']:
            return (
                f"Перепиши мой следующий текст от моего лица (ну от лица как в оригинальном сообщений) в нейтральном стиле: без эмоций, просто факты, лаконично. "
                f"Сохрани смысл оригинала, но адаптируй под стиль. Не описывай текст, а именно перепиши его. (например: Я ЕБАЛ ЭТИ УРОКИ УЧИТЬ должно быть: я устал учить уроки "
                f"Оригинальный текст: '{text}'"
            )
        elif style == s['style_gentleman']:
            return (
                f"Перепиши мой следующий текст от моего лица (ну как в оригинальном сообщений) в стиле джентльмена: вежливый, элегантный, утонченный, с изысканными выражениями. "
                f"Сохрани смысл оригинала, но адаптируй под стиль. Не описывай текст, а именно перепиши его. (например: привет женщина должно быть: здравствуйте миссис) "
                f"Оригинальный текст: '{text}'"
            )
        elif style == s['style_official']:
            return (
                f"Перепиши мой следующий текст от моего лица (ну от лица как в оригинальном сообщений) в официальном стиле: формальный, деловой, без эмоций, с использованием официального языка. "
                f"Сохрани смысл оригинала, но адаптируй под стиль. Не описывай текст, а именно перепиши его. "
                f"Оригинальный текст: '{text}'"
            )
        elif style == s['style_funny']:
            return (
                f"Перепиши мой следующий текст от моего лица в смешном стиле: добавь юмор, шутки, сделай забавным и ироничным. "
                f"Сохрани смысл оригинала, но адаптируй под стиль. Не описывай текст, а именно перепиши его. "
                f"Оригинальный текст: '{text}'"
            )
        return text

    def _generate_text_with_ai(self, prompt: str) -> str:
        """
        Отправляет запрос к API AI для генерации стилизованного текста.
        """
        try:
            headers = {"Content-Type": "application/json"}
            payload = {
                "model": AI_MODEL,
                "messages": [{"role": "user", "content": prompt}],
                "temperature": 1.0
            }
            response = requests.post(AI_API_URL, headers=headers, json=payload, timeout=30)
            response.raise_for_status()
            
            response_json = response.json()
            if response_json and "choices" in response_json and len(response_json["choices"]) > 0:
                return response_json["choices"][0]["message"]["content"].strip()
            return None
        except requests.exceptions.RequestException as e:
            log(f"Ошибка запроса к AI: {e}")
            return None
        except Exception as e:
            log(f"Неизвестная ошибка при работе с AI: {e}")
            return None

    def _send_styled_message(self, peer_id: int, original_text: str, style: str, reply_to_msg_id: Any = None):
        """
        Запускает процесс стилизации текста в фоновом потоке и отправляет результат в чат.
        """
        s = self.get_strings()
        run_on_ui_thread(lambda: BulletinHelper.show_info(s['generating']))

        def background_task():
            ai_prompt = self._get_ai_prompt(style, original_text)
            styled_text = self._generate_text_with_ai(ai_prompt)

            if styled_text:
                run_on_ui_thread(lambda: BulletinHelper.show_success(s['generation_success']))
                send_message({
                    "peer": peer_id,
                    "message": styled_text,
                    "replyToMsg": reply_to_msg_id
                })
            else:
                run_on_ui_thread(lambda: BulletinHelper.show_error(s['generation_failed'].format(s['ai_unavailable'])))

        threading.Thread(target=background_task, daemon=True).start()
        
    def _show_style_selection_dialog(self):
        """
        Отображает диалоговое окно для выбора стиля, как в MandreCharacter AI.
        """
        s = self.get_strings()
        fragment = get_last_fragment()
        if not fragment or not fragment.getParentActivity():
            run_on_ui_thread(lambda: BulletinHelper.show_error(s['ui_context_error']))
            return
        
        activity = fragment.getParentActivity()
        
        style_options = [s['style_thug'], s['style_neutral'], s['style_gentleman'], s['style_official'], s['style_funny']]
        
        builder = AlertDialogBuilder(activity)
        builder.set_title(s['choose_style_title'])

        def on_style_selected(dialog, index):
            if 0 <= index < len(style_options):
                self.set_setting("current_style_index", index)
                style_name = style_options[index]
                BulletinHelper.show_success(s['style_switched_success'].format(style_name))
            dialog.dismiss()

        builder.set_items(style_options, on_style_selected)
        builder.set_negative_button(s['cancel_button'], lambda d, w: d.dismiss())
        
        builder.show()

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        """
        Хук, который перехватывает исходящие сообщения пользователя.
        """
        if not isinstance(params.message, str) or not params.message:
            return HookResult()

        message_text = params.message.strip()
        peer_id = params.peer
        reply_to_msg_id = getattr(params, 'replyToMsg', None)
        s = self.get_strings()

        # Обработка команды .stileges для выбора стиля
        if message_text.lower() == ".stileges":
            run_on_ui_thread(self._show_style_selection_dialog)
            return HookResult(strategy=HookStrategy.CANCEL)

        # Обработка команды .stile <ваш текст>
        if message_text.lower().startswith(".stile "):
            text_to_style = message_text[len(".stile "):].strip()
            if not text_to_style:
                run_on_ui_thread(lambda: BulletinHelper.show_error(s['no_text_error']))
                return HookResult(strategy=HookStrategy.CANCEL)

            # Получаем ВЫБРАННЫЙ стиль из настроек
            selected_style_index = self.get_setting("current_style_index", 1) # По умолчанию 1 = Нейтральный
            styles_map = {
                0: s['style_thug'],
                1: s['style_neutral'],
                2: s['style_gentleman'],
                3: s['style_official'],
                4: s['style_funny']
            }
            selected_style = styles_map.get(selected_style_index, s['style_neutral'])
            
            self._send_styled_message(peer_id, text_to_style, selected_style, reply_to_msg_id)
            return HookResult(strategy=HookStrategy.CANCEL)

        return HookResult()