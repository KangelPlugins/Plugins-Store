# recent_chats_back_button.plugin

__id__ = "recent_chats_back_button"
__name__ = "Recent Chats Back Button"
__author__ = "@oodze"
__version__ = "1.1.2"
__description__ = """Долгий тап на кнопку "Назад" показывает недавние личные чаты."""

import traceback
from typing import Any, Optional, Dict
from base_plugin import BasePlugin, MethodHook
try:
    from mandre_lib import Mandre
    mandrelib_found = True
except ImportError:
    mandrelib_found = False
from client_utils import send_message, get_last_fragment
from android_utils import run_on_ui_thread, log, OnClickListener
from ui.settings import Header, Input, Divider, Switch
from ui.bulletin import BulletinHelper
from hook_utils import find_class, get_private_field
from org.telegram.messenger import LocaleController, AndroidUtilities, UserConfig, MessagesController, R, DialogObject, ChatObject
from java import dynamic_proxy
from android.view import View, Gravity, MotionEvent, HapticFeedbackConstants, ViewGroup
from android.os import Handler, Looper
from java.lang import Runnable, Boolean
from org.telegram.ui.ActionBar import ActionBarPopupWindow
from android.widget import LinearLayout, ScrollView, TextView
from org.telegram.ui.Components import BackupImageView, AvatarDrawable, LayoutHelper
from org.telegram.ui.ActionBar import Theme
from android.util import TypedValue
from android.text import TextUtils
from android.graphics.drawable import GradientDrawable
from android.widget import ImageButton, FrameLayout, ImageView
from java.lang import Class
from com.exteragram.messenger.plugins import PluginsController
from com.exteragram.messenger.plugins.ui import PluginSettingsActivity
from android.graphics import Color
import re
import time
import weakref

__min_version__ = "11.12.0"

ChatActivity_type = find_class("org.telegram.ui.ChatActivity")

def update_button_visibility(plugin: 'InvisibleBackButtonPlugin', is_action_mode_active: bool):
    try:
        fragment = get_last_fragment()
        if not isinstance(fragment, ChatActivity_type): return
        action_bar = fragment.getActionBar()
        if not action_bar: return
        button = action_bar.findViewById(plugin.MENU_ITEM_ID)
        if button:
            new_visibility = View.GONE if is_action_mode_active else View.VISIBLE
            if button.getVisibility() != new_visibility:
                run_on_ui_thread(lambda: button.setVisibility(new_visibility))
    except Exception as e:
        log(f"RecentsBackButton manage_button_state Error: {e}\n{traceback.format_exc()}")

class TouchListenerProxy(dynamic_proxy(View.OnTouchListener)):
    LONG_PRESS_TIMEOUT = 500
    def __init__(self, plugin: 'InvisibleBackButtonPlugin'):
        super().__init__()
        self.plugin = plugin
        self.handler = Handler(Looper.getMainLooper())
        self.long_press_runnable = None
        self.long_press_happened = False
        self.down_x = 0.0
        self.down_y = 0.0
        self.view_ref = None
    class LongPressRunnable(dynamic_proxy(Runnable)):
        def __init__(self, touch_listener_proxy):
            super().__init__()
            self.touch_listener_ref = weakref.ref(touch_listener_proxy)
        def run(self):
            touch_listener = self.touch_listener_ref()
            if touch_listener:
                if touch_listener.long_press_runnable is self:
                    view = touch_listener.view_ref() if touch_listener.view_ref else None
                    if view:
                        try: view.performHapticFeedback(HapticFeedbackConstants.LONG_PRESS)
                        except: pass
                    touch_listener.long_press_happened = True
                    touch_listener.plugin.show_recent_chats_popup()
    def onTouch(self, view, event):
        action = event.getAction()
        touch_slop = AndroidUtilities.getPixelsInCM(0.3, True)
        if action == MotionEvent.ACTION_DOWN:
            self.view_ref = weakref.ref(view)
            self.down_x = event.getX()
            self.down_y = event.getY()
            self.long_press_happened = False
            if self.long_press_runnable:
                self.handler.removeCallbacks(self.long_press_runnable)
            self.long_press_runnable = self.LongPressRunnable(self)
            self.handler.postDelayed(self.long_press_runnable, self.LONG_PRESS_TIMEOUT)
            return True
        elif action == MotionEvent.ACTION_MOVE:
            if abs(event.getX() - self.down_x) > touch_slop or abs(event.getY() - self.down_y) > touch_slop:
                if self.long_press_runnable:
                    self.handler.removeCallbacks(self.long_press_runnable)
                    self.long_press_runnable = None
            return True
        elif action == MotionEvent.ACTION_UP or action == MotionEvent.ACTION_CANCEL:
            timer_cancelled_now = False
            if self.long_press_runnable:
                self.handler.removeCallbacks(self.long_press_runnable)
                self.long_press_runnable = None
                timer_cancelled_now = True
            was_long_press = self.long_press_happened
            self.long_press_happened = False
            if was_long_press:
                return True
            else:
                self.plugin.go_back()
                return True
        return True

class ActionBarCreateMenuHook(MethodHook):
    def __init__(self, plugin: 'InvisibleBackButtonPlugin'):
        super().__init__()
        self.plugin = plugin
    def after_hooked_method(self, param: Any):
        action_bar = param.thisObject
        try:
            if not action_bar: return
            parent_fragment = get_private_field(action_bar, 'parentFragment')
            if not isinstance(parent_fragment, ChatActivity_type): return
            context = action_bar.getContext()
            if not context: return
            if action_bar.findViewById(self.plugin.MENU_ITEM_ID): return
            button = ImageButton(context)
            button.setImageResource(0)
            button.setBackground(None)
            button.setAlpha(0.01)
            button.setOnTouchListener(TouchListenerProxy(self.plugin))
            try:
                left_margin_dp = int(self.plugin.get_setting("button_pos_left", "0"))
                top_margin_dp = int(self.plugin.get_setting("button_pos_top", "42"))
                width_dp = int(self.plugin.get_setting("button_width", "56"))
                height_dp = int(self.plugin.get_setting("button_height", "56"))
            except (ValueError, TypeError):
                left_margin_dp, top_margin_dp = 0, 42
                width_dp, height_dp = 56, 56
            button_lp = FrameLayout.LayoutParams(AndroidUtilities.dp(width_dp), AndroidUtilities.dp(height_dp))
            button_lp.gravity = Gravity.START | Gravity.TOP
            button_lp.leftMargin = AndroidUtilities.dp(left_margin_dp)
            button_lp.topMargin = AndroidUtilities.dp(top_margin_dp)
            button.setId(self.plugin.MENU_ITEM_ID)
            action_bar.addView(button, button_lp)
            is_currently_in_action_mode = False
            try:
                selection_mode = get_private_field(parent_fragment, 'isSelectionMode')
                if selection_mode is not None:
                    is_currently_in_action_mode = bool(selection_mode)
            except Exception as e_gf:
                log(f"RecentsBackButton: Error getting 'isSelectionMode': {e_gf}")
            update_button_visibility(self.plugin, is_currently_in_action_mode)
        except Exception as e:
            log(f"RecentsBackButton CreateMenuHook Error: {e}\n{traceback.format_exc()}")

class ChatActivityShowActionModeHook(MethodHook):
    def __init__(self, plugin): super().__init__(); self.plugin = plugin
    def after_hooked_method(self, param: Any):
        update_button_visibility(self.plugin, True)

class ChatActivityCloseActionModeHook(MethodHook):
    def __init__(self, plugin): super().__init__(); self.plugin = plugin
    def after_hooked_method(self, param: Any):
        update_button_visibility(self.plugin, False)

class InvisibleBackButtonPlugin(BasePlugin):
    MENU_ITEM_ID = 7654322
    def __init__(self):
        super().__init__()
        self.log(f"RecentsBackButton Plugin: Loaded. Version: {__version__}")
    def on_plugin_load(self):
        try:
            ActionBar_java_class = Class.forName("org.telegram.ui.ActionBar.ActionBar")
            create_menu_method = next((m for m in ActionBar_java_class.getDeclaredMethods() if m.getName() == "createMenu" and not m.getParameterTypes()), None)
            if create_menu_method: self.hook_method(create_menu_method, ActionBarCreateMenuHook(self))
            show_action_mode_method = next((m for m in ChatActivity_type.getClass().getDeclaredMethods() if m.getName() == "showActionMode" and len(m.getParameterTypes()) == 2), None)
            if show_action_mode_method: self.hook_method(show_action_mode_method, ChatActivityShowActionModeHook(self))
            else: self.log("RecentsBackButton: Could not find showActionMode method to hook.")
            close_action_mode_method = next((m for m in ChatActivity_type.getClass().getDeclaredMethods() if m.getName() == "closeActionMode" and not m.getParameterTypes()), None)
            if close_action_mode_method: self.hook_method(close_action_mode_method, ChatActivityCloseActionModeHook(self))
            else: self.log("RecentsBackButton: Could not find closeActionMode method to hook.")
        except Exception as e:
            log(f"RecentsBackButton: Failed to hook methods: {e}\n{traceback.format_exc()}")

    def create_settings(self):
        settings_list = [
            Header(text="Настройки меню 'Недавние чаты'"),
            
            Divider(text="Кого показывать"),
            Switch(key="filter_users", text="Личные сообщения", default=True, icon="msg_user"),
            Switch(key="filter_groups", text="Группы", default=False, icon="msg_groups"),
            Switch(key="filter_channels", text="Каналы", default=False, icon="msg_channel"),
            Switch(key="filter_bots", text="Боты", default=False, icon="msg_bot"),
            
            Divider(text="Поведение списка"),
            Input(key="max_chats", text="Макс. чатов в списке", subtext="Меню станет прокручиваемым, если чатов больше ~5-6", default="5", icon="msg_list"),
            Switch(key="show_pinned", text="Закрепленные чаты всегда вверху", default=True, icon="msg_pin"),
            Switch(key="show_pin_icon", text="Показывать иконку 'Закреп'", default=True, icon="msg_pin"),
            Switch(key="hide_muted", text="Скрывать чаты с мьютом", default=False, icon="msg_mute"),
            Switch(key="show_only_unread", text="Показывать только с непрочитанными", default=False, icon="msg_unread"),
            Switch(key="hide_counter", text="Скрыть счетчик непрочитанных", default=False, icon="msg_played"),

            Divider(),
            Switch(key="fine_tuning_enabled", text="Режим тонкой настройки", default=False, icon="msg_settings"),
        ]
        
        if self.get_setting("fine_tuning_enabled", False):
            settings_list.extend([
                Header(text="Положение невидимой кнопки"),
                Input(key="button_pos_left", text="Отступ слева (в dp)", default="0", icon="msg_arrow_right"),
                Input(key="button_pos_top", text="Отступ сверху (в dp)", default="42", icon="msg_arrow_down"),
                Input(key="button_width", text="Ширина кнопки (в dp)", default="56", icon="msg_scale"),
                Input(key="button_height", text="Высота кнопки (в dp)", default="56", icon="msg_scale"),
                Divider(text="Положение и размер меню"),
                Input(key="popup_width", text="Ширина меню (в dp)", default="220", icon="msg_scale"),
                Input(key="popup_divider_height", text="Толщина разделителя (в dp)", default="8", subtext="(Жирность линии, 0 = убрать)", icon="msg_scale"),
                Input(key="popup_offset_x", text="Отступ меню по X (в dp)", default="1", icon="msg_arrow_right"),
                Input(key="popup_offset_y", text="Отступ меню по Y (в dp)", default="-52", icon="msg_arrow_down"),
            ])
            
        settings_list.append(Divider(text=f"{__name__} v{__version__} by @oodze"))
        return settings_list

    def go_back(self):
        log("Simulating back press via ActionBar...")
        fragment = get_last_fragment()
        if fragment:
            action_bar = None
            if hasattr(fragment, 'actionBar'):
                action_bar = getattr(fragment, 'actionBar', None)
            if not action_bar and hasattr(fragment, 'getActionBar'):
                try: action_bar = fragment.getActionBar()
                except Exception: action_bar = None
            if action_bar and hasattr(action_bar, 'onBackPressed'):
                try:
                    log("Calling ActionBar.onBackPressed()...")
                    action_bar.onBackPressed()
                    log("Called ActionBar.onBackPressed()")
                except Exception as e:
                    log(f"Error calling ActionBar.onBackPressed: {e}")
                    if hasattr(fragment, 'finishFragment'):
                        try:
                            log("ActionBar.onBackPressed failed, fallback to finishFragment()...")
                            fragment.finishFragment()
                        except Exception as e_ff: log(f"Error calling finishFragment as fallback: {e_ff}")
            elif hasattr(fragment, 'onBackPressed'):
                try:
                    log("ActionBar.onBackPressed not found, calling fragment.onBackPressed()...")
                    fragment.onBackPressed()
                    if hasattr(fragment, 'finishFragment'):
                       log("...and calling finishFragment() as fallback.")
                       fragment.finishFragment()
                except Exception as e: log(f"Error calling fragment.onBackPressed/finishFragment: {e}")
            else: log("Could not find onBackPressed method on ActionBar or Fragment.")
        else: log("Could not find fragment to simulate back press.")

    def show_recent_chats_popup(self, view: Optional[View] = None) -> bool:
        try:
            fragment = get_last_fragment()
            if not fragment: return False
            action_bar = fragment.getActionBar()
            if not action_bar: return False
            anchor = action_bar.findViewById(self.MENU_ITEM_ID)
            if not anchor: return False

            current_chat_dialog_id = getattr(fragment, 'getDialogId', lambda: 0)()
            current_account = UserConfig.selectedAccount
            mc = MessagesController.getInstance(current_account)
            dialogs_list = mc.getDialogs(0)
            
            try:
                MAX_CHATS = int(self.get_setting("max_chats", "5"))
            except:
                MAX_CHATS = 5
            
            show_users = self.get_setting("filter_users", True)
            show_groups = self.get_setting("filter_groups", False)
            show_channels = self.get_setting("filter_channels", False)
            show_bots = self.get_setting("filter_bots", False)
            
            show_pinned = self.get_setting("show_pinned", True)
            show_pin_icon = self.get_setting("show_pin_icon", True)
            hide_muted = self.get_setting("hide_muted", False)
            show_only_unread = self.get_setting("show_only_unread", False)
            hide_counter = self.get_setting("hide_counter", False)
            
            pinned_chats = []
            recent_chats = []
            
            log("Collecting and filtering recent chats...")
            for i in range(dialogs_list.size()):
                dialog = dialogs_list.get(i)
                dialog_id = dialog.id

                if dialog_id == current_chat_dialog_id:
                    continue
                
                if show_only_unread and dialog.unread_count == 0:
                    continue
                    
                if hide_muted and mc.isDialogMuted(dialog_id, 0):
                    continue

                user, chat = None, None
                is_user, is_group, is_channel, is_bot = False, False, False, False

                if DialogObject.isUserDialog(dialog_id):
                    user = mc.getUser(dialog_id)
                    if user:
                        is_user = True
                        if user.bot:
                            is_bot = True
                elif DialogObject.isChatDialog(dialog_id):
                    chat = mc.getChat(-dialog_id)
                    if chat:
                        if ChatObject.isChannel(chat) and not chat.megagroup:
                            is_channel = True
                        else:
                            is_group = True
                            
                if not user and not chat: continue
                if is_bot and not show_bots: continue
                if is_channel and not show_channels: continue
                if is_group and not show_groups: continue
                if is_user and not is_bot and not show_users: continue
                
                chat_name = ""
                chat_obj = None
                try:
                    UserObject = find_class("org.telegram.messenger.UserObject")
                    if user:
                        chat_name = UserObject.getUserName(user).strip()
                        chat_obj = user
                    elif chat:
                        chat_name = chat.title.strip()
                        chat_obj = chat
                except Exception as name_e:
                    log(f"RecentsBackButton: Error getting name for {dialog_id}: {name_e}")

                if chat_name and chat_obj:
                    chat_info = {
                        "id": dialog_id,
                        "name": chat_name,
                        "obj": chat_obj,
                        "unread": dialog.unread_count,
                        "is_pinned": dialog.pinned
                    }
                    if show_pinned and dialog.pinned:
                        pinned_chats.append(chat_info)
                    else:
                        recent_chats.append(chat_info)

            final_chat_list = (pinned_chats + recent_chats)[:MAX_CHATS]
            log(f"Collected {len(final_chat_list)} final chats.")

            if not final_chat_list:
                 log("No recent chats match filters, simulating back press.")
                 self.go_back()
                 run_on_ui_thread(lambda: BulletinHelper.show_info("Нет чатов, \nсоответствующих фильтрам", get_last_fragment()))
                 return True
            
            context = fragment.getParentActivity()
            if not context: return False

            popup_content = ActionBarPopupWindow.ActionBarPopupWindowLayout(context)
            popup_bg = GradientDrawable()
            popup_bg.setShape(GradientDrawable.RECTANGLE)
            popup_bg.setColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuBackground))
            popup_bg.setCornerRadius(AndroidUtilities.dp(8))
            popup_content.setBackground(popup_bg)
            popup_content.setPadding(0, AndroidUtilities.dp(4), 0, AndroidUtilities.dp(4))
            popup_ref = [None]
            
            header = FrameLayout(context)
            popup_back_button = ImageView(context)
            popup_back_button.setImageResource(R.drawable.ic_ab_back)
            popup_back_button.setColorFilter(Theme.getColor(Theme.key_actionBarDefaultSubmenuItemIcon))
            popup_back_button.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector), 2))
            popup_back_button.setPadding(AndroidUtilities.dp(14), 0, AndroidUtilities.dp(14), 0)
            def create_back_click(popup_ref):
                def handle_click(v):
                    popup = popup_ref[0]
                    if popup and popup.isShowing():
                        try: popup.dismiss()
                        except: pass
                return handle_click
            popup_back_button.setOnClickListener(OnClickListener(create_back_click(popup_ref)))
            header.addView(popup_back_button, LayoutHelper.createFrame(ViewGroup.LayoutParams.WRAP_CONTENT, 48, Gravity.START | Gravity.CENTER_VERTICAL))
            
            popup_title = TextView(context)
            popup_title.setText("Недавние чаты")
            popup_title.setTextColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuItem))
            popup_title.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16)
            popup_title.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"))
            title_params = LayoutHelper.createFrame(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.CENTER)
            title_params.setMargins(AndroidUtilities.dp(50), 0, AndroidUtilities.dp(50), 0)
            header.addView(popup_title, title_params)
            popup_content.addView(header, LayoutHelper.createLinear(ViewGroup.LayoutParams.MATCH_PARENT, 48))
            
            try:
                divider_height_dp = int(self.get_setting("popup_divider_height", "8"))
            except:
                divider_height_dp = 1
                
            if divider_height_dp > 0:
                divider = View(context)
                divider.setBackgroundColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuSeparator))
                divider_lp = LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, AndroidUtilities.dp(divider_height_dp))
                divider_lp.setMargins(0, 0, 0, AndroidUtilities.dp(4))
                popup_content.addView(divider, divider_lp)

            scroll_view = ScrollView(context)
            max_height = AndroidUtilities.dp(5.5 * 48)
            scroll_params = LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT)
            
            content_height = len(final_chat_list) * AndroidUtilities.dp(48)
            scroll_params.height = min(max_height, content_height) 
            
            list_container = LinearLayout(context)
            list_container.setOrientation(LinearLayout.VERTICAL)
            scroll_view.addView(list_container, FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT))
            popup_content.addView(scroll_view, scroll_params)

            for chat_data in final_chat_list:
                user_id = chat_data["id"]
                user_name = chat_data["name"]
                user_obj = chat_data["obj"]
                unread_count = chat_data["unread"]
                is_pinned = chat_data["is_pinned"]

                row = FrameLayout(context)
                row.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector), 2))
                row.setPadding(AndroidUtilities.dp(14), AndroidUtilities.dp(8), AndroidUtilities.dp(14), AndroidUtilities.dp(8))

                inner_layout = LinearLayout(context)
                inner_layout.setOrientation(LinearLayout.HORIZONTAL)
                inner_layout.setGravity(Gravity.CENTER_VERTICAL)
                row.addView(inner_layout, LayoutHelper.createFrame(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.START | Gravity.CENTER_VERTICAL))

                avatar = BackupImageView(context)
                avatar.setRoundRadius(AndroidUtilities.dp(16))
                avatar_drawable = AvatarDrawable(user_obj)
                avatar.setForUserOrChat(user_obj, avatar_drawable)
                inner_layout.addView(avatar, LayoutHelper.createLinear(32, 32))

                name = TextView(context)
                name.setText(user_name)
                name.setTextColor(Theme.getColor(Theme.key_actionBarDefaultSubmenuItem))
                name.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16)
                name.setLines(1)
                name.setMaxLines(1)
                name.setSingleLine(True)
                name.setEllipsize(TextUtils.TruncateAt.END)
                inner_layout.addView(name, LayoutHelper.createLinear(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.CENTER_VERTICAL, 12, 0, 56, 0))
                
                status_layout = LinearLayout(context)
                status_layout.setOrientation(LinearLayout.HORIZONTAL)
                status_layout.setGravity(Gravity.CENTER_VERTICAL)
                row.addView(status_layout, LayoutHelper.createFrame(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT, Gravity.END | Gravity.CENTER_VERTICAL))
                
                if is_pinned and show_pin_icon:
                    pin_icon = ImageView(context)
                    pin_icon.setImageResource(R.drawable.msg_pin)
                    pin_icon.setColorFilter(Theme.getColor(Theme.key_actionBarDefaultSubmenuItemIcon))
                    pin_lp = LinearLayout.LayoutParams(AndroidUtilities.dp(18), AndroidUtilities.dp(18))
                    pin_lp.rightMargin = AndroidUtilities.dp(4)
                    status_layout.addView(pin_icon, pin_lp)

                if unread_count > 0 and not hide_counter:
                    unread_badge = TextView(context)
                    unread_badge.setText(str(unread_count))
                    unread_badge.setTextColor(Theme.getColor(Theme.key_chats_unreadCounterText))
                    unread_badge.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 11)
                    unread_badge.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"))
                    unread_badge.setGravity(Gravity.CENTER)
                    
                    badge_drawable = GradientDrawable()
                    badge_drawable.setShape(GradientDrawable.RECTANGLE)
                    badge_drawable.setColor(Theme.getColor(Theme.key_chats_unreadCounter))
                    badge_drawable.setCornerRadius(AndroidUtilities.dp(9))
                    unread_badge.setBackground(badge_drawable)
                    
                    unread_badge.setMinWidth(AndroidUtilities.dp(18))
                    unread_badge.setHeight(AndroidUtilities.dp(18))
                    unread_badge.setPadding(AndroidUtilities.dp(5), 0, AndroidUtilities.dp(5), 0)
                    
                    status_layout.addView(unread_badge, LayoutHelper.createLinear(ViewGroup.LayoutParams.WRAP_CONTENT, 18, Gravity.CENTER_VERTICAL))

                def create_on_click(uid, popup_ref):
                    def handle_click(v):
                        log(f"Popup: Clicked on user ID: {uid}")
                        popup = popup_ref[0]
                        if popup and popup.isShowing():
                            try: popup.dismiss()
                            except: pass
                        frag = get_last_fragment()
                        if frag:
                            from android.os import Bundle
                            args = Bundle()
                            if uid < 0:
                                args.putLong("chat_id", -uid)
                            else:
                                args.putLong("user_id", uid)
                            ChatActivity = find_class("org.telegram.ui.ChatActivity")
                            current_dialog_id = getattr(frag, 'getDialogId', lambda: 0)()
                            if current_dialog_id != uid:
                                frag.presentFragment(ChatActivity(args))
                            else: log("Already in the selected chat.")
                    return handle_click
                row.setOnClickListener(OnClickListener(create_on_click(user_id, popup_ref)))
                list_container.addView(row, LayoutHelper.createLinear(ViewGroup.LayoutParams.MATCH_PARENT, 48))
                
            try:
                width_dp = int(self.get_setting("popup_width", "220"))
            except (ValueError, TypeError):
                width_dp = 220
                
            popup = ActionBarPopupWindow(popup_content, AndroidUtilities.dp(width_dp), ViewGroup.LayoutParams.WRAP_CONTENT)
            
            popup.setPauseNotifications(True)
            popup.setDismissAnimationDuration(220)
            popup.setOutsideTouchable(True)
            popup.setClippingEnabled(True)
            popup.setAnimationStyle(R.style.PopupContextAnimation)
            popup.setFocusable(True)
            popup_content.measure(View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000), View.MeasureSpec.AT_MOST),
                                 View.MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000), View.MeasureSpec.AT_MOST))
            popup.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED)
            popup.setSoftInputMode(0)
            popup.getContentView().setFocusableInTouchMode(True)
            popup_ref[0] = popup
            
            try:
                offset_x_dp = int(self.get_setting("popup_offset_x", "1"))
                offset_y_dp = int(self.get_setting("popup_offset_y", "-52"))
            except (ValueError, TypeError):
                offset_x_dp, offset_y_dp = 5, -8
                
            location = [0, 0]
            anchor.getLocationInWindow(location)
            popup_x = location[0] + AndroidUtilities.dp(offset_x_dp)
            popup_y = location[1] + anchor.getHeight() + AndroidUtilities.dp(offset_y_dp)

            popup.showAtLocation(fragment.getFragmentView(), Gravity.TOP | Gravity.LEFT, popup_x, popup_y)
            popup.dimBehind()

            return True
        except Exception as e:
            log(f"RecentsBackButton _show_recent_chats (popup) Error: {e}\n{traceback.format_exc()}")
            run_on_ui_thread(lambda: BulletinHelper.show_error("Ошибка показа меню (лог)", get_last_fragment()))
            return False
