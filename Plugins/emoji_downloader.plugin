__id__ = "emoji_downloader"
__name__ = "Emoji Downloader"
__description__ = "Easily download emojis and stickers by long-pressing on them in the context menu."
__author__ = "@PESSDES_Plugins"
__min_version__ = "11.12.1" 
__icon__ = "VoiceToText7/9"
__version__ = "1.1"

from base_plugin import BasePlugin, MethodHook
from hook_utils import find_class, get_private_field
from org.telegram.ui.ActionBar import ActionBarMenuSubItem, ActionBarMenuItem
from client_utils import get_last_fragment, get_file_loader
from org.telegram.messenger import MediaController, MessageObject, Utilities, LocaleController, AndroidUtilities
from ui.bulletin import BulletinHelper
from android_utils import log as logcat, OnClickListener
from java import dynamic_proxy
from java.lang import Runnable
from typing import Callable
from org.telegram.tgnet import TLRPC

SHOW_SHEET_RUNNABLE = find_class("org.telegram.ui.ContentPreviewViewer$1")

def get_surrounding_this(obj):
    return get_private_field(obj, "this$0")

def log(msg):
    logcat(f"[{__id__}] {msg}")

class Plugin(BasePlugin):
    def on_plugin_load(self):
        self.hook_runnable(SHOW_SHEET_RUNNABLE, ShowSheetRunnableHook())
    
    def hook_runnable(self, runnable, hook):
        method = runnable.getClass().getDeclaredMethod("run")
        self.hook_method(method, hook)

DIRECTORY_PICTURES = 0
DIRECTORY_VIDEO = 1
DIRECTORY_DOWNLOADS = 2
        
class ShowSheetRunnableHook(MethodHook):
    def after_hooked_method(self, param):
        viewer = get_surrounding_this(param.thisObject)
        if not viewer:
            return

        popup_window = get_private_field(viewer, "popupWindow")
        
        preview_menu = None
        if popup_window:
            preview_menu = popup_window.getContentView()
        else:
            preview_menu = get_private_field(viewer, "popupLayout")
        document = get_private_field(viewer, "currentDocument")
        
        if preview_menu and document:
            self.add_submenu(preview_menu, viewer, document)

    def add_submenu(self, preview_menu, viewer, document):
        resources_provider = get_private_field(viewer, "resourcesProvider")
        
        item = ActionBarMenuItem.addItem(
            preview_menu, 
            TelegramUtils.get_icon_id('msg_download'), 
            TelegramUtils.locale_string('AccActionDownload'), 
            False, 
            resources_provider)
        item.setOnClickListener(OnClickListener(lambda *_: self.download(viewer, document)))
        
        item = ActionBarMenuItem.addItem(
            preview_menu, 
            TelegramUtils.get_icon_id('msg_copy'), 
            'Copy ID', 
            False, 
            resources_provider)
        item.setOnClickListener(OnClickListener(lambda *_: self.copy_id(viewer, document)))

    def copy_id(self, viewer, document: TLRPC.Document):
        AndroidUtilities.addToClipboard(str(document.id))
        BulletinHelper.show_copied_to_clipboard()
        self.dismiss_popup(viewer)
        
    def download(self, viewer, document: TLRPC.Document):
        document.id
        try:
            file_path = get_file_loader().getPathToAttach(document, True)            
            isVideo = MessageObject.isVideoSticker(document)
            isPhoto = MessageObject.isStaticStickerDocument(document)
            isGif = MessageObject.isGifDocument(document)
            isTgs = document.mime_type == "application/x-tgsticker"
            
            fileType = DIRECTORY_DOWNLOADS if isTgs else DIRECTORY_VIDEO if isVideo or isGif else DIRECTORY_PICTURES if isPhoto else DIRECTORY_DOWNLOADS
            
            log(f"Downloading {file_path} (file type: {fileType}, mime type: {document.mime_type})")
            if file_path and file_path.exists():
                def on_success(*_):
                    if fileType == DIRECTORY_DOWNLOADS:
                        BulletinHelper.show_file_saved_to_downloads()
                    else:
                        BulletinHelper.show_file_saved_to_gallery(isVideo or isGif)

                MediaController.saveFile(file_path.toString(), get_last_fragment().getContext(), fileType, file_path.getName(), document.mime_type, CallbackFactory(on_success), False)
            else:
                get_file_loader().loadFile(document, document, 1, 0)
                BulletinHelper.show_error(TelegramUtils.locale_string('PleaseDownload'))
        except Exception as e:
            log(f"Error while downloading: {e}")
            BulletinHelper.show_error(TelegramUtils.locale_string('UnknownError'))
        finally:
            self.dismiss_popup(viewer)
    
    def dismiss_popup(self, viewer):
        method = viewer.getClass().getDeclaredMethod("dismissPopupWindow")
        method.setAccessible(True)
        method.invoke(viewer)

class RunnableFactory(dynamic_proxy(Runnable)):
    def __init__(self, fn: Callable):
        super().__init__()
        self.fn = fn
    
    def run(self):
        self.fn()

class CallbackFactory(dynamic_proxy(Utilities.Callback)):
    def __init__(self, fn: Callable):
        super().__init__()
        self.fn = fn
    
    def run(self, *args):
        self.fn(*args)

class TelegramUtils:
    @staticmethod
    def get_icon_id(name: str) -> int:
        context = get_last_fragment().getContext()
        return context.getResources().getIdentifier(name, "drawable", context.getPackageName())
    
    @staticmethod
    def get_locale_id(name: str) -> int:
        context = get_last_fragment().getContext()
        return context.getResources().getIdentifier(name, "string", context.getPackageName())
    
    @classmethod
    def locale_string(cls, name: str) -> str:
        return LocaleController.getString(cls.get_locale_id(name))