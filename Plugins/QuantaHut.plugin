
# Library for Quanta Plugins
# Also a big thanks to @zwyPlugins, We took some code snippets from zwylib


import json
import time
import copy
import threading
import traceback
import os.path
import tempfile
import urllib.request
from typing import List, Callable, Optional, Any
from dataclasses import dataclass

from base_plugin import BasePlugin, HookStrategy, MenuItemData, MenuItemType
from android_utils import log, run_on_ui_thread
from client_utils import get_last_fragment, run_on_queue
from ui.bulletin import BulletinHelper
from ui.settings import Divider, Header, Switch, Input, Text, Selector

from org.telegram.messenger import Utilities, AndroidUtilities, MediaDataController, ImageLocation
from com.exteragram.messenger.utils import ChatUtils
from java import dynamic_proxy, cast, jclass
from java.util import ArrayList
from java.lang import Integer
from org.telegram.messenger import MessageObject, R as R_tg
from org.telegram.ui import ChatActivity
from org.telegram.ui.ActionBar import BottomSheet, Theme, SimpleTextView
from android.view import HapticFeedbackConstants
from org.telegram.ui.Components import BackupImageView, LayoutHelper
from android.view import Gravity
from android.widget import LinearLayout, TextView, FrameLayout
from android.util import TypedValue
from hook_utils import find_class, get_private_field, set_private_field

__name__ = "QuantaHut"
__description__ = "Library for Quanta plugins"
__icon__ = "luvztroyIcons/14"
__id__ = "quantahut"
__version__ = "1.4.5"
__author__ = "@luvztroy"
__min_version__ = "11.12.1"
__priority__ = 1

DEFAULT_SHOW_LOGS = False
DEFAULT_SHOW_RESTART_MENU = False
DEFAULT_BRANCH = 0  
setting_getter = None


class QuantaHut(BasePlugin):
    def __init__(self):
        super().__init__()
        self.hook_refs = []
        self.available_languages = []
        self.current_language = "en"
        self.language_available = False
        self.localization_cache = github_localization.localization_cache
        self.restart_menu_item = None

    
    def log(self, message: str):
        if self.get_setting("show_logs", DEFAULT_SHOW_LOGS):
            log(f"[QuantaHut] {message}")
    
    def create_settings(self):
        return [
            Header(text=get_text("quantahut_configuration", "QuantaHut Configuration")),
            Switch(key="show_logs", text=get_text("enable_debug_logging_quantahut", "Enable Debug Logging"), default=DEFAULT_SHOW_LOGS, icon="menu_intro_solar"),
            Switch(key="show_restart_menu", text=get_text("quantahut_show_restart", "Show Restart in Drawer"), default=DEFAULT_SHOW_RESTART_MENU, icon="msg_retry", on_change=self._on_restart_toggle_changed),
            
            Selector(key="localization_branch", text=get_text("localization_branch", "Localization Branch"), items=[get_text("branch_main", "Main"), get_text("branch_beta", "Beta")], default=DEFAULT_BRANCH, icon="msg_folders"),
            
            Text(text=get_text("export_all_settings", "Export All Plugin Settings"), icon="msg_photo_rotate_solar", on_click=self._export_all_settings),
            
            Text(text=get_text("clear_file_cache", "Clear File Cache"), red=True, on_click=self._clear_file_cache, icon="msg_delete"),
            Text(text=get_text("reset_language_preference", "Reset Language Preference"), red=True, on_click=self._reset_language_preference, icon="msg_delete"),
            Divider(text=self._get_cache_info_text()),
        ]

    def on_plugin_load(self):
        self.log("Initializing QuantaHut...")
        global setting_getter
        setting_getter = self.get_setting

        self.custom_badges = {}
        self.badge_hook_ref = None
        self.developer_hook_ref = None
        self.extera_hook_ref = None
        self.TLRPC_User = None
        self.TLRPC_Chat = None
        
        self.setup_hooks()
        self._update_restart_menu_item()
        self._setup_quanta_file_hook()
        
        self._setup_deeplink_handling()
        
        self._check_language_availability_on_load()
        self._load_available_languages()
        
        self.log("QuantaHut initialized with GitHub-based system")

    def _check_language_availability_on_load(self):
        def check_availability():
            try:
                try:
                    from org.telegram.messenger import LocaleController
                    current_language = LocaleController.getInstance().getCurrentLocaleInfo().getLangCode()
                except:
                    current_language = "en"
                
                import urllib.request
                branch = self._get_selected_branch()
                github_url = f"https://raw.githubusercontent.com/luvztroy/UiTweaks/refs/heads/{branch}/UiTweaks%20{current_language}.json"
                
                try:
                    with urllib.request.urlopen(github_url) as response:
                        if response.getcode() == 200:
                            self.language_available = True
                            quantahut_log(f"Language {current_language} is available")
                        else:
                            self.language_available = False
                            quantahut_log(f"Language {current_language} is not available")
                except Exception as e:
                    self.language_available = False
                    if "404" in str(e) or "Not Found" in str(e):
                        quantahut_log(f"Language {current_language} is not available")
                    else:
                        quantahut_log(f"Language {current_language} is not available (network error: {e})")
            except Exception as e:
                self.language_available = False
                quantahut_log(f"Error checking language availability: {e}")
        
        import threading
        thread = threading.Thread(target=check_availability)
        thread.daemon = True
        thread.start()

    def _setup_deeplink_handling(self):
        try:
            LaunchActivity = find_class("org.telegram.ui.LaunchActivity")
            if LaunchActivity:
                method = LaunchActivity.getClass().getDeclaredMethod("handleIntent", 
                    find_class("android.content.Intent").getClass(),
                    find_class("java.lang.Boolean").TYPE,
                    find_class("java.lang.Boolean").TYPE,
                    find_class("java.lang.Boolean").TYPE,
                    find_class("org.telegram.messenger.browser.Browser$Progress").getClass(),
                    find_class("java.lang.Boolean").TYPE,
                    find_class("java.lang.Boolean").TYPE)
                method.setAccessible(True)
                self.hook_refs.append(self.hook_method(method, QuantaDeeplinkHook(self)))
        except Exception as e:
            self.log(f"Error setting up deeplink handling: {e}")

    def _get_selected_branch(self):
        branch_index = self.get_setting("localization_branch", DEFAULT_BRANCH)
        return "main" if branch_index == 0 else "Beta"
    
    def _on_restart_toggle_changed(self, enabled):
        try:
            self.set_setting("show_restart_menu", bool(enabled))
        except Exception:
            pass
        self._update_restart_menu_item()

    def _update_restart_menu_item(self):
        try:
            enabled = self.get_setting("show_restart_menu", DEFAULT_SHOW_RESTART_MENU)

            if enabled:
                if not self.restart_menu_item:
                    self.restart_menu_item = self.add_menu_item(MenuItemData(
                        menu_type=MenuItemType.DRAWER_MENU,
                        text=get_text("quantahut_restart_drawer", "Restart App"),
                        icon="msg_retry",
                        priority=150,
                        on_click=self._on_restart_menu_clicked,
                    ))
            else:
                if self.restart_menu_item:
                    self.remove_menu_item(self.restart_menu_item)
                    self.restart_menu_item = None
        except Exception:
            pass

    def _on_restart_menu_clicked(self, context):
        try:
            fragment = get_last_fragment()
            restart_app(fragment)
        except Exception as e:
            quantahut_log(f"Error restarting app: {e}")


    def _show_quanta_bottom_sheet(self):
        try:
            quantahut_log("Showing Quanta bottom sheet...")
            
            try:
                from org.telegram.messenger import LocaleController
                current_language = LocaleController.getInstance().getCurrentLocaleInfo().getLangCode()
            except:
                current_language = "en"
            
            try:
                from java.util import Locale
                locale = Locale(current_language)
                language_name = locale.getDisplayLanguage(locale)
            except:
                language_name = current_language.title()
            
            quantahut_log(f"Language detected: {current_language}")
            
            if hasattr(self, 'language_available') and self.language_available:
                branch = self._get_selected_branch()
                showupdatebottomsheet(
                    title=get_text("download_localization", "Download Localization"),
                    subtitle=get_text("current_language_detected", "Current language detected: {language}").format(language=current_language.lower()) if get_text("current_language_detected") else f"Current language detected: {current_language.lower()}",
                    description=get_text("unlock_uitweaks_description", "Unlock UiTweaks in {language} for a seamless experience.").format(language=language_name) if get_text("unlock_uitweaks_description") else f"Unlock UiTweaks in {language_name} for a seamless experience.",
                    github_url=f"https://raw.githubusercontent.com/luvztroy/UiTweaks/refs/heads/{branch}/UiTweaks%20{current_language}.json",
                    plugin_name="UiTweaks_Localization",
                    sticker_pack="luvztroyIcons",
                    sticker_index=13,
                    button_text=get_text("download", "Download"),
                    bottom_text=get_text("localization_bottom_text", "This process only happens once. After downloading, the files are saved locally to give you seamless access to UiTweaks in your language anytime."),
                    show_language_selector=False,
                    available_languages=self.available_languages
                )
            else:
                showupdatebottomsheet(
                    title=get_text("localization_not_available", "Localization Not Available"),
                    subtitle=get_text("current_language_detected", "Current language detected: {language}").format(language=current_language.lower()) if get_text("current_language_detected") else f"Current language detected: {current_language.lower()}",
                    description=get_text("localization_not_available_description", "UiTweaks localization for {language} is not available yet.").format(language=language_name) if get_text("localization_not_available_description") else f"UiTweaks localization for {language_name} is not available yet.",
                    github_url=None,
                    plugin_name="UiTweaks_Localization",
                    sticker_pack="luvztroyIcons",
                    sticker_index=13,
                    button_text=get_text("continue", "Continue"),
                    bottom_text=get_text("localization_continue_text", "You can still use UiTweaks in English, or select a different language from the language selector button."),
                    show_language_selector=True,
                    available_languages=self.available_languages
                )
            
        except Exception as e:
            quantahut_log(f"Error in _show_quanta_bottom_sheet: {e}")

    def setup_hooks(self):
        try:
            _ensure_message_menu_hooks(self)
            self._setup_custom_badges_hooks()
            self._setup_plugin_settings_search()
            
        except Exception as e:
            self.log(f"setup_hooks error: {str(e)}")

    def _setup_plugin_settings_search(self):
        try:
            plugin_settings_class = find_class("com.exteragram.messenger.plugins.ui.PluginSettingsActivity")
            if not plugin_settings_class:
                return
            
            context_class = find_class("android.content.Context")
            if context_class:
                try:
                    create_view_method = plugin_settings_class.getClass().getDeclaredMethod("createView", context_class.getClass())
                    create_view_method.setAccessible(True)
                    self.hook_refs.append(self.hook_method(create_view_method, _PluginSearchCreateViewHook(self)))
                except:
                    pass
            
            try:
                ArrayList = jclass("java.util.ArrayList")
                UniversalAdapter = jclass("org.telegram.ui.Components.UniversalAdapter")
                fill_items_method = plugin_settings_class.getClass().getDeclaredMethod("fillItems", ArrayList, UniversalAdapter)
                fill_items_method.setAccessible(True)
                self.hook_refs.append(self.hook_method(fill_items_method, _PluginSearchFillItemsHook(self)))
            except:
                pass
            
            try:
                UItem = jclass("org.telegram.ui.Components.UItem")
                View = jclass("android.view.View")
                on_long_click_method = plugin_settings_class.getClass().getDeclaredMethod("onLongClick", UItem, View, jclass("java.lang.Integer").TYPE, jclass("java.lang.Float").TYPE, jclass("java.lang.Float").TYPE)
                on_long_click_method.setAccessible(True)
                self.hook_refs.append(self.hook_method(on_long_click_method, _PluginSettingsLongClickHook(self)))
            except:
                pass
        except:
            pass

    def _clear_file_cache(self, view):
        github_localization.localization_cache.wipe()
        run_on_ui_thread(lambda: BulletinHelper.show_success("Cache cleared successfully"))

    def _reset_language_preference(self, view):
        try:
            from base_plugin import PluginsController
            from hook_utils import get_private_field
            from ui.bulletin import BulletinHelper
            prefs = get_private_field(PluginsController.getInstance(), "preferences")
            prefs.edit().remove("plugin_setting_ui_tweaks_selected_language").apply()
            run_on_ui_thread(lambda: BulletinHelper.show_success(get_text("language_pref_reset_success", "Language preference has been reset")))
        except Exception as e:
            try:
                from ui.bulletin import BulletinHelper
                run_on_ui_thread(lambda: BulletinHelper.show_error(get_text("language_pref_reset_failed", "Failed to reset language preference")))
            except Exception:
                pass
            quantahut_log(f"Error resetting language preference: {e}")

    def _get_cache_info_text(self):
        try:
            languages = set()
            string_count = 0
            for key in github_localization.localization_cache.content.keys():
                if key.endswith('_timestamp'):
                    lang = key.split('_')[-2] if '_' in key else 'unknown'
                    languages.add(lang)
                elif '_' in key and not key.endswith('_timestamp'):
                    string_count += 1
            
            info_parts = []
            
            if languages:
                formatted_langs = []
                for lang in sorted(languages):
                    try:
                        from java.util import Locale
                        locale = Locale(lang)
                        formatted_langs.append(locale.getDisplayLanguage(locale).title())
                    except:
                        formatted_langs.append(lang.upper())
                
                lang_text = ', '.join(formatted_langs)
                info_parts.append(get_text("cache_info", "Cached {count} strings across languages: {languages}").format(count=string_count, languages=lang_text))
            
            if not info_parts:
                return get_text("cache_info", "No cached data")
            
            return " | ".join(info_parts)
        except Exception as e:
            quantahut_log(f"Error getting cache info: {e}")
            return get_text("cache_info", "Cache status unavailable")

    def register_message_context_menu_item(self, *args, **kwargs):
        return utilities.register_message_menu_item(*args, **kwargs)

    def unregister_message_context_menu_item(self, handle):
        return utilities.unregister_message_menu_item(handle)


    def on_plugin_unload(self):
        for ref in self.hook_refs:
            if ref:
                try:
                    self.unhook_method(ref)
                except:
                    pass
        self.hook_refs.clear()
        
        if self.badge_hook_ref:
            self.unhook_method(self.badge_hook_ref)
            self.badge_hook_ref = None
        if self.developer_hook_ref:
            self.unhook_method(self.developer_hook_ref)
            self.developer_hook_ref = None
        if self.extera_hook_ref:
            self.unhook_method(self.extera_hook_ref)
            self.extera_hook_ref = None
        
        self.log("Plugin unloading...")

    def _setup_custom_badges_hooks(self):
        try:
            self._cache_classes()
            self._setup_badge_hook()
            self._load_custom_badges()
        except Exception as e:
            self.log(f"Error setting up custom badges hooks: {e}")
            
    def _cache_classes(self):
        try:
            self.TLRPC_User = find_class("org.telegram.tgnet.TLRPC$User")
            self.TLRPC_Chat = find_class("org.telegram.tgnet.TLRPC$Chat")
        except Exception as e:
            pass
            
    def _setup_badge_hook(self):
        try:
            BadgesController = find_class("com.exteragram.messenger.badges.BadgesController")
            if not BadgesController:
                return
                
            TLObject = find_class("org.telegram.tgnet.TLObject")
            method = BadgesController.getClass().getDeclaredMethod("getBadge", TLObject)
            method.setAccessible(True)
            
            self.badge_hook_ref = self.hook_method(method, CustomBadgeHook(self))
            
            TLRPC_User = find_class("org.telegram.tgnet.TLRPC$User")
            if TLRPC_User:
                is_developer_method = BadgesController.getClass().getDeclaredMethod("isDeveloper", TLRPC_User)
                is_developer_method.setAccessible(True)
                self.developer_hook_ref = self.hook_method(is_developer_method, CustomDeveloperHook(self))
            
            TLRPC_Chat = find_class("org.telegram.tgnet.TLRPC$Chat")
            if TLRPC_Chat:
                is_extera_method = BadgesController.getClass().getDeclaredMethod("isExtera", TLRPC_Chat)
                is_extera_method.setAccessible(True)
                self.extera_hook_ref = self.hook_method(is_extera_method, CustomExteraHook(self))
            
        except Exception as e:
            pass
            
    def _load_custom_badges(self):
        try:
            self.custom_badges.clear()
            import threading
            thread = threading.Thread(target=self._fetch_and_process_badges)
            thread.daemon = True
            thread.start()
        except Exception as e:
            pass
            
    def _fetch_and_process_badges(self):
        try:
            should_refresh = self._should_refresh_quantaconfig()
            badges_data = self._load_badges_from_config(force_refresh=should_refresh)
            if not badges_data:
                return
                
            BadgeDTO = find_class("com.exteragram.messenger.api.dto.BadgeDTO")
            if not BadgeDTO:
                return
                
            for badge_info in badges_data:
                badge_id = badge_info.get('id')
                user_id = badge_info.get('user_id')
                chat_id = badge_info.get('chat_id')
                emoji_id = badge_info.get('emoji_id')
                text_template = badge_info.get('text_template')
                
                if user_id and emoji_id and text_template:
                    user_name = self._get_user_name(user_id)
                    custom_text = text_template.format(user_name=user_name)
                    badge_dto = BadgeDTO(emoji_id, custom_text)
                    self.custom_badges[user_id] = badge_dto
                    
                elif chat_id and emoji_id and text_template:
                    chat_name = self._get_chat_name(chat_id)
                    custom_text = text_template.format(chat_name=chat_name)
                    badge_dto = BadgeDTO(emoji_id, custom_text)
                    self.custom_badges[chat_id] = badge_dto
                    
        except Exception as e:
            pass

    def _process_badges_from_data(self, badges_data):
        try:
            BadgeDTO = find_class("com.exteragram.messenger.api.dto.BadgeDTO")
            if not BadgeDTO:
                return
                
            for badge_info in badges_data:
                badge_id = badge_info.get('id')
                user_id = badge_info.get('user_id')
                chat_id = badge_info.get('chat_id')
                emoji_id = badge_info.get('emoji_id')
                text_template = badge_info.get('text_template')
                
                if user_id and emoji_id and text_template:
                    user_name = self._get_user_name(user_id)
                    custom_text = text_template.format(user_name=user_name)
                    badge_dto = BadgeDTO(emoji_id, custom_text)
                    self.custom_badges[user_id] = badge_dto
                    
                elif chat_id and emoji_id and text_template:
                    chat_name = self._get_chat_name(chat_id)
                    custom_text = text_template.format(chat_name=chat_name)
                    badge_dto = BadgeDTO(emoji_id, custom_text)
                    self.custom_badges[chat_id] = badge_dto
                    
        except Exception as e:
            pass
            
    def _load_badges_from_config(self, force_refresh=False):
        try:
            cache_key = "quantaconfig_badges"
            timestamp_key = "quantaconfig_timestamp"
            
            if not force_refresh:
                cached_badges = github_localization.get_text_template(cache_key)
                if cached_badges:
                    return json.loads(cached_badges)
            
            quantahut_log("Downloading QuantaConfig from GitHub...")
            branch = self._get_selected_branch()
            github_url = f"https://raw.githubusercontent.com/luvztroy/UiTweaks/refs/heads/{branch}/QuantaConfig.json"
            
            with urllib.request.urlopen(github_url, timeout=10) as response:
                raw_data = response.read().decode('utf-8')
                data = json.loads(raw_data)
                badges = data.get('badges', [])
                
                github_localization.cache_text_template(cache_key, json.dumps(badges))
                github_localization.cache_text_template(timestamp_key, str(time.time()))
                return badges
                
        except urllib.error.URLError as e:
            return []
        except json.JSONDecodeError as e:
            return []
        except Exception as e:
            return []

    def _should_refresh_quantaconfig(self, max_age_hours=6):
        try:
            timestamp_key = "quantaconfig_timestamp"
            cached_timestamp = github_localization.get_text_template(timestamp_key)
            
            if not cached_timestamp:
                return True
            
            cached_time = float(cached_timestamp)
            current_time = time.time()
            age_hours = (current_time - cached_time) / 3600
            
            if age_hours > max_age_hours:
                return True
            
            return False
            
        except Exception as e:
            quantahut_log(f"Error checking cache age: {e}")
            return True
            
    def _get_user_name(self, user_id):
        try:
            from client_utils import get_messages_controller
            from org.telegram.messenger import UserObject
            user_obj = get_messages_controller().getUser(user_id)
            return UserObject.getUserName(user_obj) if user_obj else 'this user'
        except Exception as e:
            return 'this user'
            
    def _get_chat_name(self, chat_id):
        try:
            from client_utils import get_messages_controller
            chat_obj = get_messages_controller().getChat(chat_id)
            return chat_obj.title if chat_obj and hasattr(chat_obj, 'title') else 'this chat'
        except Exception as e:
            return 'this chat'

    def _load_available_languages(self):
        if hasattr(self, '_languages_loading') and self._languages_loading:
            return
        if self.available_languages:
            return
            
        self._languages_loading = True
        
        def load_languages_background():
            try:
                import urllib.request, json, re
                with urllib.request.urlopen("https://api.github.com/repos/luvztroy/UiTweaks/contents/") as response:
                    data = json.loads(response.read().decode('utf-8'))
                    languages = []
                    for file_info in data:
                        if file_info.get('type') == 'file' and file_info.get('name', '').startswith('UiTweaks ') and file_info.get('name', '').endswith('.json'):
                            filename = file_info['name']
                            match = re.search(r'UiTweaks (.+)\.json$', filename)
                            if match:
                                lang_code = match.group(1)
                                try:
                                    from java.util import Locale
                                    locale = Locale(lang_code)
                                    display_name = locale.getDisplayLanguage(locale).title()
                                except:
                                    display_name = lang_code.upper()
                                languages.append({'code': lang_code, 'display_name': display_name})
                    languages.sort(key=lambda x: x['display_name'])
                    
                    from android_utils import run_on_ui_thread
                    def update_languages():
                        self.available_languages = languages
                        global available_languages
                        available_languages = languages
                        self._languages_loading = False
                        quantahut_log(f"Loaded {len(languages)} available languages")
                    run_on_ui_thread(update_languages)
            except Exception as e:
                quantahut_log(f"Error loading available languages: {e}")
                self._languages_loading = False
        
        import threading
        import time
        def delayed_load():
            time.sleep(0.5)
            load_languages_background()
        
        thread = threading.Thread(target=delayed_load)
        thread.daemon = True
        thread.start()

    def _setup_quanta_file_hook(self):
        try:
            from java.lang import Class
            from java import jclass
            AndroidUtilitiesClass = Class.forName("org.telegram.messenger.AndroidUtilities")
            MessageObjectClass = Class.forName("org.telegram.messenger.MessageObject")
            ActivityClass = Class.forName("android.app.Activity")
            ResourcesProviderClass = Class.forName("org.telegram.ui.ActionBar.Theme$ResourcesProvider")
            open_for_view = AndroidUtilitiesClass.getDeclaredMethod(
                "openForView",
                MessageObjectClass,
                ActivityClass,
                ResourcesProviderClass,
                jclass("java.lang.Boolean").TYPE,
            )
            open_for_view.setAccessible(True)
            class OpenForViewHook:
                def __init__(hook_self):
                    hook_self.plugin = self
                def before_hooked_method(hook_self, param):
                    try:
                        if len(param.args) >= 1:
                            msg = param.args[0]
                            if msg and hasattr(msg, "getDocumentName"):
                                name = msg.getDocumentName()
                                if name and str(name).lower().endswith(".backup"):
                                    hook_self.plugin._show_import_bottom_sheet(msg)
                                    param.setResult(False)
                    except Exception as e:
                        pass
            self.hook_refs.append(self.hook_method(open_for_view, OpenForViewHook()))
        except Exception as e:
            pass

    def _show_import_bottom_sheet(self, message_object):
        def show_sheet():
            try:
                from com.exteragram.messenger.utils import ChatUtils
                from file_utils import read_file
                from com.exteragram.messenger.plugins import PluginsController
                
                changes_count = 0
                try:
                    file_path = ChatUtils.getInstance().getPathToMessage(message_object)
                    if file_path:
                        content = read_file(file_path)
                        if content:
                            backup_data = json.loads(content)
                            all_settings = backup_data.get("plugins", {})
                            controller = PluginsController.getInstance()
                            
                            for plugin_id, plugin_data in all_settings.items():
                                if controller.plugins.containsKey(plugin_id):
                                    settings = plugin_data.get("settings", {})
                                    engine = controller.getPluginEngine(plugin_id)
                                    if engine and settings:
                                        current_settings = engine.getAllPluginSettings(plugin_id)
                                        for key, value in settings.items():
                                            current_value = current_settings.get(key) if current_settings else None
                                            if current_value != value:
                                                changes_count += 1
                except Exception:
                    changes_count = 1
                
                if changes_count == 0:
                    BulletinHelper.show_error(get_text("settings_same_as_current", "It looks like the settings are the same as the current ones."))
                    return
                
                subtitle = get_text("changes_will_be_applied_singular", "{count} change will be applied to the current settings.").format(count=changes_count) if changes_count == 1 else get_text("changes_will_be_applied_plural", "{count} changes will be applied to the current settings.").format(count=changes_count)
                
                def on_import_click():
                    self._import_from_message(message_object)
                
                showupdatebottomsheet(
                    title=get_text("apply_settings_confirmation", "Are you sure you want to apply these settings?"),
                    subtitle=subtitle,
                    button_text=get_text("yes_apply", "Yes, apply"),
                    button2_text=get_text("no_leave_as_is", "No, leave as is"),
                    show_close_button=False,
                    raw_resource=R_tg.raw.email_check_inbox,
                    on_button_click=on_import_click,
                    on_button2_click=lambda: None
                )
                
            except Exception as e:
                pass
        
        run_on_ui_thread(show_sheet)

    def _import_from_message(self, message_object):
        try:
            from com.exteragram.messenger.utils import ChatUtils
            from file_utils import read_file
            from com.exteragram.messenger.plugins import PluginsController
            
            file_path = ChatUtils.getInstance().getPathToMessage(message_object)
            if not file_path:
                return
            
            content = read_file(file_path)
            if not content:
                return
            
            backup_data = json.loads(content)
            all_settings = backup_data.get("plugins", {})
            controller = PluginsController.getInstance()
            imported_count = 0
            
            for plugin_id, plugin_data in all_settings.items():
                if controller.plugins.containsKey(plugin_id):
                    settings = plugin_data.get("settings", {})
                    engine = controller.getPluginEngine(plugin_id)
                    
                    if engine and settings:
                        for key, value in settings.items():
                            try:
                                engine.setPluginSetting(plugin_id, key, value)
                                imported_count += 1
                            except Exception:
                                pass
                        
                        controller.loadPluginSettings(plugin_id)
            
            BulletinHelper.show_success(get_text("imported_settings_from_plugins", "Imported settings from {count} plugins").format(count=len(all_settings)))
            
        except Exception as e:
            BulletinHelper.show_error(get_text("failed_to_import_settings", "Failed to import settings"))

    def _export_all_settings(self, view):
        export_all_plugin_settings()


class CustomBadgeHook:
    def __init__(self, plugin):
        self.plugin = plugin
        
    def after_hooked_method(self, param):
        try:
            tl_object = param.args[0]
            
            if self.plugin.TLRPC_User and isinstance(tl_object, self.plugin.TLRPC_User) and tl_object.id in self.plugin.custom_badges:
                custom_badge = self.plugin.custom_badges[tl_object.id]
                param.setResult(custom_badge)
                return custom_badge
                    
            if self.plugin.TLRPC_Chat and isinstance(tl_object, self.plugin.TLRPC_Chat) and tl_object.id in self.plugin.custom_badges:
                custom_badge = self.plugin.custom_badges[tl_object.id]
                param.setResult(custom_badge)
                return custom_badge
            
            return param.getResult()
        except:
            return param.getResult()


class CustomDeveloperHook:
    def __init__(self, plugin):
        self.plugin = plugin
        
    def after_hooked_method(self, param):
        try:
            if param.getResult():
                return True
            
            user = param.args[0]
            if user and hasattr(user, 'id') and user.id in self.plugin.custom_badges:
                param.setResult(True)
                return True
            
            return param.getResult()
        except:
            return param.getResult()


class CustomExteraHook:
    def __init__(self, plugin):
        self.plugin = plugin
        
    def after_hooked_method(self, param):
        try:
            if param.getResult():
                return True
            
            chat = param.args[0]
            if chat and hasattr(chat, 'id') and chat.id in self.plugin.custom_badges:
                param.setResult(True)
                return True
            
            return param.getResult()
        except:
            return param.getResult()


class QuantaDeeplinkHook:
    def __init__(self, plugin):
        self.plugin = plugin

    def before_hooked_method(self, param):
        try:
            if len(param.args) < 7:
                return
            intent = param.args[0]
            if not intent or intent.getAction() != "android.intent.action.VIEW":
                return
            data = intent.getData()
            if not data:
                return
            url = str(data)
            if url.startswith("tg:Quanta") or url.startswith("tg://Quanta") or url.startswith("tg:quanta") or url.startswith("tg://quanta"):
                run_on_ui_thread(self.plugin._show_quanta_bottom_sheet)
                param.setResult(None)
            elif url == "tg://restart":
                run_on_ui_thread(self._restart_app_direct)
                param.setResult(None)
            elif url == "tg://refresh":
                run_on_ui_thread(self._refresh_badges_direct)
                param.setResult(None)
        except Exception as e:
            self.plugin.log(f"Error in deeplink hook: {e}")

    def _restart_app_direct(self):
        restart_app()

    def _refresh_badges_direct(self):
        def refresh_callback():
            try:
                self.plugin.log("Force refreshing badges via tg://refresh")
                self.plugin.custom_badges.clear()
                badges_data = self.plugin._load_badges_from_config(force_refresh=True)
                if badges_data:
                    self.plugin._process_badges_from_data(badges_data)
                    self.plugin.log(f"Refreshed {len(self.plugin.custom_badges)} badges")
                    current_fragment = get_last_fragment()
                    BulletinHelper.show_success(get_text("refreshed_badges", "Refreshed {count} badges from QuantaConfig").format(count=len(self.plugin.custom_badges)), current_fragment)
                else:
                    self.plugin.log("No badges data received")
            except Exception as e:
                self.plugin.log(f"Error refreshing badges: {e}")
        
        import threading
        thread = threading.Thread(target=refresh_callback)
        thread.daemon = True
        thread.start()





class JsonCacheFile:
    cache_dir_name = os.path.join(os.path.dirname(os.path.realpath(__file__)), "cache")

    def __init__(self, filename: str, default: Any, read_on_init = True):
        self.filename = filename
        self.path = os.path.join(JsonCacheFile.cache_dir_name, filename)
        self.content = copy.copy(default)
        self.default = copy.copy(default)

        os.makedirs(JsonCacheFile.cache_dir_name, exist_ok=True)

        if read_on_init:
            self.read()

    def read(self) -> Any:
        try:
            with open(self.path) as file:
                self.content = json.load(file)
        except (json.JSONDecodeError, FileNotFoundError):
            self.wipe()
            return self.default
        else:
            return self.content

    def write(self):
        try:
            with open(self.path, "w") as file:
                json.dump(self.content, file)
        except PermissionError:
            quantahut_log("Permission error writing cache")
        except Exception as e:
            quantahut_log(f"Error writing cache: {str(e)}")

    def wipe(self):
        old_size = len(self.content)
        self.content = copy.copy(self.default)
        self.write()


class Callback1(dynamic_proxy(Utilities.Callback)):
    def __init__(self, fn: Callable[[Any], None]):
        super().__init__()
        self._fn = fn

    def run(self, arg):
        try:
            self._fn(arg)
        except Exception as e:
            quantahut_log(f"Callback error: {str(e)}")


class GitHubLocalization:
    def __init__(self):
        self.localization_cache = JsonCacheFile("quantahut_localization_cache", {})
        self.emoji_cache = JsonCacheFile("quantahut_emoji_cache", {})
        self.user_cache = JsonCacheFile("quantahut_user_cache", {})
        self.text_template_cache = JsonCacheFile("quantahut_text_template_cache", {})
    
    def _get_base_url(self):
        try:
            branch_index = setting_getter("localization_branch", DEFAULT_BRANCH) if setting_getter else DEFAULT_BRANCH
            branch = "main" if branch_index == 0 else "Beta"
            return f"https://raw.githubusercontent.com/luvztroy/UiTweaks/refs/heads/{branch}"
        except:
            return "https://raw.githubusercontent.com/luvztroy/UiTweaks/refs/heads/main"


    def get_localized_string(self, plugin_id: str, key: str, default: str = None) -> str:
        try:
            try:
                if plugin_id == "UiTweaks":
                    from base_plugin import PluginsController
                    from hook_utils import get_private_field
                    prefs = get_private_field(PluginsController.getInstance(), "preferences")
                    pref_lang = prefs.getString("plugin_setting_ui_tweaks_selected_language", None)
                else:
                    pref_lang = None
            except Exception:
                pref_lang = None
            if pref_lang:
                current_language = pref_lang
            else:
                from org.telegram.messenger import LocaleController
                current_language = LocaleController.getInstance().getCurrentLocaleInfo().getLangCode()
        except:
            current_language = "en"
        cache_key = f"{plugin_id}_{current_language}_{key}"
        
        cached_value = self.localization_cache.content.get(cache_key)
        if cached_value is not None:
            return cached_value
        
        return default or key
        
    def download_localization(self, plugin_id: str, language: str = "en"):
        try:
            import urllib.request
            import json
            base_url = self._get_base_url()
            with urllib.request.urlopen(f"{base_url}/{plugin_id}%20{language}.json") as response:
                data = json.loads(response.read().decode('utf-8'))
                
                cache_key = f"{plugin_id}_{language}"
                old_data = self.localization_cache.content.get(cache_key, {})
                
                if old_data == data:
                    return "no_changes_detected"
                
                if old_data:
                    changes = []
                    for key in set(data.keys()) | set(old_data.keys()):
                        if key not in old_data:
                            changes.append(f"+{key}")
                        elif key not in data:
                            changes.append(f"-{key}")
                        elif data[key] != old_data[key]:
                            changes.append(f"~{key}")
                    
                    if changes:
                        quantahut_log(f"Changes: {', '.join(changes[:10])}{'...' if len(changes) > 10 else ''}")
                else:
                    quantahut_log(f"First time caching {len(data)} keys")
                
                keys_to_remove = []
                for key in self.localization_cache.content.keys():
                    if key.startswith(f"{plugin_id}_") and not key.endswith('_timestamp') and not key == cache_key:
                        keys_to_remove.append(key)
                
                for key in keys_to_remove:
                    del self.localization_cache.content[key]
                
                self.localization_cache.content[cache_key] = data
                for trans_key, trans_value in data.items():
                    self.localization_cache.content[f"{plugin_id}_{language}_{trans_key}"] = trans_value
                
                self.localization_cache.content[f"{plugin_id}_{language}_timestamp"] = time.time()
                self.localization_cache.write()
                return "updated"
                
        except Exception as e:
            quantahut_log(f"Error downloading localization: {str(e)}")
            raise

    def get_emoji_id(self, emoji_name: str) -> str:
        cached = self.emoji_cache.content.get(emoji_name)
        if cached:
            return cached
        return None

    def cache_emoji_id(self, emoji_name: str, emoji_id: str):
        self.emoji_cache.content[emoji_name] = emoji_id
        self.emoji_cache.write()

    def get_user_id(self, username: str) -> str:
        cached = self.user_cache.content.get(username)
        if cached:
            return cached
        return None

    def cache_user_id(self, username: str, user_id: str):
        self.user_cache.content[username] = user_id
        self.user_cache.write()

    def get_text_template(self, template_name: str) -> str:
        cached = self.text_template_cache.content.get(template_name)
        if cached:
            return cached
        return None

    def cache_text_template(self, template_name: str, template_content: str):
        self.text_template_cache.content[template_name] = template_content
        self.text_template_cache.write()

github_localization = GitHubLocalization()

def get_localized_string(plugin_id: str, key: str, default: str = None) -> str:
    return github_localization.get_localized_string(plugin_id, key, default)

def download_localization(plugin_id: str, language: str = "en", force_refresh: bool = False):
    github_localization.download_localization(plugin_id, language, force_refresh)

def restart_app(fragment=None):
    try:
        from android.os import Process
        from android.content import Intent
        if fragment is None:
            fragment = get_last_fragment()
        if not fragment:
            return
        context = fragment.getContext()
        intent = context.getPackageManager().getLaunchIntentForPackage(context.getPackageName())
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK)
        context.startActivity(intent)
        Process.killProcess(Process.myPid())
    except Exception as e:
        quantahut_log(f"Error restarting app: {e}")

def show_restart_bulletin():
    try:
        from org.telegram.messenger import R as R_tg
        from ui.bulletin import BulletinHelper
        
        fragment = get_last_fragment()
        if not fragment:
                            return

        def _on_restart():
            restart_app(fragment)
        
        BulletinHelper.show_with_button(
            "Restart app to apply localization changes",
            R_tg.raw.chats_infotip,
            "Restart",
            _on_restart,
            fragment,
            10000
        )
        
    except Exception as e:
        pass

def export_plugin_settings(plugin_id, plugin_name="Plugin", version="1.0.0"):
    try:
        from file_utils import get_cache_dir
        from com.exteragram.messenger.plugins import PluginsController
        from org.telegram.messenger import Utilities, ApplicationLoader
        from java.io import File, FileOutputStream, OutputStreamWriter
        from java.nio.charset import StandardCharsets
        from android.content import Intent
        from android.net import Uri
        from org.telegram.ui import LaunchActivity
        from java.text import SimpleDateFormat
        from java.util import Date
        
        controller = PluginsController.getInstance()
        all_settings = {}
        
        if controller.plugins.containsKey(plugin_id):
            plugin = controller.plugins.get(plugin_id)
            engine = controller.getPluginEngine(plugin_id)
            if engine:
                settings = engine.getAllPluginSettings(plugin_id)
                if settings and not settings.isEmpty():
                    plugin_settings = {}
                    setting_keys = settings.keySet().toArray()
                    for key in setting_keys:
                        value = settings.get(key)
                        if value is not None:
                            plugin_settings[str(key)] = _convert_to_serializable(value)
                    
                    if plugin_settings:
                        all_settings[plugin_id] = {
                            "name": plugin.getName(),
                            "version": plugin.getVersion(),
                            "enabled": plugin.isEnabled(),
                            "settings": plugin_settings
                        }
        
        if not all_settings:
            return
        
        formatter = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
        backup_data = {
            "plugin": plugin_name,
            "version": version,
            "exported_at": formatter.format(Date()),
            "settings": all_settings.get(plugin_id, {}).get("settings", {})
        }
        
        cache_dir = get_cache_dir()
        random_str = Utilities.generateRandomString(4)
        backup_filename = f"backup-{random_str}.quanta"
        backup_file_path = os.path.join(cache_dir, backup_filename)
        
        backup_file = File(backup_file_path)
        if backup_file.exists():
            backup_file.delete()
        
        stream = FileOutputStream(backup_file)
        writer = OutputStreamWriter(stream, StandardCharsets.UTF_8)
        writer.write(json.dumps(backup_data, indent=2))
        writer.flush()
        writer.close()
        
        def open_telegram_share():
            try:
                context = ApplicationLoader.applicationContext
                file_uri = Uri.fromFile(backup_file)
                
                intent = Intent(context, LaunchActivity)
                intent.setAction(Intent.ACTION_SEND)
                intent.setType("application/octet-stream")
                intent.putExtra(Intent.EXTRA_STREAM, file_uri)
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                
                context.startActivity(intent)
            except Exception:
                pass
        
        run_on_ui_thread(open_telegram_share)
        
    except Exception as e:
        quantahut_log(f"Error exporting plugin settings: {e}")

def _has_sensitive_keys(all_settings):
    sensitive_keywords = ['api', 'key', 'token', 'secret', 'password', 'auth', 'credential']
    for plugin_settings in all_settings.values():
        for key in plugin_settings.get("settings", {}).keys():
            if any(kw in str(key).lower() for kw in sensitive_keywords):
                return True
    return False

def export_all_plugin_settings(include_sensitive=None):
    try:
        from file_utils import get_cache_dir
        from com.exteragram.messenger.plugins import PluginsController
        from org.telegram.messenger import Utilities, ApplicationLoader
        from java.io import File, FileOutputStream, OutputStreamWriter
        from java.nio.charset import StandardCharsets
        from android.content import Intent
        from android.net import Uri
        from org.telegram.ui import LaunchActivity
        from java.text import SimpleDateFormat
        from java.util import Date
        
        controller = PluginsController.getInstance()
        all_settings = {}
        exported_count = 0
        
        plugin_ids = controller.plugins.keySet().toArray()
        for plugin_id in plugin_ids:
            plugin = controller.plugins.get(plugin_id)
            engine = controller.getPluginEngine(plugin_id)
            if engine:
                settings = engine.getAllPluginSettings(plugin_id)
                if settings and not settings.isEmpty():
                    plugin_settings = {}
                    setting_keys = settings.keySet().toArray()
                    sensitive_keywords = ['api', 'key', 'token', 'secret', 'password', 'auth', 'credential']
                    for key in setting_keys:
                        value = settings.get(key)
                        if value is not None:
                            if include_sensitive == False and any(kw in str(key).lower() for kw in sensitive_keywords):
                                continue
                            plugin_settings[str(key)] = _convert_to_serializable(value)
                    
                    if plugin_settings:
                        all_settings[str(plugin_id)] = {
                            "name": plugin.getName(),
                            "version": plugin.getVersion(),
                            "enabled": plugin.isEnabled(),
                            "settings": plugin_settings
                        }
                        exported_count += 1
        
        if include_sensitive is None and _has_sensitive_keys(all_settings):
            from org.telegram.ui.ActionBar import AlertDialog
            from org.telegram.ui.Cells import CheckBoxCell
            fragment = get_last_fragment()
            if fragment:
                context = fragment.getParentActivity()
                builder = AlertDialog.Builder(context)
                builder.setTitle(get_text("export_warning_title", "Export Settings"))
                builder.setMessage(get_text("export_warning_message", "Some plugins contain sensitive data.Would you like to Include them?"))
                
                checkbox_cell = CheckBoxCell(context, 1)
                checkbox_cell.setBackgroundDrawable(Theme.getSelectorDrawable(False))
                checkbox_cell.setText(get_text("include_api_keys", "Include sensitive data"), "", False, False)
                
                OnClickInterface = find_class("android.view.View$OnClickListener")
                OnClick = dynamic_proxy(OnClickInterface)
                class CheckBoxClick(OnClick):
                    def onClick(self, v):
                        checkbox_cell.setChecked(not checkbox_cell.isChecked(), True)
                checkbox_cell.setOnClickListener(CheckBoxClick())
                
                frame = FrameLayout(context)
                frame.addView(checkbox_cell, LayoutHelper.createFrame(-1, 48, Gravity.BOTTOM | Gravity.LEFT, 0, 0, 0, 0))
                builder.setView(frame)
                
                OnButtonClickInterface = find_class("org.telegram.ui.ActionBar.AlertDialog$OnButtonClickListener")
                OnButtonClick = dynamic_proxy(OnButtonClickInterface)
                class ExportClick(OnButtonClick):
                    def onClick(self, dialog, which):
                        export_all_plugin_settings(include_sensitive=checkbox_cell.isChecked())
                
                builder.setPositiveButton(get_text("export", "Export"), ExportClick())
                builder.setNegativeButton(get_text("cancel", "Cancel"), None)
                run_on_ui_thread(lambda: builder.show())
            return
        
        formatter = SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
        backup_data = {
            "exported_at": formatter.format(Date()),
            "plugin_count": exported_count,
            "plugins": all_settings
        }
        
        cache_dir = get_cache_dir()
        random_str = Utilities.generateRandomString(4)
        backup_filename = f"Plugin Settings-{random_str}.backup"
        backup_file_path = os.path.join(cache_dir, backup_filename)
        
        backup_file = File(backup_file_path)
        if backup_file.exists():
            backup_file.delete()
        
        stream = FileOutputStream(backup_file)
        writer = OutputStreamWriter(stream, StandardCharsets.UTF_8)
        writer.write(json.dumps(backup_data, indent=2))
        writer.flush()
        writer.close()
        
        def open_telegram_share():
            try:
                context = ApplicationLoader.applicationContext
                file_uri = Uri.fromFile(backup_file)
                
                intent = Intent(context, LaunchActivity)
                intent.setAction(Intent.ACTION_SEND)
                intent.setType("application/octet-stream")
                intent.putExtra(Intent.EXTRA_STREAM, file_uri)
                intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)
                
                context.startActivity(intent)
            except Exception:
                pass
        
        run_on_ui_thread(open_telegram_share)
        
    except Exception as e:
        quantahut_log(f"Error exporting all plugin settings: {e}")

def _convert_to_serializable(value):
    if value is None:
        return None
    
    value_type = type(value).__name__
    
    if value_type in ['bool', 'int', 'float', 'str']:
        return value
    elif value_type == 'Boolean':
        return bool(value)
    elif value_type in ['Integer', 'Long']:
        return int(value)
    elif value_type == 'Float':
        return float(value)
    elif value_type == 'String':
        return str(value)
    else:
        try:
            return str(value)
        except:
            return None

__all__ = ("get_localized_string", "download_localization", "JsonCacheFile", "utilities", "hut", "showupdatebottomsheet", "show_restart_bulletin", "MultiSelectorBottomSheet", "export_plugin_settings", "export_all_plugin_settings")

class UpdateBottomSheet:
    def __init__(self, context, activity, fragment, available_languages=None, localization_cache=None):
        self.context = context
        self.activity = activity
        self.fragment = fragment
        self.bottom_sheet = None
        self.download_button = None
        self.language_selector_layout = None
        self.language_selector_inner_layout = None
        self.language_avatar_view = None
        self.language_selector_icon_view = None
        self.current_language = "en"
        self.available_languages = available_languages or []
        self.selected_github_url = None
        self.localization_cache = localization_cache
        self.status_text_view = None
        
    def _get_selected_branch(self):
        try:
            branch_index = setting_getter("localization_branch", DEFAULT_BRANCH) if setting_getter else DEFAULT_BRANCH
            return "main" if branch_index == 0 else "Beta"
        except:
            return "main"
    
    def _perform_haptic(self, host=None):
        try:
            root = None
            if host:
                get_pa = getattr(host, 'getParentActivity', None)
                if callable(get_pa):
                    act = get_pa()
                    if act:
                        root = act.getWindow().getDecorView()
                if root is None and hasattr(host, 'getWindow'):
                    root = host.getWindow().getDecorView()
            if root is None:
                cf = get_last_fragment()
                if cf:
                    act = cf.getParentActivity()
                    if act:
                        root = act.getWindow().getDecorView()
            if root:
                flags = HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING | HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING
                root.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP, flags)
        except Exception as e:
            pass
    
    def update_status(self, message):
        try:
            if self.status_text_view:
                self.status_text_view.setText(message)
                self.status_text_view.setVisibility(0) 
        except Exception as e:
            pass
   
    def _create_language_selector(self, frame_layout):
        try:
            from org.telegram.ui.Components import BackupImageView, LayoutHelper, ScaleStateListAnimator
            from org.telegram.ui.ActionBar import Theme
            from org.telegram.messenger import AndroidUtilities
            from android.widget import ImageView, FrameLayout
            from android.view import Gravity
            from android.graphics import PorterDuff, PorterDuffColorFilter
            from java import dynamic_proxy
            
            self.language_selector_layout = FrameLayout(self.context)
            self.language_selector_inner_layout = FrameLayout(self.context)
            
            self.language_avatar_view = BackupImageView(self.context)
            self.language_avatar_view.setRoundRadius(AndroidUtilities.dp(14))
            self.language_avatar_view.getImageReceiver().setCrossfadeWithOldImage(True)
            
            self.language_selector_icon_view = ImageView(self.context)
            self.language_selector_icon_view.setScaleType(ImageView.ScaleType.CENTER)
            self.language_selector_icon_view.setColorFilter(PorterDuffColorFilter(Theme.getColor(Theme.key_dialogTextGray3), PorterDuff.Mode.SRC_IN))
            self.language_selector_icon_view.setImageResource(R_tg.drawable.arrows_select)
            
            self.language_selector_inner_layout.addView(self.language_avatar_view, LayoutHelper.createFrame(20, 20, Gravity.LEFT | Gravity.CENTER_VERTICAL, 10, 0, 0, 0))
            self.language_selector_inner_layout.addView(self.language_selector_icon_view, LayoutHelper.createFrame(14, 14, Gravity.RIGHT | Gravity.CENTER_VERTICAL, 0, 0, 6, 0))
            
            self.language_selector_layout.addView(self.language_selector_inner_layout, LayoutHelper.createFrame(60, 32, Gravity.CENTER))
            self.language_selector_layout.setPadding(AndroidUtilities.dp(12), AndroidUtilities.dp(8), AndroidUtilities.dp(12), AndroidUtilities.dp(4))
            
            self._update_language_display()
            
            OnClickInterface = find_class("android.view.View$OnClickListener")
            OnClick = dynamic_proxy(OnClickInterface)
            class LanguageClickImpl(OnClick):
                def __init__(self, bottom_sheet_instance):
                    super().__init__()
                    self.bottom_sheet_instance = bottom_sheet_instance
                def onClick(self, v):
                    self.bottom_sheet_instance._show_language_menu()
            
            self.language_selector_layout.setOnClickListener(LanguageClickImpl(self))
            frame_layout.addView(self.language_selector_layout, LayoutHelper.createFrame(68, 40, Gravity.TOP | Gravity.START, 12, 12, 0, 0))
            ScaleStateListAnimator.apply(self.language_selector_layout)
        except Exception as e:
            quantahut_log(f"Error creating language selector: {e}")
            import traceback
            quantahut_log(f"Traceback: {traceback.format_exc()}")

    def _update_language_display(self):
        try:
            from org.telegram.ui.Components import AvatarDrawable
            from org.telegram.messenger import UserConfig
            
            current_user = UserConfig.getInstance(0).getCurrentUser()
            avatar_drawable = AvatarDrawable()
            avatar_drawable.setInfo(current_user)
            self.language_avatar_view.setForUserOrChat(current_user, avatar_drawable)
            quantahut_log("User avatar set in language selector")
        except Exception as e:
            quantahut_log(f"Error updating language display: {e}")

    def _show_language_menu(self):
        try:
            from android_utils import run_on_ui_thread
            def show_menu():
                try:
                    if not self.available_languages:
                        return
                    from org.telegram.ui.Components import ItemOptions, LayoutHelper
                    from android.view import Gravity, View
                    from java import dynamic_proxy
                    from org.telegram.messenger import R as R_tg
                    from org.telegram.messenger import AndroidUtilities
                    from org.telegram.ui.ActionBar import ActionBarPopupWindow, ActionBarMenuSubItem, Theme

                    i = ItemOptions.makeOptions(self.bottom_sheet.containerView, self.fragment.getResourceProvider(), self.language_selector_inner_layout, False)
                    try:
                        i.useScrollView = True
                    except Exception:
                        pass
                    popup_layout = ActionBarPopupWindow.ActionBarPopupWindowLayout(self.context, R_tg.drawable.popup_fixed_alert2, self.fragment.getResourceProvider())
                    try:
                        popup_layout.setFitItems(True)
                    except Exception:
                        pass

                    popup_window = ActionBarPopupWindow(popup_layout, -2, -2)
                    popup_window.setOutsideTouchable(True)
                    popup_window.setClippingEnabled(False)
                    popup_window.setAnimationStyle(R_tg.style.PopupContextAnimation)
                    popup_window.setFocusable(True)
                    popup_window.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED)
                    popup_window.setSoftInputMode(0)
                    try:
                        popup_window.setHeight(AndroidUtilities.dp(300))
                    except Exception:
                        pass

                    for lang_info in self.available_languages:
                        sub_item = ActionBarMenuSubItem(self.context, False, False, self.fragment.getResourceProvider())
                        sub_item.setPadding(AndroidUtilities.dp(18), 0, AndroidUtilities.dp(18), 0)
                        sub_item.setText(str(lang_info['display_name']))
                        sub_item.setColors(Theme.getColor(Theme.key_actionBarDefaultSubmenuItem), Theme.getColor(Theme.key_actionBarDefaultSubmenuItemIcon))
                        sub_item.setSelectorColor(Theme.multAlpha(Theme.getColor(Theme.key_actionBarDefaultSubmenuItem), 0.12))

                        RunnableInterface = find_class("java.lang.Runnable")
                        Runnable = dynamic_proxy(RunnableInterface)
                        class LanguageRunnable(Runnable):
                            def __init__(self, bottom_sheet_instance, lang_code, lang_display):
                                super().__init__()
                                self.bottom_sheet_instance = bottom_sheet_instance
                                self.lang_code = lang_code
                                self.lang_display = lang_display
                            def run(self):
                                self.bottom_sheet_instance._select_language(self.lang_code, self.lang_display)
                        callback = LanguageRunnable(self, lang_info['code'], lang_info['display_name'])

                        from android_utils import OnClickListener
                        sub_item.setOnClickListener(OnClickListener(lambda *args, cb=callback, pw=popup_window: (pw.dismiss(), cb.run())))
                        popup_layout.addView(sub_item, LayoutHelper.createLinear(-1, -2))

                    popup_window.showAsDropDown(self.language_selector_inner_layout, 0, -AndroidUtilities.dp(6))
                except Exception as e:
                    quantahut_log(f"Error showing language menu: {e}")
            run_on_ui_thread(show_menu)
        except Exception as e:
            quantahut_log(f"Error in _show_language_menu: {e}")

    def _select_language(self, lang_code, lang_display):
        try:
            from android_utils import run_on_ui_thread
            def update_language():
                try:
                    self.current_language = lang_code
                    branch = self._get_selected_branch()
                    self.selected_github_url = f"https://raw.githubusercontent.com/luvztroy/UiTweaks/refs/heads/{branch}/UiTweaks%20{lang_code}.json"
                    self._update_language_display()
                    self._store_selected_language_preference(lang_code)
                    if self.download_button:
                        self.download_button.setText(f"Download {lang_display}")
                    quantahut_log(f"Selected language: {lang_code} ({lang_display})")
                except Exception as e:
                    quantahut_log(f"Error updating language UI: {e}")
            run_on_ui_thread(update_language)
        except Exception as e:
            quantahut_log(f"Error in _select_language: {e}")
    
    def _store_selected_language_preference(self, lang_code):
        try:
            from base_plugin import PluginsController
            from hook_utils import get_private_field
            prefs = get_private_field(PluginsController.getInstance(), "preferences")
            prefs.edit().putString("plugin_setting_ui_tweaks_selected_language", lang_code).apply()
            quantahut_log(f"Stored selected language preference: {lang_code}")
        except Exception as e:
            quantahut_log(f"Error storing language preference: {e}")

    def _load_sticker_avatar(self, avatar_image_view, sticker_pack_name: str, sticker_index_to_use: int):
        try:
            try:
                current_account = self.fragment.getCurrentAccount()
            except Exception:
                current_account = 0

            media_controller = MediaDataController.getInstance(current_account)
            if media_controller is None:
                quantahut_log("MediaDataController is None, cannot load sticker")
                return

            sticker_set = media_controller.getStickerSetByName(sticker_pack_name)
            if sticker_set and sticker_set.documents and sticker_set.documents.size() > sticker_index_to_use:
                sticker_document = sticker_set.documents.get(sticker_index_to_use)
                image_location = ImageLocation.getForDocument(sticker_document)
                avatar_image_view.setImage(image_location, "90_90", None, 0, sticker_document)
                quantahut_log(f"Sticker loaded from cache: {sticker_pack_name} (account {current_account})")
                return
            quantahut_log(f"Sticker cache miss: {sticker_pack_name}, requesting set; will update on response")

            try:
                from org.telegram.tgnet import TLRPC
                input_set = TLRPC.TL_inputStickerSetShortName()
                input_set.short_name = sticker_pack_name

                def _on_set_response(result):
                    try:
                        if result and result.documents and result.documents.size() > sticker_index_to_use:
                            doc = result.documents.get(sticker_index_to_use)
                            img_loc = ImageLocation.getForDocument(doc)
                            run_on_ui_thread(lambda: avatar_image_view.setImage(img_loc, "90_90", None, 0, doc))
                            quantahut_log(f"Sticker loaded after fetch: {sticker_pack_name}")
                    except Exception as _e_inner:
                        quantahut_log(f"Error applying fetched sticker: {_e_inner}")

                media_controller.getStickerSet(input_set, None, False, Callback1(_on_set_response))
            except Exception as _e_fetch:
                quantahut_log(f"Error requesting sticker set '{sticker_pack_name}': {_e_fetch}")
        except Exception as e:
            quantahut_log(f"Error in _load_sticker_avatar: {e}")

    def create_bottom_sheet(self, title, subtitle=None, description=None, github_url=None, plugin_name=None, sticker_pack=None, sticker_index=None, raw_resource=None, button_text="Download", button2_text=None, bottom_text=None, show_close_button=True, show_language_selector=False, show_user_avatar=False, on_button_click=None, on_button2_click=None, on_sticker_long_click=None):
        from org.telegram.ui.ActionBar import BottomSheet
        from org.telegram.ui.Components import LayoutHelper
        from org.telegram.messenger import AndroidUtilities
        from android.widget import LinearLayout, TextView, ImageView, FrameLayout
        from android.view import Gravity
        from android.graphics import Typeface
        from android.util import TypedValue
        from androidx.core.widget import NestedScrollView
        from org.telegram.ui.ActionBar import Theme
        
        
        try:
            from org.telegram.messenger import LocaleController
            self.current_language = LocaleController.getInstance().getCurrentLocaleInfo().getLangCode()
        except:
            self.current_language = "en"
        
        self.bottom_sheet = BottomSheet(self.context, False, self.fragment.getResourceProvider())
        self.bottom_sheet.setApplyBottomPadding(False)
        self.bottom_sheet.setApplyTopPadding(False)
        self.bottom_sheet.fixNavigationBar(Theme.getColor(Theme.key_windowBackgroundWhite))
        
        linear_layout = LinearLayout(self.context)
        linear_layout.setOrientation(LinearLayout.VERTICAL)
        linear_layout.setClickable(True)
        
        frame_layout = FrameLayout(self.context)
        frame_layout.addView(linear_layout)
        
        scroll_view = NestedScrollView(self.context)
        scroll_view.addView(frame_layout)
        self.bottom_sheet.setCustomView(scroll_view)
        
        OnClickInterface = find_class("android.view.View$OnClickListener")
        OnClick = dynamic_proxy(OnClickInterface)
        
        if show_close_button:
            close_view = ImageView(self.context)
            close_view.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector)))
            close_view.setColorFilter(Theme.getColor(Theme.key_sheet_other))
            close_view.setImageResource(R_tg.drawable.ic_layer_close)
            class CloseClickImpl(OnClick):
                def __init__(self, bottom_sheet):
                    super().__init__()
                    self.bottom_sheet = bottom_sheet
                def onClick(self, v):
                    self.bottom_sheet.dismiss()
            close_view.setOnClickListener(CloseClickImpl(self.bottom_sheet))
            close_padding = AndroidUtilities.dp(8)
            close_view.setPadding(close_padding, close_padding, close_padding, close_padding)
            frame_layout.addView(close_view, LayoutHelper.createFrame(36, 36, Gravity.TOP | Gravity.END, 6, 8, 8, 0))
        
        if show_language_selector:
            self._create_language_selector(frame_layout)
        
        from org.telegram.ui.Components import BackupImageView
        avatar_image_view = BackupImageView(self.context)
        avatar_image_view.setRoundRadius(AndroidUtilities.dp(45))
        
        if on_sticker_long_click:
            OnLongClickInterface = find_class("android.view.View$OnLongClickListener")
            OnLongClick = dynamic_proxy(OnLongClickInterface)
            class StickerLongClickImpl(OnLongClick):
                def __init__(self, callback, bottom_sheet_instance):
                    super().__init__()
                    self.callback = callback
                    self.bottom_sheet_instance = bottom_sheet_instance
                def onLongClick(self, v):
                    try:
                        self.bottom_sheet_instance._perform_haptic()
                        if callable(self.callback):
                            self.callback(self.bottom_sheet_instance)
                        return True
                    except Exception as e:
                        return False
            avatar_image_view.setOnLongClickListener(StickerLongClickImpl(on_sticker_long_click, self))
        
        linear_layout.addView(avatar_image_view, LayoutHelper.createLinear(90, 90, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 0, 27, 0, 0))
        
        try:
            if show_user_avatar:
                from org.telegram.ui.Components import AvatarDrawable
                from org.telegram.messenger import UserConfig
                
                current_user = UserConfig.getInstance(0).getCurrentUser()
                avatar_drawable = AvatarDrawable()
                avatar_drawable.setInfo(current_user)
                avatar_image_view.setForUserOrChat(current_user, avatar_drawable)
                quantahut_log("User avatar loaded successfully")
            elif raw_resource:
                from org.telegram.ui.Components import RLottieImageView
                lottie_view = RLottieImageView(self.context)
                lottie_view.setAnimation(raw_resource, 144, 144)
                lottie_view.playAnimation()
                linear_layout.removeView(avatar_image_view)
                linear_layout.addView(lottie_view, LayoutHelper.createLinear(144, 144, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 0, 16, 0, 0))
                quantahut_log(f"Raw resource loaded: {raw_resource}")
            elif sticker_pack:
                sticker_pack_name = sticker_pack
                sticker_index_to_use = sticker_index if sticker_index is not None else 0
                self._load_sticker_avatar(avatar_image_view, sticker_pack_name, sticker_index_to_use)
            else:
                quantahut_log("No sticker pack or raw resource specified, avatar will remain empty")
        except Exception as e:
            quantahut_log(f"Error setting avatar: {str(e)}")
        
        title_text_view = TextView(self.context)
        title_text_view.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"))
        title_text_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20)
        title_text_view.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteBlackText))
        title_text_view.setText(title)
        title_text_view.setGravity(Gravity.CENTER_HORIZONTAL)
        linear_layout.addView(title_text_view, LayoutHelper.createLinear(-1, -2, 0, 40, 20, 40, 0))
        
        if subtitle:
            subtitle_text_view = TextView(self.context)
            subtitle_text_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14)
            subtitle_text_view.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText))
            subtitle_text_view.setText(subtitle)
            subtitle_text_view.setGravity(Gravity.CENTER_HORIZONTAL)
            linear_layout.addView(subtitle_text_view, LayoutHelper.createLinear(-1, -2, 0, 21, 15, 21, 8))
        
        if description:
            description_text_view = TextView(self.context)
            description_text_view.setGravity(Gravity.CENTER)
            description_text_view.setText(description)
            description_text_view.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
            description_text_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 15)
            linear_layout.addView(description_text_view, LayoutHelper.createLinear(-1, -2, Gravity.TOP, 24, 10, 24, 20))
        
        self.download_button = TextView(self.context)
        self.download_button.setBackground(Theme.createSimpleSelectorRoundRectDrawable(
            AndroidUtilities.dp(8), 
            Theme.getColor(Theme.key_featuredStickers_addButton), 
            Theme.getColor(Theme.key_featuredStickers_addButtonPressed)
        ))
        self.download_button.setGravity(Gravity.CENTER)
        self.download_button.setSingleLine(True)
        current_lang_display = "English"
        try:
            for lang in self.available_languages:
                if lang['code'] == self.current_language:
                    current_lang_display = lang['display_name']
                    break
        except:
            pass
        
        initial_button_text = f"{button_text} {current_lang_display}" if github_url else button_text
        self.download_button.setText(initial_button_text)
        self.download_button.setTextColor(Theme.getColor(Theme.key_featuredStickers_buttonText))
        self.download_button.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14)
        self.download_button.setTypeface(AndroidUtilities.bold())
        class DownloadClickImpl(OnClick):
            def __init__(self, bottom_sheet_instance, custom_callback=None):
                super().__init__()
                self.bottom_sheet_instance = bottom_sheet_instance
                self.custom_callback = custom_callback
            def onClick(self, v):
                if self.custom_callback:
                    self.custom_callback()
                    if self.bottom_sheet_instance.bottom_sheet:
                        self.bottom_sheet_instance.bottom_sheet.dismiss()
                else:
                    self.bottom_sheet_instance._on_download_click(github_url, plugin_name)
        self.download_button.setOnClickListener(DownloadClickImpl(self, on_button_click))
        linear_layout.addView(self.download_button, LayoutHelper.createLinear(-1, 48, Gravity.START, 14, 0, 14, 14))
        
        if button2_text and on_button2_click:
            from org.telegram.ui.Stories.recorder import ButtonWithCounterView
            button2 = ButtonWithCounterView(self.context, False, self.fragment.getResourceProvider())
            button2.setText(button2_text, False)
            class Button2ClickImpl(OnClick):
                def __init__(self, bottom_sheet_instance, callback):
                    super().__init__()
                    self.bottom_sheet_instance = bottom_sheet_instance
                    self.callback = callback
                def onClick(self, v):
                    if self.callback:
                        self.callback()
                    if self.bottom_sheet_instance.bottom_sheet:
                        self.bottom_sheet_instance.bottom_sheet.dismiss()
            button2.setOnClickListener(Button2ClickImpl(self, on_button2_click))
            linear_layout.addView(button2, LayoutHelper.createLinear(-1, 48, Gravity.START, 14, 0, 14, 14))
        
        if bottom_text:
            disclaimer_text_view = TextView(self.context)
            disclaimer_text_view.setGravity(Gravity.CENTER)
            disclaimer_text_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14)
            disclaimer_text_view.setText(bottom_text)
            disclaimer_text_view.setTextColor(Theme.getColor(Theme.key_dialogTextGray3))
            linear_layout.addView(disclaimer_text_view, LayoutHelper.createLinear(-1, -2, Gravity.TOP, 24, 17, 24, 15))
        
        self.status_text_view = TextView(self.context)
        self.status_text_view.setGravity(Gravity.CENTER)
        self.status_text_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 12)
        self.status_text_view.setTextColor(Theme.getColor(Theme.key_dialogTextGray3))
        self.status_text_view.setVisibility(8)
        linear_layout.addView(self.status_text_view, LayoutHelper.createLinear(-1, -2, Gravity.TOP, 0, 0, 0, 10))
    
    def _on_download_click(self, github_url, plugin_name):
        quantahut_log("Download button clicked!")
        
        download_url = self.selected_github_url or github_url
        
        if download_url is None:
            quantahut_log("Localization not available, storing user choice to continue in English")
            self._store_continue_english_choice(plugin_name)
            self.bottom_sheet.dismiss()
            return
        
        self._show_loading_state()
        self._download_and_cache_plugin(download_url, plugin_name)
    
    def _store_continue_english_choice(self, plugin_name):
        try:
            from java.util import Locale
            current_language = Locale.getDefault().getLanguage()
            
            if plugin_name == "UiTweaks_Localization":
                continue_english_key = f"continue_english_{current_language}"
                from base_plugin import PluginsController
                prefs = get_private_field(PluginsController.getInstance(), "preferences")
                prefs.edit().putBoolean(f"plugin_setting_ui_tweaks_{continue_english_key}", True).apply()
                quantahut_log(f"Stored continue in English choice for {current_language}")
        except Exception as e:
            quantahut_log(f"Error storing continue English choice: {e}")
    
    def _show_loading_state(self):
        if self.download_button:
            self.download_button.setText("Downloading...")
            self.download_button.setEnabled(False)
    
    def _download_and_cache_plugin(self, github_url, plugin_name):
        def download_callback():
            try:
                quantahut_log(f"Downloading localization from: {github_url}")
                
                language = self.current_language
                
                result = github_localization.download_localization("UiTweaks", language)
                
                if result == "no_update_needed":
                    quantahut_log(f"No update needed for language: {language}")
                    run_on_ui_thread(lambda: self._show_no_update_state())
                elif result == "no_changes_detected":
                    quantahut_log(f"No changes detected for language: {language}")
                    run_on_ui_thread(lambda: self._show_no_changes_state())
                elif result == "updated":
                    quantahut_log(f"Localization updated for language: {language}")
                    run_on_ui_thread(lambda: self._show_success_state())
                else:
                    quantahut_log(f"Localization cached for language: {language}")
                    run_on_ui_thread(lambda: self._show_success_state())
                
            except Exception as e:
                error_message = str(e)
                quantahut_log(f"Error downloading localization: {error_message}")
                run_on_ui_thread(lambda: self._show_error_state(f"Download failed: {error_message}"))
        
        import threading
        thread = threading.Thread(target=download_callback)
        thread.daemon = True
        thread.start()
    
    def _show_success_state(self):
        if self.download_button:
            self.download_button.setText("Cached!")
            self.download_button.setEnabled(False)
        
        def dismiss_delayed():
            run_on_ui_thread(lambda: self.bottom_sheet.dismiss())
            run_on_ui_thread(lambda: show_restart_bulletin())
        import threading
        timer = threading.Timer(2.0, dismiss_delayed)
        timer.start()
    
    def _show_error_state(self, error_message):
        if self.download_button:
            self.download_button.setText("Retry")
            self.download_button.setEnabled(True)
        quantahut_log(f"Error: {error_message}")
    
    def _show_no_update_state(self):
        if self.download_button:
            self.download_button.setText("No Update Needed")
            self.download_button.setEnabled(False)
        
        def dismiss_delayed():
            run_on_ui_thread(lambda: self.bottom_sheet.dismiss())
        
        import threading
        timer = threading.Timer(2.0, dismiss_delayed)
        timer.start()
    
    def _show_no_changes_state(self):
        if self.download_button:
            self.download_button.setText("Already Up to Date")
            self.download_button.setEnabled(False)
        
        def dismiss_delayed():
            run_on_ui_thread(lambda: self.bottom_sheet.dismiss())
        
        import threading
        timer = threading.Timer(2.0, dismiss_delayed)
        timer.start()
    
    def show(self):
        if self.bottom_sheet:
            self.bottom_sheet.show()



def showmultiselector(items, title, subtitle, setting_keys, plugin_instance, max_selection=None, on_selection_change=None, item_subtexts=None, default=None):
    try:
        fragment = get_last_fragment()
        if not fragment:
            return
        
        context = fragment.getContext()
        
        if max_selection is None:
            max_selection = len(items)
        
        if not hasattr(plugin_instance, '_multi_selector_settings'):
            plugin_instance._multi_selector_settings = set()
        plugin_instance._multi_selector_settings.update(setting_keys)
        
        from org.telegram.ui.ActionBar import BottomSheet
        from org.telegram.ui.Components import LayoutHelper
        from org.telegram.messenger import AndroidUtilities
        from android.widget import LinearLayout, TextView, FrameLayout
        from android.view import Gravity
        from android.util import TypedValue
        from androidx.core.widget import NestedScrollView
        from org.telegram.ui.ActionBar import Theme
        from org.telegram.ui.Components import CheckBox2
        from android.widget import ImageView
        from org.telegram.ui.ActionBar import SimpleTextView
        
        bottom_sheet = BottomSheet(context, False, fragment.getResourceProvider())
        bottom_sheet.setApplyBottomPadding(False)
        bottom_sheet.setApplyTopPadding(False)
        bottom_sheet.fixNavigationBar(Theme.getColor(Theme.key_windowBackgroundWhite))
        
        linear_layout = LinearLayout(context)
        linear_layout.setOrientation(LinearLayout.VERTICAL)
        linear_layout.setClickable(True)
        
        frame_layout = FrameLayout(context)
        frame_layout.addView(linear_layout)
        
        scroll_view = NestedScrollView(context)
        scroll_view.addView(frame_layout)
        bottom_sheet.setCustomView(scroll_view)
        
        title_text_view = SimpleTextView(context)
        title_text_view.setTypeface(AndroidUtilities.bold())
        title_text_view.setTextSize(20)
        title_text_view.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
        title_text_view.setText(title)
        title_text_view.setGravity(Gravity.CENTER)
        linear_layout.addView(title_text_view, LayoutHelper.createLinear(-2, -2, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 10, 20, 10, 0))
        
        subtitle_text_view = TextView(context)
        subtitle_text_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13)
        subtitle_text_view.setTextColor(Theme.getColor(Theme.key_dialogTextGray3))
        subtitle_text_view.setSingleLine(True)
        subtitle_text_view.setText(subtitle)
        subtitle_text_view.setGravity(Gravity.CENTER)
        linear_layout.addView(subtitle_text_view, LayoutHelper.createLinear(-2, -2, Gravity.TOP | Gravity.CENTER_HORIZONTAL, 10, 0, 10, 20))
        
        selected_items = set()
        checkboxes = {}
        
        def on_selection_changed(selected_indices):
            for i, key in enumerate(setting_keys):
                plugin_instance.set_setting(key, i in selected_indices)
            
            if hasattr(plugin_instance, 'setup_hooks'):
                plugin_instance.setup_hooks()
            
            if on_selection_change:
                selected_keys = [setting_keys[i] for i in selected_indices]
                should_restart = on_selection_change(selected_keys)
                if should_restart:
                    action_button.setText(get_text("restart_to_apply_changes", "Restart to apply changes"))
                else:
                    count = len(selected_items)
                    action_button.setText(f"{get_text('select', 'Select')} ({count})")
        
        OnClickInterface = find_class("android.view.View$OnClickListener")
        OnClick = dynamic_proxy(OnClickInterface)
        
        for i, item_text in enumerate(items):
            item_container = FrameLayout(context)
            item_container.setBackground(None)
            
            checkbox = CheckBox2(context, 21, fragment.getResourceProvider())
            checkbox.setColor(Theme.key_dialogRoundCheckBox, Theme.key_checkboxDisabled, Theme.key_dialogRoundCheckBoxCheck)
            checkbox.setDrawUnchecked(True)
            checkbox.setDrawBackgroundAsArc(10)
            checkbox.setChecked(False, False)
            checkbox.setVisibility(1)
            
            text_container = LinearLayout(context)
            text_container.setOrientation(LinearLayout.VERTICAL)
            text_container.setGravity(Gravity.CENTER_VERTICAL)
            
            text_view = TextView(context)
            text_view.setText(item_text)
            text_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 16)
            text_view.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
            text_view.setGravity(Gravity.CENTER_VERTICAL)
            text_container.addView(text_view, LayoutHelper.createLinear(-1, -2, Gravity.TOP, 0, 0, 0, 0))
            
            if item_subtexts and i < len(item_subtexts) and item_subtexts[i]:
                subtext_view = TextView(context)
                subtext_view.setText(item_subtexts[i])
                subtext_view.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 13)
                subtext_view.setTextColor(Theme.getColor(Theme.key_dialogTextGray3))
                subtext_view.setGravity(Gravity.CENTER_VERTICAL)
                text_container.addView(subtext_view, LayoutHelper.createLinear(-1, -2, Gravity.TOP, 0, 0, 0, 0))
            
            item_container.addView(checkbox, LayoutHelper.createFrame(24, 24, Gravity.CENTER_VERTICAL | Gravity.LEFT, 16, 0, 0, 0))
            item_container.addView(text_container, LayoutHelper.createFrame(-1, -1, Gravity.CENTER_VERTICAL | Gravity.LEFT, 56, 0, 16, 0))
            
            checkboxes[i] = checkbox
            
            class ItemClickImpl(OnClick):
                def __init__(self, item_index):
                    super().__init__()
                    self.item_index = item_index
                def onClick(self, v):
                    checkbox = checkboxes.get(self.item_index)
                    if checkbox:
                        if self.item_index in selected_items:
                            selected_items.remove(self.item_index)
                            checkbox.setChecked(False, True)
                        else:
                            if len(selected_items) >= max_selection:
                                from org.telegram.ui.Components import BulletinFactory
                                BulletinFactory.of(bottom_sheet.container, fragment.getResourceProvider()).createSimpleBulletin(
                                    R_tg.raw.chats_infotip, 
                                    f"Maximum {max_selection} items allowed"
                                ).show(True)
                                return
                            
                            selected_items.add(self.item_index)
                            checkbox.setChecked(True, True)
                        
                        count = len(selected_items)
                        action_button.setText(f"{get_text('select', 'Select')} ({count})")
                        action_button.setEnabled(True)
                        
                        if on_selection_changed:
                            on_selection_changed(list(selected_items))
            
            item_container.setOnClickListener(ItemClickImpl(i))
            item_height = 72 if (item_subtexts and i < len(item_subtexts) and item_subtexts[i]) else 56
            linear_layout.addView(item_container, LayoutHelper.createLinear(-1, item_height, Gravity.TOP, 0, 0, 0, 0))
        
        action_button = TextView(context)
        action_button.setBackground(Theme.createSimpleSelectorRoundRectDrawable(
            AndroidUtilities.dp(8), 
            Theme.getColor(Theme.key_featuredStickers_addButton), 
            Theme.getColor(Theme.key_featuredStickers_addButtonPressed)
        ))
        action_button.setGravity(Gravity.CENTER)
        action_button.setSingleLine(True)
        action_button.setText(f"{get_text('select', 'Select')} (0)")
        action_button.setTextColor(Theme.getColor(Theme.key_featuredStickers_buttonText))
        action_button.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 14)
        action_button.setTypeface(AndroidUtilities.bold())
        action_button.setEnabled(True)
        
        class ActionClickImpl(OnClick):
            def onClick(self, v):
                for i, key in enumerate(setting_keys):
                    plugin_instance.set_setting(key, i in selected_items)
                
                if hasattr(plugin_instance, 'setup_hooks'):
                    plugin_instance.setup_hooks()
                
                if on_selection_change:
                    selected_keys = [setting_keys[i] for i in selected_items]
                    should_restart = on_selection_change(selected_keys)
                    if should_restart:
                        from quantahut import restart_app
                        from client_utils import get_last_fragment
                        fragment = get_last_fragment()
                        if fragment:
                            restart_app(fragment)
                        return

                from android_utils import run_on_ui_thread
                run_on_ui_thread(lambda: bottom_sheet.dismiss())
        
        action_button.setOnClickListener(ActionClickImpl())
        linear_layout.addView(action_button, LayoutHelper.createLinear(-1, 48, Gravity.START, 14, 20, 14, 14))
        
        current_selection = []
        for i, key in enumerate(setting_keys):
            is_selected = False
            
            setting_value = plugin_instance.get_setting(key)
            if setting_value is not None:
                is_selected = bool(setting_value)
            elif default and key in default:
                is_selected = True
                
            if is_selected:
                current_selection.append(i)
                selected_items.add(i)
                checkboxes[i].setChecked(True, False)
        
        count = len(selected_items)
        action_button.setText(f"Select ({count})")
        action_button.setEnabled(True)
        
        bottom_sheet.show()
        
    except Exception as e:
        pass


class _MessageMenuRegistry:
    def __init__(self):
        self.items = []
        self._unhook_fill = None
        self._unhook_process = None

    def ensure_hooks(self, plugin: BasePlugin):
        try:
            if not self._unhook_fill:
                fill_method = ChatActivity.getClass().getDeclaredMethod(
                    "fillMessageMenu",
                    MessageObject,
                    ArrayList,
                    ArrayList,
                    ArrayList
                )
                self._unhook_fill = plugin.hook_method(fill_method, _QHFillMenuHook(self))
        except Exception as e:
            quantahut_log(f"fillMessageMenu hook error: {str(e)}")
        try:
            if not self._unhook_process:
                process_method = ChatActivity.getClass().getDeclaredMethod(
                    "processSelectedOption",
                    Integer.TYPE
                )
                self._unhook_process = plugin.hook_method(process_method, _QHProcessOptionHook(self))
        except Exception as e:
            quantahut_log(f"processSelectedOption hook error: {str(e)}")

    def register_item(self, *, text: str, option_id: int, icon_res: int, condition_predicate, on_click, insert_at_top: bool):
        handle = {
            'text': text,
            'option_id': int(option_id),
            'icon_res': int(icon_res),
            'condition': condition_predicate,
            'on_click': on_click,
            'insert_top': bool(insert_at_top),
        }
        self.items.append(handle)
        return handle

    def unregister_item(self, handle):
        try:
            if handle in self.items:
                self.items.remove(handle)
        except Exception:
            pass

    def cleanup_hooks(self, plugin: BasePlugin):
        try:
            if self._unhook_fill:
                plugin.unhook_method(self._unhook_fill)
                self._unhook_fill = None
                quantahut_log("fillMessageMenu hook removed")
        except Exception:
            pass
        
        try:
            if self._unhook_process:
                plugin.unhook_method(self._unhook_process)
                self._unhook_process = None
                quantahut_log("processSelectedOption hook removed")
        except Exception:
            pass
        
        self.items.clear()
        quantahut_log("QuantaHut hooks cleaned up")


class _QHFillMenuHook:
    def __init__(self, registry: _MessageMenuRegistry):
        self.registry = registry

    def before_hooked_method(self, param):
        pass

    def after_hooked_method(self, param):
        try:
            primary = param.args[0]
            if primary is None:
                return
            try:
                self.registry.last_message = primary
            except Exception:
                pass
            icons = param.args[1]
            items = param.args[2]
            options = param.args[3]

            for entry in list(self.registry.items):
                try:
                    if entry.get('condition') and callable(entry['condition']):
                        if not entry['condition'](primary):
                            continue
                    if entry.get('insert_top'):
                        icons.add(0, Integer(entry['icon_res']))
                        options.add(0, Integer(entry['option_id']))
                        items.add(0, entry['text'])
                    else:
                        icons.add(Integer(entry['icon_res']))
                        options.add(Integer(entry['option_id']))
                        items.add(entry['text'])
                except Exception:
                    continue
        except Exception:
            pass


class _QHProcessOptionHook:
    def __init__(self, registry: _MessageMenuRegistry):
        self.registry = registry

    def before_hooked_method(self, param):
        try:
            option = param.args[0]
            try:
                opt_val = int(option)
            except Exception:
                try:
                    opt_val = option.intValue()
                except Exception:
                    return

            for entry in list(self.registry.items):
                if opt_val == entry.get('option_id'):
                    try:
                        chat_activity = param.thisObject
                        message = getattr(chat_activity, 'selectedObject', None)
                        if message is None:
                            message = getattr(self.registry, 'last_message', None)
                        try:
                            chat_activity.closeMenu()
                        except Exception:
                            pass
                        if callable(entry.get('on_click')):
                            entry['on_click'](chat_activity, message)
                        param.setResult(None)
                    except Exception:
                        pass
                    finally:
                        return
        except Exception:
            pass

    def after_hooked_method(self, param):
        pass


_message_menu_registry = _MessageMenuRegistry()


def _ensure_message_menu_hooks(plugin: BasePlugin):
    _message_menu_registry.ensure_hooks(plugin)

def cleanup_quantahut_hooks(plugin: BasePlugin):
    _message_menu_registry.cleanup_hooks(plugin)


class HutUtilities:
    def register_message_menu_item(self, *, text: str, option_id: int, icon_res: int = R_tg.drawable.msg_message_s, condition_predicate=None, on_click=None, insert_at_top: bool = False):
        try:
            return _message_menu_registry.register_item(
                text=text,
                option_id=option_id,
                icon_res=icon_res,
                condition_predicate=condition_predicate,
                on_click=on_click,
                insert_at_top=insert_at_top,
            )
        except Exception as e:
            quantahut_log(f"utilities.register_message_menu_item error: {str(e)}")
            return None

    def unregister_message_menu_item(self, handle):
        try:
            if handle:
                _message_menu_registry.unregister_item(handle)
        except Exception as e:
            quantahut_log(f"utilities.unregister_message_menu_item error: {str(e)}")


utilities = HutUtilities()
hut = utilities

available_languages = []


def showupdatebottomsheet(title, subtitle=None, description=None, github_url=None, plugin_name=None, sticker_pack=None, sticker_index=None, raw_resource=None, button_text="Download", button2_text=None, bottom_text=None, show_close_button=True, show_language_selector=False, available_languages=None, show_user_avatar=False, on_button_click=None, on_button2_click=None, on_sticker_long_click=None):
    try:
        from android_utils import run_on_ui_thread
        
        def create_and_show():
            try:
                current_fragment = get_last_fragment()
                if not current_fragment:
                    quantahut_log("Cannot show bottom sheet, no current fragment.")
                    return
                
                activity = current_fragment.getParentActivity()
                if not activity:
                    quantahut_log("Cannot show bottom sheet, no activity.")
                    return
                
                bottom_sheet = UpdateBottomSheet(activity, activity, current_fragment, available_languages, github_localization.localization_cache)
                bottom_sheet.create_bottom_sheet(title, subtitle, description, github_url, plugin_name, sticker_pack, sticker_index, raw_resource, button_text, button2_text, bottom_text, show_close_button, show_language_selector, show_user_avatar, on_button_click, on_button2_click, on_sticker_long_click)
                bottom_sheet.show()
                
            except Exception as e:
                quantahut_log(f"Error showing bottom sheet: {str(e)}")
        
        run_on_ui_thread(create_and_show)
        
    except Exception as e:
        quantahut_log(f"Error in showupdatebottomsheet: {str(e)}")

class _PluginSearchCreateViewHook:
    def __init__(self, plugin):
        self.plugin = plugin
    
    def after_hooked_method(self, param):
        try:
            activity = param.thisObject
            action_bar = get_private_field(activity, "actionBar")
            if not action_bar:
                return
            
            menu = action_bar.menu if action_bar.menu else action_bar.createMenu()
            
            R = jclass("org.telegram.messenger.R")
            LocaleController = jclass("org.telegram.messenger.LocaleController")
            R_string = jclass("org.telegram.messenger.R$string")
            
            search_item = menu.addItem(0, R.drawable.ic_ab_search)
            search_item.setIsSearchField(True)
            search_item.setSearchFieldHint(LocaleController.getString(R_string.Search))
            set_private_field(activity, "searchItem", search_item)
            
            from android.os import Handler, Looper
            handler = Handler(Looper.getMainLooper())
            runnable = _PluginSearchUpdateRunnable(activity, search_item, handler)
            handler.post(runnable)
        except:
            pass


RunnableClass = jclass("java.lang.Runnable")
RunnableProxy = dynamic_proxy(RunnableClass)

class _PluginSearchUpdateRunnable(RunnableProxy):
    def __init__(self, activity, search_item, handler):
        super().__init__()
        self.activity = activity
        self.search_item = search_item
        self.handler = handler
        self.last_query = ""
        self.reset_hidden = False
    
    def run(self):
        try:
            if self.search_item.isSearchFieldVisible():
                if not self.reset_hidden:
                    reset_item = get_private_field(self.activity, "resetItem")
                    if reset_item:
                        reset_item.setVisibility(8)
                        self.reset_hidden = True
                
                search_field = self.search_item.getSearchField()
                if search_field:
                    current_query = str(search_field.getText().toString())
                    if current_query != self.last_query:
                        self.last_query = current_query
                        list_view = get_private_field(self.activity, "listView")
                        if list_view and list_view.adapter:
                            list_view.adapter.update(True)
                self.handler.postDelayed(self, 300)
            else:
                if self.reset_hidden:
                    reset_item = get_private_field(self.activity, "resetItem")
                    if reset_item:
                        reset_item.setVisibility(0)
                        self.reset_hidden = False
                
                if self.last_query != "":
                    self.last_query = ""
                    list_view = get_private_field(self.activity, "listView")
                    if list_view and list_view.adapter:
                        list_view.adapter.update(True)
                self.handler.postDelayed(self, 1000)
        except:
            pass


class _PluginSearchFillItemsHook:
    def __init__(self, plugin):
        self.plugin = plugin
        self.collected_items_cache = {}
    
    def after_hooked_method(self, param):
        try:
            activity = param.thisObject
            items_list = param.args[0]
            
            if not items_list or items_list.size() == 0:
                return
            
            action_bar = get_private_field(activity, "actionBar")
            if not action_bar or not action_bar.menu:
                return
            
            search_item = None
            menu = action_bar.menu
            for i in range(menu.getChildCount()):
                child = menu.getChildAt(i)
                if child and hasattr(child, 'isSearchField') and child.isSearchField():
                    search_item = child
                    break
            
            if not search_item:
                return
            
            if not search_item.isSearchFieldVisible():
                return
            
            search_field = search_item.getSearchField()
            if not search_field:
                return
            
            search_query = str(search_field.getText().toString()).strip()
            if not search_query:
                return
            
            query = search_query.lower()
            
            create_sub_fragment_callback = get_private_field(activity, "createSubFragmentCallback")
            if create_sub_fragment_callback is not None:
                items_to_remove = []
                
                for i in range(items_list.size()):
                    item = items_list.get(i)
                    if item is None:
                        continue
                    
                    matches = False
                    
                    if hasattr(item, "text") and item.text:
                        text = str(item.text).lower()
                        if query in text:
                            matches = True
                    
                    if not matches:
                        if hasattr(item, "subText") and item.subText:
                            subtext = str(item.subText).lower()
                            if query in subtext:
                                matches = True
                    
                    if not matches:
                        items_to_remove.append(i)
                
                for i in reversed(items_to_remove):
                    items_list.remove(i)
                return
            
            plugin_obj = get_private_field(activity, "plugin")
            if not plugin_obj:
                return
            
            plugin_id = plugin_obj.getId()
            
            if plugin_id not in self.collected_items_cache:
                self.collected_items_cache[plugin_id] = self._collect_all_items(activity, plugin_obj, items_list)
            
            all_items = self.collected_items_cache[plugin_id]
            
            items_list.clear()
            
            for item in all_items:
                matches = False
                
                if hasattr(item, "text") and item.text:
                    text = str(item.text).lower()
                    if query in text:
                        matches = True
                
                if not matches and hasattr(item, "subText") and item.subText:
                    subtext = str(item.subText).lower()
                    if query in subtext:
                        matches = True
                
                if matches:
                    items_list.add(item)
            
        except:
            pass
    
    def _collect_all_items(self, activity, plugin_obj, items_list):
        all_items = []
        
        try:
            for i in range(items_list.size()):
                item = items_list.get(i)
                if item:
                    view_type = item.viewType
                    if view_type not in [0, 1, 7, 8, 38]:
                        all_items.append(item)
            
            from com.exteragram.messenger.plugins import PluginsController
            
            main_settings = PluginsController.getInstance().getPluginSettingsList(plugin_obj.getId())
            
            if main_settings:
                settings_count = main_settings.size()
                for idx in range(settings_count):
                    setting = main_settings.get(idx)
                    if setting is None:
                        continue
                    
                    if hasattr(setting, 'createSubFragmentCallback') and setting.createSubFragmentCallback:
                        sub_items = self._collect_sub_items(setting.createSubFragmentCallback, plugin_obj)
                        all_items.extend(sub_items)
        except:
            pass
        
        return all_items
    
    def _collect_sub_items(self, callback, plugin_obj):
        sub_items = []
        
        try:
            from com.exteragram.messenger.plugins import PluginsController
            from org.telegram.ui.Components import UItem
            from org.telegram.messenger import ApplicationLoader
            
            py_result = callback()
            if not py_result:
                return sub_items
            
            for py_item in py_result:
                if py_item is None:
                    continue
                
                try:
                    class_name = py_item.__class__.__name__
                    
                    icon_res_id = 0
                    if hasattr(py_item, 'icon') and py_item.icon:
                        context = ApplicationLoader.applicationContext
                        icon_res_id = context.getResources().getIdentifier(py_item.icon, "drawable", context.getPackageName())
                    
                    item = None
                    
                    if class_name == 'Header':

                        pass
                    
                    elif class_name == 'Switch':
                        if hasattr(py_item, 'key') and py_item.key and hasattr(py_item, 'text') and py_item.text:
                            current_value = PluginsController.getInstance().getPluginSettingBoolean(
                                plugin_obj.getId(), py_item.key, py_item.default if hasattr(py_item, 'default') else False
                            )
                            if hasattr(py_item, 'subtext') and py_item.subtext:
                                item = UItem.asButtonCheck(0, py_item.text, py_item.subtext, icon_res_id) if icon_res_id != 0 else UItem.asButtonCheck(0, py_item.text, py_item.subtext)
                            else:
                                item = UItem.asCheck(0, py_item.text, icon_res_id)
                            if item:
                                item.setChecked(current_value)
                                item.object2 = py_item.key
                    
                    elif class_name == 'Input':
                        if hasattr(py_item, 'key') and py_item.key and hasattr(py_item, 'text') and py_item.text:
                            current_value = PluginsController.getInstance().getPluginSettingString(
                                plugin_obj.getId(), py_item.key, py_item.default if hasattr(py_item, 'default') else ""
                            )
                            item = UItem.asButton(0, py_item.text, current_value)
                            if icon_res_id != 0 and item:
                                item.iconResId = icon_res_id
                            if item:
                                item.object2 = py_item.key
                    
                    elif class_name == 'Selector':
                        if hasattr(py_item, 'key') and py_item.key and hasattr(py_item, 'text') and py_item.text and hasattr(py_item, 'items') and py_item.items:
                            current_value = PluginsController.getInstance().getPluginSettingInt(
                                plugin_obj.getId(), py_item.key, py_item.default if hasattr(py_item, 'default') else 0
                            )
                            if current_value < 0 or current_value >= len(py_item.items):
                                current_value = 0
                            item = UItem.asButton(0, py_item.text, py_item.items[current_value])
                            if icon_res_id != 0 and item:
                                item.iconResId = icon_res_id
                            if item:
                                item.object2 = py_item.key
                                item.texts = py_item.items
                                item.intValue = current_value
                    
                    elif class_name == 'Text':
                        if hasattr(py_item, 'text') and py_item.text:
                            item = UItem.asButton(0, py_item.text)
                            if icon_res_id != 0 and item:
                                item.iconResId = icon_res_id
                            if item:
                                pass
                    
                    elif class_name == 'Divider':
                        pass
                    
                    if item:
                        sub_items.append(item)
                    
                    if hasattr(py_item, 'create_sub_fragment') and py_item.create_sub_fragment:
                        nested_items = self._collect_sub_items(py_item.create_sub_fragment, plugin_obj)
                        sub_items.extend(nested_items)
                except:
                    pass
        except:
            pass
        
        return sub_items


class _PluginSettingsLongClickHook:
    def __init__(self, plugin):
        self.plugin = plugin
    
    def before_hooked_method(self, param):
        try:
            item = param.args[0]
            if item and (not hasattr(item, 'settingItem') or item.settingItem is None):
                param.setResult(False)
        except:
            pass


def quantahut_log(string: str):
    if setting_getter and setting_getter("show_logs", DEFAULT_SHOW_LOGS):
        log(f"[QuantaHut] {string}")

def get_text(key: str, default: str = None) -> str:
    try:
        return get_localized_string("UiTweaks", key, default or key)
    except Exception as e:
        quantahut_log(f"Error getting localized text: {e}")
        return default or key

__all__ = [
    'UpdateBottomSheet',
    'showmultiselector', 
    'showupdatebottomsheet',
    'utilities',
    'available_languages',
    'get_text',
    'quantahut_log',
    'QuantaHutPlugin',
    'cleanup_quantahut_hooks'
]
