"""


                            –î–ò–°–ö–õ–ï–ô–ú–ï–†

–ö–æ—Ä–æ—á–µ , –µ—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–µ–Ω –∫—É—Å–æ–∫ –∫–æ–¥–∞ –∏–∑ —ç—Ç–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ , —Ç–æ –ø–∂
—É–∫–∞–∑—ã–≤–∞–π –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–ª–∏ –≥–¥–µ-—Ç–æ –µ—â–µ , —á—Ç–æ –≤–∑—è–ª –∫–æ–¥ —Å @KangelPlugins & @SwagNonHer
                              –°–ø–∞—Å–∏–±–æ
                        üôè –ë–õ–ê–ì–û–°–õ–ê–í–õ–ï–ù–ò–ï üôè

‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚°§‚†§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚°§‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚†â‚¢Ä‚£§‚†∂‚†Æ‚†∑‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°º‚†ã‚†à‚£Ω‚£Ü‚†π‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚†∂‚†∂‚†∂‚†∂‚£Ñ‚†Ä‚†Ä‚†Ä‚£û‚£Å‚£†‚†¥‚†Ø‚†∞‚†∂‚†∂‚†∂‚£æ‚†Å‚†ô‚£Ø‚£≥‚£•‚†û‚¢π‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ‚†Ä‚¢†‚°æ‚†Å‚¢π‚†Ä‚¢ª‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†è‚†Ä‚£ä‚£Ä‚£ê‚£Ä‚°à‚¢ì‚£¶‚°ñ‚†ã‚†Å‚†Ä‚°∞‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚£π‚¢†‚£Ñ‚£Ω‚†¨‚£æ‚†â‚¢π‚†≥‚°Ñ‚†Ä‚†Ä‚†Ä‚¢∏‚†á‚†Ä‚¢∏‚†Ä‚¢Ä‚°º‚°á‚¢à‚°æ‚°¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°è‚£†‚°æ‚†â‚¢Ä‚†Ä‚£Ä‚°Ω‚†õ‚¢É‚°Ñ‚†Ä‚†Ä‚°ú‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†õ‚†õ‚¢ß‚°Ä‚†à‚†ª‚¢æ‚°Ñ‚†à‚¢ß‚°Ä‚†Ä‚¢∏‚†Ä‚†Ä‚¢∏‚°∞‚°ø‚†õ‚°ß‚†ä‚°Ñ‚£ø‚£Æ‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°æ‚¢π‚°á‚†Ä‚†Ä‚£¥‚†õ‚†Ä‚¢Ä‚†é‚†Ä‚†Ä‚£º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°π‚£¶‚°Ä‚†Ä‚£≥‚†∂‚£æ‚£≥‚°Ñ‚£∏‚†Ä‚†Ä‚¢∏‚†É‚¢Ä‚£¥‚†É‚†Ä‚¢°‚£ß‚£Ω‚†Ä‚†π‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚¢∏‚°á‚¢∞‚°æ‚†ì‚†Ä‚†Ä‚°é‚†Ä‚†Ä‚¢†‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°û‚°â‚¢∫‚£Ø‚£´‚°∑‚†¶‚°ø‚†ô‚¢∑‚°á‚†Ä‚¢Ä‚°è‚£†‚†ø‚°ü‚†Ä‚¢†‚£æ‚°ñ‚°ü‚°Ü‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ß‚†Ä‚£≥‚¢ø‚°æ‚†Ä‚†Ä‚£º‚†Å‚†Ä‚£Ä‚£æ‚£ø‚†Ä‚†Ä‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†Ä‚†∑‚¢ø‚°ü‚†Å‚†à‚†ª‚£ß‚°á‚£†‚¢æ‚£á‚£§‚†û‚£¥‚†É‚°æ‚†Å‚¢Ä‚°ø‚†â‚†í‚¢ª‚°á‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ª‚£ß‚°æ‚¢†‚†É‚¢Ä‚°á‚†Ä‚¢Ä‚°æ‚†Å‚†∏‚£º‚°Ä‚£á‚†Ä‚†Ä‚†Ä‚£Ü‚†Ä‚¢∏‚°Ü‚†Ä‚¢†‚¢ß‚°Ä‚†Ä‚†Ä‚°∑‚£û‚£°‚†é‚£á‚£§‚†û‚†Å‚°º‚†Å‚¢Ä‚°ø‚†Å‚†Ä‚†Ä‚¢π‚†Å‚¢†‚†á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°†‚†Ä‚¢Ä‚£ø‚£è‚°á‚¢∏‚°Ä‚†Ä‚°á‚†Ä‚£æ‚†É‚†Ä‚†Ä‚†â‚†ª‚†è‚†ì‚†∂‚†∂‚†ø‚¢§‚£Ä‚°∑‚¢Ñ‚£∏‚¢Æ‚£ø‚°¶‚£§‚°ü‚†â‚£ø‚¢∏‚°è‚†Å‚†Ä‚£∏‚†Å‚¢Ä‚°û‚†É‚†Ä‚†Ä‚†î‚°ø‚†Ä‚°æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚°í‚†Ä‚†ò‚£ø‚£ø‚°á‚†∏‚£á‚¢∞‚°á‚¢∞‚£ß‚£∂‚£∂‚£∂‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ñ‚£Ñ‚£í‚£¶‚£º‚£è‚£∞‚£æ‚†ø‚¢æ‚£Ø‚£â‚£è‚£æ‚°á‚†Ä‚†Ä‚°á‚†Ä‚£º‚†Å‚†Ä‚†Ä‚†Ä‚£∞‚†É‚£º‚†Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†≥‚†õ‚†∂‚£Ω‚°á‚†Ä‚£ø‚°Ñ‚¢ª‚£∏‚£é‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚†â‚†â‚†Å‚¢π‚°è‚†Å‚†Ä‚£∏‚°è‚†ô‚°ø‚£ª‚†ë‚¢Ñ‚†Ä‚£ß‚†Ä‚°ü‚°Ü‚†Ä‚†Ä‚¢®‚†è‚°¥‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢∑‚†Ä‚£ø‚¢π‚£Ñ‚£ø‚†ø‚°Ç‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢æ‚†Å‚†Ä‚†Ä‚°ø‚£ß‚†û‚£±‚†á‚†Ä‚°ò‚†¶‚°Ω‚£Ñ‚£ø‚†π‚£Ñ‚°¥‚¢â‚†î‚†Å‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°ø‚¢∏‚£ß‚†ò‚£ü‚†ô‚£ø‚°Ñ‚†Ä‚†Ä‚¢Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£Ø‚†ñ‚†Ä‚¢∞‚£∑‚¢á‚°º‚†É‚¢Ä‚†û‚†Ä‚°Ü‚†Ä‚†ô‚£ø‚°¶‚†ô‚¢∂‚°Å‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†≤‚¢ø‚†ã‚†â‚†â‚†ô‚¢¶‚£Ä‚†Ä‚†Ä‚£ø‚°á‚¢∏‚£ø‚°∑‚†º‚¢∂‚†Ω‚£ø‚£Ü‚†Ä‚†à‚†ª‚†§‚†§‚†§‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚¢¥‚£ø‚†á‚†Ä‚†Ä‚£∏‚°ø‚†ã‚†Ä‚†Ä‚†é‚†Ä‚°û‚†Ä‚£†‚†û‚¢Å‚†Ω‚¢¶‚°Ä‚†ô‚¢¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚¢∏‚£Ö‚†Ä‚†Ä‚†à‚†â‚†õ‚†â‚†î‚£ª‚£∏‚¢∏‚£ø‚†ø‚£†‚°è‚£ß‚†ô‚¢ø‚£ß‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£æ‚†É‚†Ä‚†Ä‚¢∞‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†û‚¢Å‚°î‚†É‚†Ä‚†Å‚†ã‚†ó‚¢¶‚£à‚†≥‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢ø‚£ù‚¢¶‚£∏‚°ú‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚£ß‚°á‚†Ä‚°ø‚†Ä‚†Ä‚†Ä‚†â‚†Å‚†Ä‚†â‚†õ‚¢∑‚£Ñ‚£Ä‚£†‚£¥‚†û‚†â‚¢Å‚°æ‚†Å‚†Ä‚†Ä‚£∞‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚†É‚¢∞‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚¢∑‚£µ‚£Ñ‚†Ä‚†Ä‚†Ä
‚¢ª‚£ü‚£ø‚°ª‚£é‚¢£‚£≥‚°ò‚£Ü‚†Ä‚¢†‚°û‚°è‚†Ä‚£æ‚£ß‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°ü‚£ø‚†Ä‚£†‚¢Ç‚£ü‚£°‚†Ñ‚£†‚¢æ‚£ã‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚¢∞‚£ø‚†É‚¢†‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚†ª‚£Ñ‚†Ä
‚°à‚¢ª‚£Ü‚†ª‚°ü‚£Ü‚¢ª‚£ß‚¢ª‚£Ñ‚°º‚¢∏‚°á‚£¶‚£ø‚°º‚£ß‚£Ω‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ã‚£§‚£ø‚¢à‚†ü‚¢π‚°ø‚£°‚°û‚†â‚†â‚†Ä‚†Ä‚£∞‚£∂‚£ô‚£∑‚£Ø‚°è‚†Ä‚£∏‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£∑‚†à‚¢ß
‚£ñ‚†¶‚£æ‚£∑‚°ô‚†ø‚†Ä‚†ô‚†Ä‚¢ª‚°á‚¢∏‚°á‚†ò‚¢ø‚£∑‚°å‚†ª‚£ø‚£§‚†Ä‚†Ä‚†Ä‚£†‚£∂‚°ø‚†ã‚£±‚£ø‚†ü‚†Å‚£†‚£ø‚¢†‚°è‚†Ä‚†Ä‚¢Ä‚°æ‚†ü‚†ã‚†Å‚†Ä‚£®‚¢ø‚°á‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ß‚†Ä
‚†ò‚¢ø‚£é‚°ô‚†õ‚†Ç‚†Ä‚†Ä‚†Ä‚°º‚†É‚¢∏‚†á‚†ò‚°Ñ‚†ô‚†õ‚†Ä‚†à‚†â‚†Ä‚£†‚£æ‚¢è‚°ú‚¢°‚°æ‚†õ‚†Ä‚£†‚°æ‚†â‚¢ª‚£ø‚£Ñ‚£Ä‚°æ‚†õ‚†Ä‚†Ä‚†Ä‚°†‚†ä‚†Ä‚†Ä‚¢≥‚†Ä‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°Ñ
‚†Ä‚†Ä‚†ô‚¢ø‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚¢∏‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚†É‚°é‚¢†‚°ø‚†•‚£§‚†û‚†â‚¢∞‚£¶‚£Ä‚°Ω‚†õ‚†õ‚†Ä‚†Ä‚†Ä‚¢†‚†é‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£Ü‚†ò‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ñ‚¢á‚†Ä‚†Ä‚†Ä‚¢≥
‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚¢π‚£Ü‚°Ä‚†Ä‚†Ä‚°Ä‚£à‚£ø‚¢ª‚°Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚¢ø‚£á‚†ò‚¢†‚°ü‚¢Ä‚°¥‚†ã‚£Ä‚£∏‚£∑‚£ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£∑‚£å‚†≥‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Ä‚†Ä‚†Ä‚¢∏
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£ô‚†õ‚†õ‚†â‚†â‚†â‚†Ä‚£æ‚£æ‚°Ä‚†Ä‚¢Ä‚£æ‚¢è‚£æ‚°æ‚¢Ä‚°û‚¢†‚°æ‚£∑‚£ø‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚¢Ä‚°û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ò‚°å‚†ô‚†∑‚£¨‚°ª‚£ó‚†í‚†í‚†¶‚†§‚†§‚†§‚¢§‚£Ñ‚£Ä‚†Ä‚†Ä‚¢∏
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†æ‚¢Ø‚°Å‚†Ä‚†Ä‚†Ä‚†Ä‚††‚¢û‚£ª‚¢∑‚£§‚£æ‚£è‚£∏‚¢π‚£ß‚£∏‚££‚¢ü‚£§‚£ø‚£ø‚°ø‚†•‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ß‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†≥‚†§‚†§‚†§‚£Ñ‚£Ä‚£Ä‚†Ä‚†à‚†â‚†ì‚†ø
‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚†¶‚°º‚†•‚†§‚†§‚¢Ñ‚°§‚†ñ‚†ã‚†Å‚†ò‚°ü‚†Ä‚†à‚†≥‚£ú‚£ø‚£ø‚££‚£æ‚†ü‚†ã‚†Å‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†π‚£≤‚£§‚°Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚¢Ä‚°¨‚£ù‚†Ç‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚£§‚£ô‚°ü‚†â‚°Ø‚†§‚†§‚†Ä‚†Ä‚††‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†¥‚†õ‚†Å‚†Ä‚†ô‚£¶
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†É‚†Ä‚£∏‚†Ä‚¢Ä‚£¥‚°ü‚†Ä‚††‚†î‚†í‚£ß‚£§‚£∑‚°¶‚°Ñ‚†Ä‚†Ä‚†Ä‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚†û‚†Å‚†Ä‚†Ä‚¢Ä‚°§‚†é‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚£ø‚†Ä‚†Ä‚†Ä‚¢†‚†Ä‚†É‚¢†‚†è‚°º‚†Ä‚†Ä‚†Ä‚£†‚°º‚£ø‚£è‚°è‚¢ø‚¢Ñ‚†Ä‚†Ä‚†Ä‚°è‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚†Ä‚¢Ä‚£§‚†¥‚†ü‚†â‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢õ‚°ª‚°á‚†Ä‚†Ä‚†à‚†Ü‚†Ä‚¢∏‚°Ñ‚†ß‚†§‚†¥‚†õ‚†â‚£∏‚£ß‚¢ª‚†Ä‚†ò‚†Ä‚†õ‚†¶‚†º‚†É‚£Ä‚£π‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£‚†Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†ã‚¢Ä‚£§‚†û‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†ò‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚°Ä‚†Ä‚†Ä‚¢Ä‚°º‚£ª‚°Ω‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£è‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°Ü‚†Ä‚¢†‚°ü‚¢Ä‚°¥‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä

                            DISCLAIMER

Anyway, if you need a piece of code from this plugin, 
please mention in the description or somewhere else that you got it from @KangelPlugins & @SwagNonHer
                             Thanks.
                            üôèBLESSüôè

"""



import traceback
import os
import requests
import json
import threading
import time

from base_plugin import BasePlugin, MethodHook, MethodReplacement
from hook_utils import find_class
from android_utils import log, run_on_ui_thread, OnClickListener
from java import jclass, dynamic_proxy
from java.util import Locale
from ui.settings import Header, Switch, Selector, Input, Divider, Text
from ui.bulletin import BulletinHelper
from client_utils import get_last_fragment, run_on_queue
from ui.alert import AlertDialogBuilder


try:
    Typeface = find_class("android.graphics.Typeface")
    TextView = find_class("android.widget.TextView")
    SimpleTextView = find_class("org.telegram.ui.ActionBar.SimpleTextView")
    TextPaint = find_class("android.text.TextPaint")
    ViewGroup = find_class("android.view.ViewGroup")
    Context = find_class("android.content.Context")
    AttributeSet = find_class("android.util.AttributeSet")
    Integer = find_class("java.lang.Integer")
    Long = find_class("java.lang.Long")
    View = find_class("android.view.View")
    File = jclass("java.io.File")
    URL = jclass("java.net.URL")
    Channels = jclass("java.nio.channels.Channels")
    FileOutputStream = jclass("java.io.FileOutputStream")
    ApplicationLoader = find_class("org.telegram.messenger.ApplicationLoader")
    AndroidUtilities = find_class("org.telegram.messenger.AndroidUtilities")
    R = find_class("org.telegram.messenger.R")
    Theme = find_class("org.telegram.ui.ActionBar.Theme")
    FrameLayout = find_class("android.widget.FrameLayout")
    LinearLayout = find_class("android.widget.LinearLayout")
    Gravity = find_class("android.view.Gravity")
    Handler = find_class("android.os.Handler")
    Looper = find_class("android.os.Looper")
    Runnable = jclass("java.lang.Runnable")
    AnimatedTextView = find_class("org.telegram.ui.Components.AnimatedTextView")
    
    JAVA_IMPORTS_OK = True
except Exception as e:
    log(f"[SFGlobalFont] Critical error importing Java classes: {e}")
    JAVA_IMPORTS_OK = False

# Optional UI classes (safe if missing)
try:
    EditTextBoldCursor = find_class("org.telegram.ui.Components.EditTextBoldCursor")
except Exception:
    EditTextBoldCursor = None
try:
    NumberTextView = find_class("org.telegram.ui.Components.NumberTextView")
except Exception:
    NumberTextView = None

__id__ = "mnd_global_sf_font"
__name__ = "Global Fonts"
__description__ = """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç –∫–æ –≤—Å–µ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É Telegram. –í–∫–ª—é—á–∞–µ—Ç –º–∞–≥–∞–∑–∏–Ω —à—Ä–∏—Ñ—Ç–æ–≤ Google Fonts.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: exteraGram/AyuGram 11.12.0 –∏–ª–∏ –≤—ã—à–µ

Applies the selected font to the entire Telegram interface. Includes the Google Fonts store.
Requirements: exteraGram/AyuGram 11.12.0 or higher
"""
__author__ = "@swagnonher & @KangelPlugins"
__version__ = "1.1.0"
__min_version__ = "11.12.0"
__icon__ = "OMGKAWAIIANGELGOD/11"


class Locales:
    default = {
        "settings_header": "üÖµ Global Font",
        "settings_enable": "Enable plugin",
        "settings_source": "Font source",
        "settings_source_items": [
            "Built-in (Zpix)",
            "Custom URL",
            "System default",
        ],
        "settings_custom_url": "Link to .ttf/.otf",
        "settings_custom_url_sub": "Direct link to a font file",
        "bulletin_url_invalid": "Invalid font URL",
        "bulletin_ready": "Font is ready and applied!",
        "bulletin_downloading": "Downloading font‚Ä¶",
        "bulletin_failed": "Font download error",
        "font_store_button": "Font store",
        "font_store_title": "Font store",
        "font_store_search_hint": "Search by name...",
        "font_store_loading": "Loading font list...",
        "gfonts_pick_family": "Choose family",
        "gfonts_pick_variant": "Choose style",
        "gfonts_no_results": "Nothing found",
        "gfonts_only_ttf": "Only .ttf/.otf variants are available",
        "gfonts_api_error": "Google Fonts API error",
        "requests_missing": "requests not available",
    }
    en = default
    ru = {
        "settings_header": "üÖµ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —à—Ä–∏—Ñ—Ç",
        "settings_enable": "–í–∫–ª—é—á–∏—Ç—å –ø–ª–∞–≥–∏–Ω",
        "settings_source": "–ò—Å—Ç–æ—á–Ω–∏–∫ —à—Ä–∏—Ñ—Ç–∞",
        "settings_source_items": [
            "–í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π (Zpix)",
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π URL",
            "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        ],
        "settings_custom_url": "–°—Å—ã–ª–∫–∞ –Ω–∞ .ttf/.otf",
        "settings_custom_url_sub": "–ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª —à—Ä–∏—Ñ—Ç–∞",
        "bulletin_url_invalid": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ —à—Ä–∏—Ñ—Ç–∞",
        "bulletin_ready": "–®—Ä–∏—Ñ—Ç –≥–æ—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ–Ω—ë–Ω!",
        "bulletin_downloading": "–ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞‚Ä¶",
        "bulletin_failed": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞",
        "font_store_button": "–ú–∞–≥–∞–∑–∏–Ω —à—Ä–∏—Ñ—Ç–æ–≤",
        "font_store_title": "–ú–∞–≥–∞–∑–∏–Ω —à—Ä–∏—Ñ—Ç–æ–≤",
        "font_store_search_hint": "–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é...",
        "font_store_loading": "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤...",
        "gfonts_pick_family": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ–π—Å—Ç–≤–æ",
        "gfonts_pick_variant": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–µ—Ä—Ç–∞–Ω–∏–µ",
        "gfonts_no_results": "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
        "gfonts_only_ttf": "–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç—ã .ttf/.otf",
        "gfonts_api_error": "–û—à–∏–±–∫–∞ API Google Fonts",
        "requests_missing": "–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ requests –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
    }


def t(key: str) -> str:
    lang = Locale.getDefault().getLanguage()
    loc = getattr(Locales, lang, Locales.default)
    return loc.get(key, key)



class _Invalid_FontStoreFragment_Removed(object):
    def __init__(self, plugin_instance):
        super().__init__()
        self.plugin = plugin_instance
        self.all_fonts = []
        self.filtered_fonts = []
        self.adapter = None
        self.listView = None
        self.searchField = None
        self.loadingView = None
        self.search_handler = Handler(Looper.getMainLooper())
        self.search_runnable = None

    def createView(self, context):
        self.actionBar.setBackButtonImage(R.drawable.ic_ab_back)
        self.actionBar.setTitle(t("font_store_title"))
        self.actionBar.setAllowOverlayTitle(True)
        self.actionBar.setActionBarMenuOnItemClick(
            dynamic_proxy(ActionBar.ActionBarMenuOnItemClick)(
                lambda id: (id == -1 and self.finishFragment())
            )
        )
        
        self.fragmentView = FrameLayout(context)
        self.fragmentView.setBackgroundDrawable(Theme.createServiceShaderDrawable(
            Theme.getThemeDrawableDesc(self.fragmentView, Theme.key_windowBackgroundGray),
            True
        ))
        
        self.fragmentView.setClickable(True)

        main_layout = LinearLayout(context)
        main_layout.setOrientation(LinearLayout.VERTICAL)
        self.fragmentView.addView(main_layout, FrameLayout.LayoutParams(-1, -1))

        search_container = FrameLayout(context)
        search_container.setBackgroundColor(Theme.getColor(Theme.key_dialogBackground))
        self.searchField = EditText(context)
        self.searchField.setHint(t("font_store_search_hint"))
        self.searchField.setHintTextColor(Theme.getColor(Theme.key_dialogTextHint))
        self.searchField.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
        self.searchField.setBackground(None)
        self.searchField.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(10), AndroidUtilities.dp(16), AndroidUtilities.dp(10))
        self.searchField.addTextChangedListener(dynamic_proxy(TextWatcher)(
            afterTextChanged=self._on_search_text_changed
        ))
        search_container.addView(self.searchField, FrameLayout.LayoutParams(-1, -2))
        main_layout.addView(search_container)
        
        divider_view = View(context)
        divider_view.setBackgroundColor(Theme.getColor(Theme.key_divider))
        main_layout.addView(divider_view, LinearLayout.LayoutParams(-1, 1))

        list_container = FrameLayout(context)
        list_container.setBackgroundColor(Theme.getColor(Theme.key_dialogBackground))
        main_layout.addView(list_container, LinearLayout.LayoutParams(-1, -1))

        self.listView = RecyclerListView(context)
        self.listView.setLayoutManager(LinearLayoutManager(context, LinearLayoutManager.VERTICAL, False))
        self.adapter = self.ListAdapter(context, self.plugin, self)
        self.listView.setAdapter(self.adapter)
        list_container.addView(self.listView, FrameLayout.LayoutParams(-1, -1))

        self.loadingView = ProgressBar(context)
        self.loadingView.setVisibility(View.VISIBLE)
        params = FrameLayout.LayoutParams(-2, -2, Gravity.CENTER)
        list_container.addView(self.loadingView, params)

        return self.fragmentView

    def onFragmentCreate(self):
        super().onFragmentCreate()
        self.setHasOwnBackground(True) 
        self._fetch_fonts()
        return True

    def _on_search_text_changed(self, s):
        if self.search_runnable:
            self.search_handler.removeCallbacks(self.search_runnable)
        
        query = str(s.toString())
        
        class SearchRunnable(dynamic_proxy(Runnable)):
            _fragment_ref = self
            _query = query
            def run(self):
                self._fragment_ref._filter_fonts(self._query)

        self.search_runnable = SearchRunnable()
        self.search_handler.postDelayed(self.search_runnable, 300)

    def _fetch_fonts(self):
        def task():
            try:
                api_key = "AIzaSyBZBi89KDR77uodfz4y14M69ZOI9vQwn3E"
                url = f"https://www.googleapis.com/webfonts/v1/webfonts?key={api_key}&sort=popularity"
                response = requests.get(url, timeout=30)
                response.raise_for_status()
                data = response.json()
                self.all_fonts = data.get("items", [])
                run_on_ui_thread(lambda: self._update_font_list(self.all_fonts))
            except Exception as e:
                log(f"[SFGlobalFont] Google Fonts API error: {e}")
                run_on_ui_thread(lambda: self.loadingView and self.loadingView.setVisibility(View.GONE))
                BulletinHelper.show_error(t("gfonts_api_error"))

        run_on_queue(task)

    def _update_font_list(self, fonts):
        self.filtered_fonts = fonts
        if self.adapter:
            self.adapter.set_fonts(fonts)
            self.adapter.notifyDataSetChanged()
        if self.loadingView:
            self.loadingView.setVisibility(View.GONE)
        if self.listView:
            self.listView.setVisibility(View.VISIBLE)
    
    def _filter_fonts(self, query):
        if not query:
            self.filtered_fonts = self.all_fonts
        else:
            query_lower = query.lower()
            self.filtered_fonts = [
                font for font in self.all_fonts
                if query_lower in font.get("family", "").lower()
            ]
        
        if self.adapter:
            self.adapter.set_fonts(self.filtered_fonts)
            self.adapter.notifyDataSetChanged()

    class ListAdapter(object):
        def __init__(self, context, plugin, fragment):
            super().__init__()
            self.mContext = context
            self.plugin = plugin
            self.fragment = fragment
            self.fonts = []

        def set_fonts(self, fonts):
            self.fonts = fonts

        def getItemCount(self):
            return len(self.fonts)

        def isEnabled(self, holder):
            return True

        def onCreateViewHolder(self, parent, viewType):
            view = TextView(self.mContext)
            view.setTextColor(Theme.getColor(Theme.key_dialogTextBlack))
            view.setTextSize(16)
            view.setPadding(AndroidUtilities.dp(16), AndroidUtilities.dp(12), AndroidUtilities.dp(16), AndroidUtilities.dp(12))
            view.setLines(1)
            view.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT)
            view.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector), 2))
            return type("_Holder", (), {"itemView": view})()

        def onBindViewHolder(self, holder, position):
            font_data = self.fonts[position]
            view = holder.itemView
            view.setText(font_data.get("family"))
            
            def on_click():
                self.fragment.finishFragment()
                run_on_ui_thread(lambda: self.plugin._pick_gfont_variant(font_data))
                
            view.setOnClickListener(OnClickListener(on_click))

class SFGlobalFontPlugin(BasePlugin):
    FONT_URL = "https://github.com/Ar4ikTrirtyFour/windose20/raw/refs/heads/main/fonts/zpix.ttf"
    FONT_FILENAME = "global_font.ttf"

    def __init__(self):
        super().__init__()
        self._typeface = None
        self._hooks = []
        self._hooks_applied = False
        self._store_overlay = None
        self._store_items = []
        self._store_filtered_items = []
        self._store_grid_container = None
        self._store_is_loading = False
        self._store_last_append_time = 0.0
        self._store_is_loading = False
        self._store_last_append_time = 0.0
        self._store_is_loading = False
        self._store_loaded_index = 0
        self._fonts_cache_ttl_sec = 3600
        self._store_search_query = ""
        self._store_category = ""
        self._store_search_seq = 0
        self._store_loaded_index = 0
        self._fonts_cache_ttl_sec = 3600
        self._store_search_query = ""

    def on_plugin_load(self):
        if not JAVA_IMPORTS_OK:
            log("[SFGlobalFont] Plugin disabled due to missing Java classes.")
            return
        try:
            if not self.get_setting("enabled", True):
                log("[SFGlobalFont] Disabled by settings")
                return
            self._ensure_typeface_downloaded()
            if not self._typeface:
                log("[SFGlobalFont] Typeface not initialized; aborting hooks.")
                return
            self._apply_global_hooks()
            self._hooks_applied = True
            try:
                self._hijack_system_typefaces()
            except Exception:
                pass
            try:
                # Ensure Theme paints (names/titles/doc names) use our typeface immediately on load
                self._apply_typeface_to_theme_paints()
            except Exception:
                pass
            try:
                # Reload Theme resources and refresh UI to ensure paints are re-created with our typeface
                self._reload_theme_resources_and_refresh_ui()
            except Exception:
                pass
            log("[SFGlobalFont] Hooks applied; global font active.")
        except Exception:
            log(f"[SFGlobalFont] Failed to load plugin: {traceback.format_exc()}")

    def on_plugin_unload(self):
        try:
            for h in self._hooks:
                try:
                    self.unhook_method(h)
                except Exception:
                    pass
            self._hooks.clear()
            log("[SFGlobalFont] Unloaded and unhooked.")
        except Exception:
            pass

    def _get_persistent_font_path(self) -> str:
        try:
            files_dir = ApplicationLoader.applicationContext.getFilesDir()
            dir_path = File(files_dir, f"plugins/{__id__}")
            if not dir_path.exists():
                dir_path.mkdirs()
            return File(dir_path, self.FONT_FILENAME).getAbsolutePath()
        except Exception:
            return os.path.join(os.getcwd(), self.FONT_FILENAME)

    def _ensure_typeface_downloaded(self):
        source = self.get_setting("font_source", 0)
        custom_url = (self.get_setting("custom_url", "") or "").strip()

        if source == 2:
            try:
                self._typeface = getattr(Typeface, "SANS_SERIF", Typeface.DEFAULT)
                log("[SFGlobalFont] Using system default typeface")
            except Exception:
                log(f"[SFGlobalFont] Fallback to system default failed: {traceback.format_exc()}")
            return

        path = self._get_persistent_font_path()
        if not path:
            log("[SFGlobalFont] Invalid persistent path")
            return
        need_download = True
        try:
            if os.path.exists(path) and os.path.getsize(path) > 0:
                need_download = False
        except Exception:
            need_download = True

        if need_download:
            url = self.FONT_URL if source == 0 else custom_url
            if source == 1 and not (url.startswith("http://") or url.startswith("https://")):
                log("[SFGlobalFont] Invalid custom URL")
                return
            run_on_ui_thread(lambda: BulletinHelper.show_info(t("bulletin_downloading")))
            log(f"[SFGlobalFont] Downloading font from {url}")

            def _download_task():
                ok = False
                try:
                    try:
                        import requests as _rq
                        resp = _rq.get(url, timeout=30, stream=True)
                        if resp.status_code == 200:
                            with open(path, "wb") as f:
                                for chunk in resp.iter_content(8192):
                                    if chunk:
                                        f.write(chunk)
                            ok = True
                    except Exception:
                        try:
                            ReadableByteChannel = Channels.newChannel(URL(url).openStream())
                            fos = FileOutputStream(path)
                            fos.getChannel().transferFrom(ReadableByteChannel, 0, Long.MAX_VALUE)
                            fos.close()
                            ok = True
                        except Exception:
                            pass

                    if ok and os.path.exists(path) and os.path.getsize(path) > 0:
                        try:
                            self._typeface = Typeface.createFromFile(path)
                            run_on_ui_thread(lambda: BulletinHelper.show_success(t("bulletin_ready")))
                            if not self._hooks_applied:
                                try:
                                    self._apply_global_hooks()
                                    self._hooks_applied = True
                                except Exception:
                                    pass
                            try:
                                self._hijack_system_typefaces()
                            except Exception:
                                pass
                            run_on_ui_thread(self._refresh_visible_text_views)
                        except Exception:
                            run_on_ui_thread(lambda: BulletinHelper.show_error(t("bulletin_failed")))
                    else:
                        run_on_ui_thread(lambda: BulletinHelper.show_error(t("bulletin_failed")))
                except Exception:
                    log(f"[SFGlobalFont] Font download failed: {traceback.format_exc()}")
                    run_on_ui_thread(lambda: BulletinHelper.show_error(t("bulletin_failed")))

            threading.Thread(target=_download_task, daemon=True).start()


        try:
            if os.path.exists(path) and os.path.getsize(path) > 0:
                self._typeface = Typeface.createFromFile(path)
                if self._typeface is None:
                    log("[SFGlobalFont] Failed to create Typeface from file")
        except Exception:
            log(f"[SFGlobalFont] Typeface init error: {traceback.format_exc()}")
        try:
            self._hijack_system_typefaces()
        except Exception:
            pass

    def _delete_cached_font(self):
        try:
            path = self._get_persistent_font_path()
            if path and os.path.exists(path):
                os.remove(path)
                log(f"[SFGlobalFont] Deleted cached font: {path}")
        except Exception:
            pass

    def _refresh_visible_text_views(self):
        def _apply_on_view(view):
            try:
                if TextView.isInstance(view):
                    try:
                        paint = view.getPaint()
                        if paint is not None and hasattr(paint, "setTypeface") and self._typeface is not None:
                            paint.setTypeface(self._typeface)
                            view.invalidate()
                    except Exception: pass
                if SimpleTextView.isInstance(view):
                    try:
                        tp = view.getTextPaint()
                        if tp is not None and hasattr(tp, "setTypeface") and self._typeface is not None:
                            tp.setTypeface(self._typeface)
                            view.invalidate()
                    except Exception: pass

                if ViewGroup.isInstance(view):
                    try:
                        count = view.getChildCount()
                        for i in range(count):
                            _apply_on_view(view.getChildAt(i))
                    except Exception: pass
            except Exception: pass

        def run():
            try:
                fragment = get_last_fragment()
                if not fragment: return
                activity = fragment.getParentActivity()
                if not activity: return
                decor = activity.getWindow().getDecorView()
                if decor: _apply_on_view(decor)
            except Exception: pass
        run_on_ui_thread(run)

    def _on_font_settings_changed(self):
        try:
            if not self.get_setting("enabled", True):
                self.on_plugin_unload() 
                return
            
            if not self._hooks:
                 self.on_plugin_load()

            source = self.get_setting("font_source", 0)
            if source in (0, 1):
                self._delete_cached_font()
            self._ensure_typeface_downloaded()
            try:
                self._hijack_system_typefaces()
            except Exception:
                pass
            try:
                # Ensure Theme paints for names/titles/doc names use our typeface
                self._apply_typeface_to_theme_paints()
            except Exception:
                pass
            try:
                # Reload and refresh UI so changes take effect everywhere
                self._reload_theme_resources_and_refresh_ui()
            except Exception:
                pass
            self._refresh_visible_text_views()
            BulletinHelper.show_success(t("bulletin_ready"))
        except Exception:
            BulletinHelper.show_error(t("bulletin_failed"))

    def _hijack_system_typefaces(self):
        try:
            if not self._typeface:
                return
            TFClass = Typeface.getClass() if hasattr(Typeface, 'getClass') else Typeface
            # Replace common static defaults
            for fname in ("DEFAULT", "DEFAULT_BOLD", "SANS_SERIF", "SERIF", "MONOSPACE"):
                try:
                    f = TFClass.getDeclaredField(fname)
                    f.setAccessible(True)
                    f.set(None, self._typeface)
                except Exception:
                    pass
            # Replace defaults array if present
            for fname in ("sDefaults", "DEFAULT_FAMILY"):
                try:
                    f = TFClass.getDeclaredField(fname)
                    f.setAccessible(True)
                    arr = f.get(None)
                    if arr is not None:
                        try:
                            length = len(arr)
                            for i in range(length):
                                try:
                                    arr[i] = self._typeface
                                except Exception:
                                    pass
                            f.set(None, arr)
                        except Exception:
                            pass
                except Exception:
                    pass
            # Update system font map if available
            for fname in ("sSystemFontMap", "SYSTEM_FONT_MAP"):
                try:
                    f = TFClass.getDeclaredField(fname)
                    f.setAccessible(True)
                    m = f.get(None)
                    if m is not None:
                        # Common family names used by Telegram/Android
                        keys = [
                            "sans-serif", "sans-serif-medium", "sans-serif-light", "sans-serif-condensed",
                            "serif", "monospace", "google-sans", "roboto", "roboto-medium", "system"
                        ]
                        for k in keys:
                            try:
                                m.put(k, self._typeface)
                            except Exception:
                                pass
                        f.set(None, m)
                except Exception:
                    pass
        except Exception:
            pass

    def _apply_typeface_to_theme_paints(self):
        try:
            if not self._typeface:
                return
            ThemeClass = find_class("org.telegram.ui.ActionBar.Theme")

            def _set_tp(obj):
                try:
                    if obj is None:
                        return
                    # If it's an array-like of TextPaints
                    try:
                        length = len(obj)
                        for i in range(length):
                            p = obj[i]
                            try:
                                if hasattr(p, 'setTypeface'):
                                    p.setTypeface(self._typeface)
                            except Exception:
                                pass
                        return
                    except Exception:
                        pass
                    # Single TextPaint
                    try:
                        if hasattr(obj, 'setTypeface'):
                            obj.setTypeface(self._typeface)
                    except Exception:
                        pass
                except Exception:
                    pass

            # Names/titles/file names and related paints used in dialogs and chats
            fields = [
                "dialogs_namePaint",
                "dialogs_nameEncryptedPaint",
                "dialogs_messagePaint",
                "dialogs_searchNamePaint",
                "dialogs_timePaint",
                "chat_namePaint",
                "chat_replyNamePaint",
                "chat_docNamePaint",
                "chat_contextResult_titleTextPaint",
                "chat_locationTitlePaint",
                "chat_titleLabelTextPaint",
                "chat_topicTextPaint",
                "profile_aboutTextPaint",
            ]

            for fname in fields:
                try:
                    f = ThemeClass.getDeclaredField(fname)
                    f.setAccessible(True)
                    _set_tp(f.get(None))
                except Exception:
                    pass

            # WebActionBar title paint (some internal screens)
            try:
                WebActionBarClass = find_class("org.telegram.ui.web.WebActionBar")
                wf = WebActionBarClass.getDeclaredField("titlePaint")
                wf.setAccessible(True)
                _set_tp(wf.get(None))
            except Exception:
                pass
        except Exception:
            pass

    def _reload_theme_resources_and_refresh_ui(self):
        try:
            # Recreate Theme resources so paints and caches pick up custom typeface hooks
            Theme.reloadAllResources(ApplicationLoader.applicationContext)
        except Exception:
            pass
        try:
            # Apply typeface to any freshly recreated paints
            self._apply_typeface_to_theme_paints()
        except Exception:
            pass
        try:
            # Invalidate current fragment list to redraw text with updated paints
            fragment = get_last_fragment()
            if fragment:
                try:
                    lv = fragment.getListView()
                except Exception:
                    lv = None
                if lv is None and hasattr(fragment, 'listView'):
                    try:
                        lv = getattr(fragment, 'listView')
                    except Exception:
                        lv = None
                if lv is not None:
                    try:
                        ad = lv.getAdapter() if hasattr(lv, 'getAdapter') else None
                        if ad is not None and hasattr(ad, 'notifyDataSetChanged'):
                            ad.notifyDataSetChanged()
                    except Exception:
                        pass
                    try:
                        if hasattr(lv, 'invalidate'):
                            lv.invalidate()
                    except Exception:
                        pass
        except Exception:
            pass
    
    def create_settings(self):
        lang = Locale.getDefault().getLanguage()
        return [
            Header(
                text=t("settings_header")
            ),
            Switch(key="enabled", 
                text=t("settings_enable"), 
                default=self.get_setting("enabled", True),
                icon="device_web_safari", 
                on_change=lambda v: self._on_font_settings_changed()),
            Selector(
                key="font_source",
                text=t("settings_source"),
                default=self.get_setting("font_source", 0),
                items=t("settings_source_items"),
                icon="msg_photo_text_regular",
                on_change=lambda v: self._on_font_settings_changed(),
            ),
            Input(
                key="custom_url",
                text=t("settings_custom_url"),
                default=self.get_setting("custom_url", ""),
                icon="input_attach",
                subtext=t("settings_custom_url_sub"),
                on_change=lambda v: self._on_font_settings_changed(),
            ),
            Divider(),
            Text(
                text=t("font_store_button"),
                icon="menu_shop_solar",
                on_click=lambda v: self._open_font_store(),
                accent=True,
            ),
            Divider()
        ]

    def _open_font_store(self):
        self._open_google_fonts_store()

    def _apply_global_hooks(self):
        try:
            class BoldReplacement(MethodReplacement):
                _plugin_ref = self
                def replace_hooked_method(self, param):
                    return self._plugin_ref._typeface

            bold_method = AndroidUtilities.getClass().getDeclaredMethod("bold")
            self._hooks.append(self.hook_method(bold_method, BoldReplacement()))
            
            class GetTypefaceReplacement(MethodReplacement):
                _plugin_ref = self
                def replace_hooked_method(self, param):
                    return self._plugin_ref._typeface

            get_typeface_method = AndroidUtilities.getClass().getDeclaredMethod("getTypeface", jclass("java.lang.String"))
            self._hooks.append(self.hook_method(get_typeface_method, GetTypefaceReplacement()))

            class TextViewCtorHook(MethodHook):
                _plugin_ref = self
                def after_hooked_method(self, param):
                    try:
                        tv = param.thisObject
                        if tv and hasattr(tv, "setTypeface"):
                            tv.setTypeface(self._plugin_ref._typeface)
                    except Exception: pass
            
            for ctor_args in [[Context], [Context, AttributeSet], [Context, AttributeSet, Integer.TYPE]]:
                try:
                    ctor = TextView.getConstructor(*ctor_args)
                    self._hooks.append(self.hook_method(ctor, TextViewCtorHook()))
                except Exception: pass
            
            class SimpleTextViewCtorHook(MethodHook):
                _plugin_ref = self
                def after_hooked_method(self, param):
                    try:
                        v = param.thisObject
                        if v and hasattr(v, "setTypeface"):
                            v.setTypeface(self._plugin_ref._typeface)
                    except Exception: pass
            try:
                SimpleTextViewClass = SimpleTextView.getClass() if hasattr(SimpleTextView, "getClass") else SimpleTextView
                ctor = SimpleTextViewClass.getDeclaredConstructor(Context)
                self._hooks.append(self.hook_method(ctor, SimpleTextViewCtorHook()))
            except Exception:
                pass

            class SimpleTextViewSetTypefaceReplacement(MethodReplacement):
                _plugin_ref = self
                def replace_hooked_method(self, param):
                    try:
                        v = param.thisObject
                        if v is not None and hasattr(v, 'getTextPaint') and self._plugin_ref._typeface is not None:
                            tp = v.getTextPaint()
                            if tp is not None:
                                tp.setTypeface(self._plugin_ref._typeface)
                        if hasattr(v, 'invalidate'):
                            v.invalidate()
                    except Exception:
                        pass
                    return None
            
            try:
                SimpleTextViewClass = SimpleTextView.getClass() if hasattr(SimpleTextView, "getClass") else SimpleTextView
                set_m = SimpleTextViewClass.getDeclaredMethod("setTypeface", Typeface)
                self._hooks.append(self.hook_method(set_m, SimpleTextViewSetTypefaceReplacement()))
            except Exception:
                pass

            try:
                ATVClass = AnimatedTextView.getClass() if hasattr(AnimatedTextView, "getClass") else AnimatedTextView
                class AnimatedTextViewCtorHook(MethodHook):
                    _plugin_ref = self
                    def after_hooked_method(self, param):
                        try:
                            v = param.thisObject
                            if v and hasattr(v, "setTypeface"):
                                v.setTypeface(self._plugin_ref._typeface)
                        except Exception:
                            pass
                for ctor_sig in ([Context], [Context, AttributeSet]):
                    try:
                        ctor = ATVClass.getDeclaredConstructor(*ctor_sig)
                        self._hooks.append(self.hook_method(ctor, AnimatedTextViewCtorHook()))
                    except Exception:
                        pass
            except Exception:
                pass

            # Enforce typeface when AnimatedTextView.setTypeface is called
            try:
                ATVClass2 = AnimatedTextView.getClass() if hasattr(AnimatedTextView, "getClass") else AnimatedTextView
                class AnimatedTextViewSetTypefaceReplacement(MethodReplacement):
                    _plugin_ref = self
                    def replace_hooked_method(self, param):
                        try:
                            v = param.thisObject
                            if v is not None and hasattr(v, 'setTypeface') and self._plugin_ref._typeface is not None:
                                v.setTypeface(self._plugin_ref._typeface)
                        except Exception:
                            pass
                        return None
                try:
                    set_m = ATVClass2.getDeclaredMethod("setTypeface", Typeface)
                    self._hooks.append(self.hook_method(set_m, AnimatedTextViewSetTypefaceReplacement()))
                except Exception:
                    pass
            except Exception:
                pass

            try:
                set_tp = TextPaint.getClass().getDeclaredMethod("setTypeface", Typeface)
                class TextPaintSetTypefaceReplacement(MethodReplacement):
                    _plugin_ref = self
                    def replace_hooked_method(self, param):
                        try:
                            tp_obj = param.thisObject
                            if tp_obj is not None and self._plugin_ref._typeface is not None:
                                tp_obj.setTypeface(self._plugin_ref._typeface)
                        except Exception:
                            pass
                        return None
                self._hooks.append(self.hook_method(set_tp, TextPaintSetTypefaceReplacement()))
            except Exception:
                pass

            # Intercept TextView.setTypeface(Typeface) and setTypeface(Typeface, int)
            try:
                TVClass = TextView.getClass() if hasattr(TextView, "getClass") else TextView
                class TextViewSetTypefaceReplacement(MethodReplacement):
                    _plugin_ref = self
                    def replace_hooked_method(self, param):
                        try:
                            tv = param.thisObject
                            if tv is not None and self._plugin_ref._typeface is not None:
                                p = tv.getPaint()
                                if p is not None:
                                    p.setTypeface(self._plugin_ref._typeface)
                                tv.invalidate()
                        except Exception:
                            pass
                        return None
                try:
                    set_m1 = TVClass.getDeclaredMethod("setTypeface", Typeface)
                    self._hooks.append(self.hook_method(set_m1, TextViewSetTypefaceReplacement()))
                except Exception:
                    pass
                try:
                    set_m2 = TVClass.getDeclaredMethod("setTypeface", Typeface, Integer.TYPE)
                    self._hooks.append(self.hook_method(set_m2, TextViewSetTypefaceReplacement()))
                except Exception:
                    pass
            except Exception:
                pass

            # Apply typeface on EditTextBoldCursor constructors (input field), if available
            try:
                if EditTextBoldCursor is not None:
                    EBCClass = EditTextBoldCursor.getClass() if hasattr(EditTextBoldCursor, 'getClass') else EditTextBoldCursor
                    class EditTextBoldCursorCtorHook(MethodHook):
                        _plugin_ref = self
                        def after_hooked_method(self, param):
                            try:
                                v = param.thisObject
                                if v and hasattr(v, 'setTypeface') and self._plugin_ref._typeface is not None:
                                    v.setTypeface(self._plugin_ref._typeface)
                            except Exception:
                                pass
                    for ctor_sig in ([Context], [Context, AttributeSet]):
                        try:
                            ctor = EBCClass.getDeclaredConstructor(*ctor_sig)
                            self._hooks.append(self.hook_method(ctor, EditTextBoldCursorCtorHook()))
                        except Exception:
                            pass
            except Exception:
                pass

            # Apply typeface on NumberTextView constructors (counters), if available
            try:
                if NumberTextView is not None:
                    NVClass = NumberTextView.getClass() if hasattr(NumberTextView, 'getClass') else NumberTextView
                    class NumberTextViewCtorHook(MethodHook):
                        _plugin_ref = self
                        def after_hooked_method(self, param):
                            try:
                                v = param.thisObject
                                if v and hasattr(v, 'setTypeface') and self._plugin_ref._typeface is not None:
                                    v.setTypeface(self._plugin_ref._typeface)
                            except Exception:
                                pass
                    for ctor_sig in ([Context], [Context, AttributeSet]):
                        try:
                            ctor = NVClass.getDeclaredConstructor(*ctor_sig)
                            self._hooks.append(self.hook_method(ctor, NumberTextViewCtorHook()))
                        except Exception:
                            pass
            except Exception:
                pass

            try:
                TFClass = Typeface.getClass() if hasattr(Typeface, "getClass") else Typeface
                class TypefaceStaticReplacement(MethodReplacement):
                    _plugin_ref = self
                    def replace_hooked_method(self, param):
                        return self._plugin_ref._typeface
                try:
                    m = TFClass.getDeclaredMethod("create", TFClass, Integer.TYPE)
                    self._hooks.append(self.hook_method(m, TypefaceStaticReplacement()))
                except Exception:
                    pass
                try:
                    jString = jclass("java.lang.String")
                    m = TFClass.getDeclaredMethod("create", jString, Integer.TYPE)
                    self._hooks.append(self.hook_method(m, TypefaceStaticReplacement()))
                except Exception:
                    pass
                try:
                    m = TFClass.getDeclaredMethod("defaultFromStyle", Integer.TYPE)
                    self._hooks.append(self.hook_method(m, TypefaceStaticReplacement()))
                except Exception:
                    pass
            except Exception:
                pass

        except Exception:
            log(f"[SFGlobalFont] Error applying hooks: {traceback.format_exc()}")

    def _open_google_fonts_store(self):
        try:
            import requests as _rq
        except Exception:
            BulletinHelper.show_error(t("requests_missing"))
            return

        def build_loading_overlay():
            try:
                fragment = get_last_fragment()
                activity = fragment.getParentActivity() if fragment else None
                if not activity:
                    return
                FrameLayoutClass = find_class("android.widget.FrameLayout")
                ThemeClass = find_class("org.telegram.ui.ActionBar.Theme")
                ProgressBarClass = find_class("android.widget.ProgressBar")
                overlay = FrameLayoutClass(activity)
                overlay.setClickable(True)
                overlay.setBackgroundColor(ThemeClass.getColor(ThemeClass.key_windowBackgroundWhite))
                params_full = jclass("android.widget.FrameLayout$LayoutParams")(-1, -1)
                activity.getWindow().getDecorView().addView(overlay, params_full)
                pb = ProgressBarClass(activity)
                lp = jclass("android.widget.FrameLayout$LayoutParams")(-2, -2)
                try:
                    GravityClass = find_class("android.view.Gravity")
                    setattr(lp, "gravity", GravityClass.CENTER)
                except Exception:
                    pass
                overlay.addView(pb, lp)
                self._store_overlay = overlay
            except Exception:
                pass

        run_on_ui_thread(build_loading_overlay)

        def fetch_and_show():
            items = []
            try:
                api_key = "AIzaSyBZBi89KDR77uodfz4y14M69ZOI9vQwn3E"
                url = f"https://www.googleapis.com/webfonts/v1/webfonts?key={api_key}&sort=popularity"
                resp = _rq.get(url, timeout=10)
                if resp.status_code == 200:
                    data = resp.json()
                    items = data.get("items", []) if isinstance(data, dict) else []
                    try:
                        self._save_fonts_cache(items)
                    except Exception:
                        pass
            except Exception:
                pass
            run_on_ui_thread(lambda: self._show_fonts_store_overlay(items))

        threading.Thread(target=fetch_and_show, daemon=True).start()

        try:
            cached = self._load_fonts_cache()
            if isinstance(cached, list) and cached:
                run_on_ui_thread(lambda: self._show_fonts_store_overlay(cached))
        except Exception:
            pass

    def _remove_store_overlay(self):
        try:
            if self._store_overlay is not None:
                parent = self._store_overlay.getParent()
                if parent is not None:
                    parent.removeView(self._store_overlay)
            self._store_overlay = None
        except Exception:
            self._store_overlay = None

    def _show_fonts_store_overlay(self, items):
        try:
            fragment = get_last_fragment()
            activity = fragment.getParentActivity() if fragment else None
            if not activity:
                return

            FrameLayoutClass = find_class("android.widget.FrameLayout")
            LinearLayoutClass = find_class("android.widget.LinearLayout")
            ScrollViewClass = find_class("android.widget.ScrollView")
            ThemeClass = find_class("org.telegram.ui.ActionBar.Theme")
            AndroidUtilitiesClass = find_class("org.telegram.messenger.AndroidUtilities")

            overlay = self._store_overlay or FrameLayoutClass(activity)
            overlay.removeAllViews()
            overlay.setClickable(True)
            overlay.setBackgroundColor(ThemeClass.getColor(ThemeClass.key_windowBackgroundWhite))

            pad = AndroidUtilitiesClass.dp(12)
            root = LinearLayoutClass(activity)
            root.setOrientation(LinearLayoutClass.VERTICAL)
            root.setPadding(pad, pad, pad, pad)
            overlay.addView(root, jclass("android.widget.FrameLayout$LayoutParams")(-1, -1))

            header = LinearLayoutClass(activity)
            header.setOrientation(LinearLayoutClass.HORIZONTAL)
            title = TextView(activity)
            title.setText(t("font_store_title"))
            try:
                ColorClass = find_class("android.graphics.Color")
                title.setTextColor(ColorClass.BLACK)
            except Exception:
                title.setTextColor(ThemeClass.getColor(ThemeClass.key_dialogTextBlack))
            title.setTextSize(20)
            header.addView(title, jclass("android.widget.LinearLayout$LayoutParams")(0, -2, 1.0))
            close = TextView(activity)
            close.setText("‚úï")
            close.setTextSize(18)
            try:
                close.setTextColor(ColorClass.BLACK)
            except Exception:
                pass
            close.setPadding(pad, 0, pad, 0)
            close.setOnClickListener(OnClickListener(lambda: self._remove_store_overlay()))
            header.addView(close, jclass("android.widget.LinearLayout$LayoutParams")(-2, -2))
            root.addView(header, jclass("android.widget.LinearLayout$LayoutParams")(-1, -2))
            try:
                HSV = find_class("android.widget.HorizontalScrollView")
                chipsScroll = HSV(activity)
                chipsScroll.setHorizontalScrollBarEnabled(False)
                chipsRow = LinearLayoutClass(activity)
                chipsRow.setOrientation(LinearLayoutClass.HORIZONTAL)
                chipsScroll.addView(chipsRow, jclass("android.widget.LinearLayout$LayoutParams")(-2, -2))

                def add_chip(label, value):
                    chip = TextView(activity)
                    chip.setText(label)
                    chip.setTextSize(13)
                    chip.setPadding(pad, pad//2, pad, pad//2)
                    chip_lp = jclass("android.widget.LinearLayout$LayoutParams")(-2, -2)
                    chip_lp.setMargins(0, pad//2, pad//2, pad//2)
                    try:
                        gd = find_class("android.graphics.drawable.GradientDrawable")()
                        gd.setCornerRadius(AndroidUtilitiesClass.dp(12))
                        ColorClass = find_class("android.graphics.Color")
                        gd.setColor(ColorClass.rgb(240, 240, 240))
                        gd.setStroke(AndroidUtilitiesClass.dp(1), ThemeClass.getColor(ThemeClass.key_divider))
                        chip.setBackground(gd)
                        chip.setTextColor(ColorClass.BLACK)
                    except Exception:
                        pass
                    chip.setOnClickListener(OnClickListener(lambda v=None, val=value: (setattr(self, '_store_category', val), self._filter_fonts_store(self._store_search_query))))
                    chipsRow.addView(chip, chip_lp)

                add_chip("–í—Å–µ", "")
                add_chip("Sans", "sans-serif")
                add_chip("Serif", "serif")
                add_chip("Mono", "monospace")
                add_chip("Display", "display")
                add_chip("Handwriting", "handwriting")

                root.addView(chipsScroll, jclass("android.widget.LinearLayout$LayoutParams")(-1, -2))
            except Exception:
                pass
            search = jclass("org.telegram.ui.Components.EditTextBoldCursor")(activity)
            search.setHint(t("font_store_search_hint"))
            search.setTextColor(ThemeClass.getColor(ThemeClass.key_windowBackgroundWhiteBlackText))
            search.setHintTextColor(ThemeClass.getColor(ThemeClass.key_dialogTextHint))
            root.addView(search, jclass("android.widget.LinearLayout$LayoutParams")(-1, -2))
            try:
                TextWatcherClass = find_class("android.text.TextWatcher")
                plugin_ref = self
                class _Watcher(dynamic_proxy(TextWatcherClass)):
                    def afterTextChanged(self, s):
                        try:
                            q = str(s.toString())
                            plugin_ref._store_search_query = q
                            seq = getattr(plugin_ref, '_store_search_seq', 0) + 1
                            plugin_ref._store_search_seq = seq
                            def delayed():
                                import time as _t
                                _t.sleep(0.18)
                                if getattr(plugin_ref, '_store_search_seq', 0) == seq:
                                    run_on_ui_thread(lambda: plugin_ref._filter_fonts_store(q))
                            threading.Thread(target=delayed, daemon=True).start()
                        except Exception:
                            pass
                    def beforeTextChanged(self, s, start, count, after):
                        return None
                    def onTextChanged(self, s, start, before, count):
                        return None
                search.addTextChangedListener(_Watcher())
            except Exception:
                pass

            scroll = ScrollViewClass(activity)
            grid_container = LinearLayoutClass(activity)
            grid_container.setOrientation(LinearLayoutClass.VERTICAL)
            scroll.addView(grid_container, jclass("android.widget.LinearLayout$LayoutParams")(-1, -1))
            root.addView(scroll, jclass("android.widget.LinearLayout$LayoutParams")(-1, -1))

            self._store_grid_container = grid_container
            self._store_items = items or []
            self._store_filtered_items = list(self._store_items)

            self._store_loaded_index = 0
            self._append_next_batch(activity, ThemeClass, AndroidUtilitiesClass, FrameLayoutClass, LinearLayoutClass, 16)

            try:
                OnScrollChangeListener = find_class("android.view.View$OnScrollChangeListener")
                plugin_ref = self
                class _SCL(dynamic_proxy(OnScrollChangeListener)):
                    def onScrollChange(self, v, scrollX, scrollY, oldScrollX, oldScrollY):
                        try:
                            child = scroll.getChildAt(0)
                            if child is not None:
                                bottom = scroll.getScrollY() + scroll.getHeight()
                                maxY = child.getHeight()
                                if bottom >= maxY - AndroidUtilitiesClass.dp(4):
                                    if not plugin_ref._store_is_loading:
                                        run_on_ui_thread(lambda: plugin_ref._append_next_batch(activity, ThemeClass, AndroidUtilitiesClass, FrameLayoutClass, LinearLayoutClass, 16))
                        except Exception:
                            pass
                scroll.setOnScrollChangeListener(_SCL())
            except Exception:
                pass

            if self._store_overlay is None:
                activity.getWindow().getDecorView().addView(overlay, jclass("android.widget.FrameLayout$LayoutParams")(-1, -1))
                self._store_overlay = overlay
        except Exception:
            BulletinHelper.show_error("UI error")

    def _render_fonts_grid(self, activity, ThemeClass, AndroidUtilitiesClass, FrameLayoutClass, LinearLayoutClass, items):
        try:
            if not self._store_grid_container:
                return
            pad = AndroidUtilitiesClass.dp(12)
            sample_text = "–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä! 12345 –ê–ë–í–ì–î –∞–±–≤–≥–¥"
            i = 0
            while i < len(items):
                row = LinearLayoutClass(activity)
                row.setOrientation(LinearLayoutClass.HORIZONTAL)
                try:
                    row.setAlpha(0.0)
                except Exception:
                    pass
                for c in range(2):
                    idx = i + c
                    card = FrameLayoutClass(activity)
                    lp = jclass("android.widget.LinearLayout$LayoutParams")(0, -2, 1.0)
                    if c == 0:
                        lp.setMargins(0, pad//2, pad//2, pad//2)
                    else:
                        lp.setMargins(pad//2, pad//2, 0, pad//2)
                    if idx < len(items):
                        it = items[idx]
                        fam = it.get("family", "?")
                        variants = it.get("variants", [])
                        files = it.get("files", {})
                        author = it.get("category", "Unknown")

                        card_bg = LinearLayoutClass(activity)
                        card_bg.setOrientation(LinearLayoutClass.VERTICAL)
                        card_bg.setPadding(pad, pad, pad, pad)
                        card.addView(card_bg, jclass("android.widget.FrameLayout$LayoutParams")(-1, -2))
                        try:
                            GradientDrawable = find_class("android.graphics.drawable.GradientDrawable")
                            ColorClass = find_class("android.graphics.Color")
                            gd = GradientDrawable()
                            gd.setColor(ColorClass.rgb(245, 245, 245))
                            gd.setCornerRadius(AndroidUtilitiesClass.dp(10))
                            gd.setStroke(AndroidUtilitiesClass.dp(2), ThemeClass.getColor(ThemeClass.key_divider))
                            card.setBackground(gd)
                        except Exception:
                            pass

                        name_tv = TextView(activity)
                        name_tv.setText(fam)
                        name_tv.setTextSize(16)
                        try:
                            ColorClass = find_class("android.graphics.Color")
                            name_tv.setTextColor(ColorClass.BLACK)
                        except Exception:
                            name_tv.setTextColor(ThemeClass.getColor(ThemeClass.key_dialogTextBlack))
                        card_bg.addView(name_tv, jclass("android.widget.LinearLayout$LayoutParams")(-1, -2))

                        meta_tv = TextView(activity)
                        meta_tv.setText(f"–í–∞—Ä–∏–∞—Ü–∏–π: {len(variants)} ‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {author}")
                        meta_tv.setTextSize(12)
                        meta_tv.setTextColor(ThemeClass.getColor(ThemeClass.key_dialogTextHint))
                        card_bg.addView(meta_tv, jclass("android.widget.LinearLayout$LayoutParams")(-1, -2))

                        preview_tv = TextView(activity)
                        preview_tv.setText(sample_text)
                        preview_tv.setTextSize(14)
                        try:
                            ColorClass = find_class("android.graphics.Color")
                            preview_tv.setTextColor(ColorClass.BLACK)
                        except Exception:
                            preview_tv.setTextColor(ThemeClass.getColor(ThemeClass.key_dialogTextBlack))
                        try:
                            if self.plugin._typeface is not None:
                                preview_tv.setTypeface(self.plugin._typeface)
                        except Exception:
                            pass
                        card_bg.addView(preview_tv, jclass("android.widget.LinearLayout$LayoutParams")(-1, -2))
                        preview_url = None
                        try:
                            if isinstance(files, dict):
                                url_reg = files.get("regular")
                                if isinstance(url_reg, str) and (url_reg.endswith('.ttf') or url_reg.endswith('.otf')):
                                    preview_url = url_reg
                                else:
                                    for (_v, u) in files.items():
                                        if isinstance(u, str) and (u.endswith('.ttf') or u.endswith('.otf')):
                                            preview_url = u
                                            break
                        except Exception:
                            preview_url = None
                        if preview_url and (preview_url.startswith("http://") or preview_url.startswith("https://")):
                            def load_preview(url=preview_url, tv=preview_tv, family=fam):
                                try:
                                    import requests as _rq2
                                    resp = _rq2.get(url, timeout=6, stream=True)
                                    if resp.status_code == 200:
                                        preview_path = os.path.join(os.path.dirname(self._get_persistent_font_path()), f"preview_{family}.ttf")
                                        with open(preview_path, "wb") as f:
                                            for chunk in resp.iter_content(8192):
                                                if chunk:
                                                    f.write(chunk)
                                        def apply_tp():
                                            try:
                                                tp = Typeface.createFromFile(preview_path)
                                                if tp:
                                                    tv.setTypeface(tp)
                                            except Exception:
                                                pass
                                        run_on_ui_thread(apply_tp)
                                except Exception:
                                    pass
                            threading.Thread(target=load_preview, daemon=True).start()

                        def on_click_card(view=None, urls=files):
                            target_url = urls.get("regular")
                            if not (isinstance(target_url, str) and (target_url.startswith("http://") or target_url.startswith("https://"))):
                                target_url = None
                                for v, u in urls.items():
                                    if isinstance(u, str) and (u.endswith('.ttf') or u.endswith('.otf')):
                                        target_url = u
                                        break
                            if target_url:
                                self.set_setting("custom_url", target_url)
                                self.set_setting("font_source", 1)
                                self._on_font_settings_changed()
                                self._remove_store_overlay()

                        card.setOnClickListener(OnClickListener(on_click_card))
                    row.addView(card, lp)
                self._store_grid_container.addView(row, jclass("android.widget.LinearLayout$LayoutParams")(-1, -2))
                try:
                    row.animate().alpha(1.0).setDuration(220)
                except Exception:
                    pass
                i += 2
        except Exception:
            pass

    def _filter_fonts_store(self, query):
        try:
            q = (query or "").strip().lower()
            def _worker():
                try:
                    if not q:
                        filtered = list(self._store_items)
                    else:
                        filtered = [it for it in self._store_items if q in (it.get("family", "").lower())]
                    def _apply():
                        try:
                            self._store_filtered_items = filtered
                            if self._store_grid_container:
                                self._store_grid_container.removeAllViews()
                                fragment = get_last_fragment()
                                activity = fragment.getParentActivity() if fragment else None
                                if activity:
                                    ThemeClass = find_class("org.telegram.ui.ActionBar.Theme")
                                    AndroidUtilitiesClass = find_class("org.telegram.messenger.AndroidUtilities")
                                    FrameLayoutClass = find_class("android.widget.FrameLayout")
                                    LinearLayoutClass = find_class("android.widget.LinearLayout")
                                    self._store_loaded_index = 0
                                    self._append_next_batch(activity, ThemeClass, AndroidUtilitiesClass, FrameLayoutClass, LinearLayoutClass, 16)
                        except Exception:
                            pass
                    run_on_ui_thread(_apply)
                except Exception:
                    pass
            threading.Thread(target=_worker, daemon=True).start()
        except Exception:
            pass

    def _get_cache_file(self) -> str:
        try:
            base_dir = os.path.dirname(self._get_persistent_font_path())
            return os.path.join(base_dir, 'webfonts_cache.json')
        except Exception:
            return os.path.join(os.getcwd(), 'webfonts_cache.json')

    def _load_fonts_cache(self):
        try:
            path = self._get_cache_file()
            if not os.path.exists(path):
                return None
            stat = os.stat(path)
            age = int(time.time()) - int(stat.st_mtime)
            if age > 3600:
                return None
            with open(path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                return data if isinstance(data, list) else None
        except Exception:
            return None

    def _save_fonts_cache(self, items):
        try:
            path = self._get_cache_file()
            with open(path, 'w', encoding='utf-8') as f:
                json.dump(items, f)
        except Exception:
            pass

    def _append_next_batch(self, activity, ThemeClass, AndroidUtilitiesClass, FrameLayoutClass, LinearLayoutClass, count):
        try:
            if not self._store_filtered_items or self._store_is_loading:
                return
            now = time.time() if 'time' in globals() else 0.0
            if (now - getattr(self, '_store_last_append_time', 0.0)) < 0.2:
                return
            self._store_is_loading = True
            start = self._store_loaded_index
            end = min(start + count, len(self._store_filtered_items))
            if end <= start:
                self._store_is_loading = False
                return
            batch = self._store_filtered_items[start:end]
            self._render_fonts_grid(activity, ThemeClass, AndroidUtilitiesClass, FrameLayoutClass, LinearLayoutClass, batch)
            self._store_loaded_index = end
            self._store_last_append_time = time.time() if 'time' in globals() else 0.0
        except Exception:
            pass
        finally:
            self._store_is_loading = False

    def _pick_gfont_variant(self, item):
        try:
            files = item.get("files", {}) if isinstance(item, dict) else {}
            candidates = [(variant, url) for variant, url in files.items() if isinstance(url, str) and (url.endswith('.ttf') or url.endswith('.otf'))]
            if not candidates:
                BulletinHelper.show_info(t("gfonts_only_ttf"))
                return

            def show_variant_picker():
                try:
                    fragment = get_last_fragment()
                    ctx = fragment.getParentActivity() if fragment else None
                    if not ctx: return
                    builder = AlertDialogBuilder(ctx)
                    builder.set_title(t("gfonts_pick_variant"))
                    items = [v for (v, _) in candidates]

                    def on_variant(bld, index):
                        try:
                            _, url = candidates[index]
                            self.set_setting("custom_url", url)
                            self.set_setting("font_source", 1)
                            self._on_font_settings_changed()
                            bld.dismiss()
                        except Exception:
                            bld.dismiss()

                    builder.set_items(items, on_variant)
                    builder.set_negative_button("OK", lambda d, w: d.dismiss())
                    builder.show()
                except Exception: pass

            run_on_ui_thread(show_variant_picker)
        except Exception:
            BulletinHelper.show_error("Variant pick error")
