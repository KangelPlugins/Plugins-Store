__id__ = "premium_text"
__name__ = "Premium Text"
__description__ = "Преобразует текст в эмодзи"
__author__ = "@ArThirtyFour"
__min_version__ = "11.9.0"
__version__ = "1.1.0"
__icon__ = "yunochkaaaaaaa/0"

from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import send_message
from markdown_utils import parse_markdown
from java.util import ArrayList
from android_utils import log

emoji_list = {
    'а': '[🔤](5442667851246742007)',
    'б': '[🔤](5442708515997100433)',
    'в': '[🔤](5449413294953606262)',
    'г': '[🔤](5452141660043488430)',
    'д': '[🔤](5451814740017817067)',
    'е': '[🔤](5195169080914486911)',
    'ё': '[🔤](5197457624173389781)',
    'ж': '[🔤](5452108017564657802)',
    'з': '[🔤](5472327074326786286)',
    'и': '[🔤](5449768699202381205)',
    'й': '[🔤](5195365902085792989)',
    'к': '[🔤](5456289915551622074)',
    'л': '[🔤](5474517911374668774)',
    'м': '[🔤](5469720553164122863)',
    'н': '[🔤](5469708475716085118)',
    'о': '[🔤](5449645429346020359)',
    'п': '[🔤](5456332233864391674)',
    'р': '[🔤](5465662534918875863)',
    'с': '[🔤](5463032576119679082)',
    'т': '[🔤](5442819107110004737)',
    'у': '[🔤](5188633966051076002)',
    'ф': '[🔤](5199539798548687111)',
    'х': '[🔤](5453904585204704787)',
    'ц': '[🔤](5199431226070412282)',
    'ч': '[🔤](5204235000962098442)',
    'ш': '[🔤](5451785663089224462)',
    'щ': '[🔤](5201857350016708252)',
    'ъ': '[🔤](5472079100094982899)',
    'ы': '[🔤](5190588236300296545)',
    'ь': '[🔤](5472419270094760054)',
    'э': '[🔤](5447451113374624122)',
    'ю': '[🔤](5188362206290388816)',
    'я': '[🔤](5204256643302303428)',
    '1': '[1️⃣](5235776368905562305)',
    '2': '[2️⃣](5237704680372447424)',
    '3': '[3️⃣](5238044171767393675)',
    '4': '[4️⃣](5235533321001250232)',
    '5': '[5️⃣](5238171599152097811)',
    '6': '[6️⃣](5235500881113263583)',
    '7': '[7️⃣](5237875542761417785)',
    '8': '[8️⃣](5238067300166281132)',
    '9': '[9️⃣](5237872923189090057)',
    '0': '[0️⃣](5238055991517390123)',
    '!': '[🔤](5211108619377977503)',
    '?': '[🔤](5210880311801423356)',
    '(': '[🔤](5256085766009793165)',
    ')': '[🔤](5255844096789983205)',
    '.': '[🔤](5255831662859660095)',
    ',': '[🔤](5255809805771090545)',
    ' ': '[🔤](4992465913241404107)',
    'a': '[🔤](5226734466315067436)',
    'b': '[🔤](5330453760395191684)',
    'c': '[🔤](5330523098347218561)',
    'd': '[🔤](5361630910816984823)',
    'e': '[🔤](5332587336939084375)',
    'f': '[🔤](5330369145244491360)',
    'g': '[🔤](5361861335812416268)',
    'h': '[🔤](5330133162561380231)',
    'i': '[🔤](5381808177547321132)',
    'j': '[🔤](5330383228442258084)',
    'k': '[🔤](5330026574357996347)',
    'l': '[🔤](5332396623211274002)',
    'm': '[🔤](5332321341024508571)',
    'n': '[🔤](5359736027080565026)',
    'o': '[🔤](5361583176550457135)',
    'p': '[🔤](5361909160273255840)',
    'q': '[🔤](5361948540828393629)',
    'r': '[🔤](5332514996804918116)',
    's': '[🔤](5332807088940785741)',
    't': '[🔤](5332558333024934589)',
    'u': '[🔤](5330069773139059849)',
    'v': '[🔤](5395613572531232916)',
    'w': '[🔤](5332308237079288987)',
    'x': '[🔤](5332575697577714724)',
    'y': '[🔤](5332648110726323166)',
    'z': '[🔤](5330309934825351007)'
}

class PremiumTextPlugin(BasePlugin):
    def on_plugin_load(self):
        log("[PremiumText] Plugin loaded")
        self.add_on_send_message_hook()
        log("[PremiumText] Hook registered")
        
    def on_plugin_unload(self):
        log("[PremiumText] Plugin unloaded")
        self.remove_hook("on_send_message")
        
    def on_send_message_hook(self, account, params):
        log("[PremiumText] Message received")
        log(f"[PremiumText] Message content: {params.message if hasattr(params, 'message') else 'No message'}")
        
        if not hasattr(params, 'message') or not isinstance(params.message, str):
            log("[PremiumText] Invalid message format")
            return HookResult()
            
        message_text = params.message.strip()
        log(f"[PremiumText] Stripped message: {message_text}")
        
        if message_text.startswith('.prem_text'):
            log("[PremiumText] Command detected")
            if len(message_text.split(' ')) == 1:
                log("[PremiumText] No text provided")
                send_message({
                    "peer": params.peer,
                    "message": "Пожалуйста, введите текст после команды .prem_text"
                })
                return HookResult(strategy=HookStrategy.CANCEL)
            else:
                log("[PremiumText] Processing text")
                message_for_da = ' '.join(message_text.split(' ')[1:])
                result = ''
                for char in message_for_da.lower():
                    if char in emoji_list:
                        result += emoji_list[char]
                    else:
                        result += char
                
                log(f"[PremiumText] Sending result: {result}")
                parsed_message = parse_markdown(result)
                send_message({
                    "peer": params.peer,
                    "message": parsed_message.text,
                    "entities": [entity.to_tlrpc_object() for entity in parsed_message.entities]
                })
                return HookResult(strategy=HookStrategy.CANCEL)
                
        return HookResult()

            