import os
import time
import requests
from datetime import datetime
from java.util import Locale
from android_utils import log
from base_plugin import BasePlugin, HookResult, HookStrategy
from client_utils import send_message, run_on_queue
from markdown_utils import parse_markdown
from ui.bulletin import BulletinHelper

__id__ = "speedtest"
__name__ = "SpeedTest"
__description__ = "–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ [.speedtest]"
__author__ = "@ArThirtyFour | @KangelPlugins"
__min_version__ = "11.12.1"
__icon__ = "AmehChan4/2"

def _get_lang():
    lang = Locale.getDefault().getLanguage().lower()
    if lang.startswith("ru"):
        return "ru"
    if lang.startswith("uk"):
        return "uk"
    return "en"

def _tr(key, **kwargs):
    lang = _get_lang()
    strings = {
        "en": {
            "testing": "üîÑ Testing upload speed...",
            "error_test": "‚ùå Test error:\n{err}",
            "result_template": "*üìä Internet Upload Test:*\n\n*üì§ Upload:* `{speed}`\n*üïí Ping:* `{ping}`\n\n*üåê Server:* `{location}`\n*üì° Provider:* `{org}`\n\n*‚åöÔ∏è Test took:* `{duration}`\n*üìÖ Time:* `{date}`"
        },
        "ru": {
            "testing": "üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–∞—á–∏...",
            "error_test": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:\n{err}",
            "result_template": "*üìä –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ –æ—Ç–¥–∞—á–∏:*\n\n*üì§ –û—Ç–¥–∞—á–∞:* `{speed}`\n*üïí –ü–∏–Ω–≥:* `{ping}`\n\n*üåê –°–µ—Ä–≤–µ—Ä:* `{location}`\n*üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä:* `{org}`\n\n*‚åöÔ∏è –¢–µ—Å—Ç –∑–∞–Ω—è–ª:* `{duration}`\n*üìÖ –í—Ä–µ–º—è:* `{date}`"
        },
        "uk": {
            "testing": "üîÑ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–¥–¥–∞—á—ñ...",
            "error_test": "‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:\n{err}",
            "result_template": "*üìä –¢–µ—Å—Ç –ª–∏—à–µ –≤—ñ–¥–¥–∞—á—ñ:*\n\n*üì§ –í—ñ–¥–¥–∞—á–∞:* `{speed}`\n*üïí –ü—ñ–Ω–≥:* `{ping}`\n\n*üåê –°–µ—Ä–≤–µ—Ä:* `{location}`\n*üì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä:* `{org}`\n\n*‚åöÔ∏è –¢–µ—Å—Ç —Ç—Ä–∏–≤–∞–≤:* `{duration}`\n*üìÖ –ß–∞—Å:* `{date}`"
        }
    }
    val = strings.get(lang, strings["en"]).get(key, "")
    return val.format(**kwargs) if kwargs else val

class SpeedTestPlugin(BasePlugin):
    def __init__(self):
        super().__init__()

    def create_settings(self):
        return []

    def on_plugin_load(self):
        log("[SpeedTestPlugin] Plugin loading...")
        self.add_on_send_message_hook()
        log("[SpeedTestPlugin] Loaded successfully")

    def on_plugin_unload(self):
        log("[SpeedTestPlugin] Plugin unloading...")
        self.remove_hook("on_send_message_hook")
        log("[SpeedTestPlugin] Unloaded successfully")

    def _format_speed(self, bytes_per_sec):
        log(f"[SpeedTestPlugin] Formatting speed: {bytes_per_sec} bytes/sec")
        if bytes_per_sec <= 0:
            log("[SpeedTestPlugin] Speed is 0 or negative, returning 0 Mbps")
            return "0 Mbps"
        mbits = (bytes_per_sec * 8) / (1024 * 1024)
        result = f"{mbits:.1f} Mbps" if mbits >= 1 else f"{mbits * 1000:.1f} Kbps"
        log(f"[SpeedTestPlugin] Formatted speed: {result}")
        return result

    def _upload_test(self):
        log("[SpeedTestPlugin] Starting upload test...")
        url = "https://speed.cloudflare.com/__up"
        try:
            data = b"0" * (1024 * 1024 * 10)  # 10 MB
            log(f"[SpeedTestPlugin] Upload test: sending {len(data)} bytes")
            start = time.time()
            response = requests.post(url, data=data, timeout=30)
            duration = time.time() - start
            speed = len(data) / duration if duration > 0 else 0
            log(f"[SpeedTestPlugin] Upload test completed: {speed:.2f} bytes/sec in {duration:.2f} seconds")
            return speed
        except Exception as e:
            log(f"[SpeedTestPlugin] Upload test error: {e}")
            return 0

    def _measure_ping(self):
        log("[SpeedTestPlugin] Measuring ping...")
        try:
            start = time.time()
            response = requests.get("https://www.google.com", timeout=10)
            ping = int((time.time() - start) * 1000)
            log(f"[SpeedTestPlugin] Ping measurement: {ping}ms")
            return ping
        except Exception as e:
            log(f"[SpeedTestPlugin] Ping measurement error: {e}")
            return 0

    def _get_network_info(self):
        log("[SpeedTestPlugin] Getting network info...")
        try:
            response = requests.get("https://ipinfo.io/json", timeout=10)
            data = response.json()
            location = f"{data.get('city', 'N/A')}, {data.get('country', 'N/A')}"
            org = data.get('org', 'N/A').replace('AS', '')
            log(f"[SpeedTestPlugin] Network info: location={location}, org={org}")
            return {
                "location": location,
                "org": org
            }
        except Exception as e:
            log(f"[SpeedTestPlugin] Network info error: {e}")
            return {"location": "N/A", "org": "N/A"}

    def on_send_message_hook(self, account, params):
        log(f"[SpeedTestPlugin] on_send_message_hook called")
        if not hasattr(params, 'message') or not isinstance(params.message, str):
            log("[SpeedTestPlugin] No valid message found, returning")
            return HookResult()
        
        msg = params.message.strip()
        log(f"[SpeedTestPlugin] Message text: '{msg}'")
        
        # Handle speedtest command
        if msg.startswith(".speedtest"):
            log("[SpeedTestPlugin] SpeedTest command detected!")
            return self._handle_speedtest(params)
        
        log("[SpeedTestPlugin] Command not detected, returning")
        return HookResult()

    def _handle_speedtest(self, params):
        log("[SpeedTestPlugin] Starting speed test handler")
        
        def run_speedtest():
            log("[SpeedTestPlugin] Running speed test...")
            try:
                start_time = time.time()
                
                log("[SpeedTestPlugin] Getting network info...")
                network_info = self._get_network_info()
                
                log("[SpeedTestPlugin] Measuring ping...")
                ping = self._measure_ping()
                
                log("[SpeedTestPlugin] Testing upload speed...")
                upload_speed = self._upload_test()
                
                duration = time.time() - start_time
                log(f"[SpeedTestPlugin] Test completed in {duration:.2f} seconds")

                result_template = _tr("result_template")
                result_text = result_template.format(
                    speed=self._format_speed(upload_speed),
                    ping=f"{ping}ms",
                    location=network_info["location"],
                    org=network_info["org"],
                    duration=f"{duration:.1f} sec",
                    date=datetime.now().strftime("%d.%m.%Y %H:%M:%S")
                )

                log("[SpeedTestPlugin] Parsing markdown and sending result")
                # Parse markdown and send formatted message
                try:
                    parsed_message = parse_markdown(result_text)
                    message_params = {
                        "peer": getattr(params, "peer", None),
                        "message": parsed_message.text,
                        "entities": []
                    }
                    
                    for raw_entity in parsed_message.entities:
                        tlrpc_entity = raw_entity.to_tlrpc_object()
                        message_params["entities"].append(tlrpc_entity)
                    
                    send_message(message_params)
                    log("[SpeedTestPlugin] Result sent successfully")
                    
                except SyntaxError as e:
                    log(f"[SpeedTestPlugin] Markdown parsing error: {e}")
                    # Fallback to plain text
                    send_message({"peer": getattr(params, "peer", None), "message": result_text})
                    log("[SpeedTestPlugin] Fallback plain text sent")
                    
            except Exception as e:
                log(f"[SpeedTestPlugin] Test error: {e}")
                send_message({"peer": getattr(params, "peer", None), "message": _tr("error_test", err=str(e))})

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ "–ò—â–µ–º..." –∫–∞–∫ –≤ lastfm.plugin
        try:
            log("[SpeedTestPlugin] Showing '–ò—â–µ–º...' bulletin")
            BulletinHelper.show_info("–ò—â–µ–º...")
        except Exception as e:
            log(f"[SpeedTestPlugin] Error showing bulletin: {e}")

        log("[SpeedTestPlugin] Starting speed test in background")
        run_on_queue(lambda: run_speedtest())
        params.message = _tr("testing")
        return HookResult(strategy=HookStrategy.CANCEL)


