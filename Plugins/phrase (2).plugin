__id__ = "phrase"
__name__ = "Заглавные в начале Предложений"
__description__ = "Автоматически создаёт заглавную букву в предложениях и добавляет точку в конце сообщения (настраиваемо)."
__author__ = "@inclu_01"
__version__ = "1.0.2"
__icon__ = "BuligaPlugins/0"
__min_version__ = "11.12.0"

import re
from typing import Any

from base_plugin import BasePlugin, HookResult, HookStrategy
from android_utils import log
from ui.settings import Header, Switch

_SENTENCE_SPLIT_RE = re.compile(r'(?<=[\.\!\?])\s+')

def _capitalize_first_alpha(s: str) -> str:
    for i, ch in enumerate(s):
        if ch.isalpha():
            # preserve preceding whitespace/punctuation
            return s[:i] + s[i].upper() + s[i+1:]
    return s

class PhrasePlugin(BasePlugin):
    def on_plugin_load(self):
        # Регистрация хука, чтобы on_send_message_hook вызывался перед отправкой сообщения.
        self.add_on_send_message_hook()

    def create_settings(self):
        return [
            Header(text="Правила форматирования"),
            Switch(
                key="capitalize_sentences",
                text="Заглавная буква",
                default=True,
                subtext="Если отключено — заглавная в начале предложения не ставится автоматически."
            ),
            Switch(
                key="add_final_dot",
                text="Точка",
                default=True,
                subtext="Если отключено — точка в конце не ставится."
            )
        ]

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        try:
            if not hasattr(params, "message") or not isinstance(params.message, str):
                return HookResult()
            original = params.message
            stripped = original.lstrip()
            if stripped.startswith(".") or stripped.startswith("/") or stripped.startswith("!"):
                return HookResult()
            do_capitalize = self.get_setting("capitalize_sentences", True)
            do_final_dot = self.get_setting("add_final_dot", True)
            if not do_capitalize and not do_final_dot:
                return HookResult()
            msg = original
            #заглавная
            if do_capitalize:
                parts = _SENTENCE_SPLIT_RE.split(msg)
                new_parts = []
                for p in parts:
                    p_stripped = p.lstrip()
                    if not p_stripped:
                        new_parts.append(p)
                        continue
                    leading_ws_len = len(p) - len(p.lstrip())
                    leading = p[:leading_ws_len]
                    content = p[leading_ws_len:]
                    content = _capitalize_first_alpha(content)
                    new_parts.append(leading + content)
                msg = " ".join([part.strip() for part in new_parts]).strip()
            #точка 
            if do_final_dot:
                if msg and msg[-1] not in ".!?":
                    msg = msg + "."
            if msg == original:
                return HookResult()
            params.message = msg
            return HookResult(strategy=HookStrategy.MODIFY, params=params)
        
        except Exception as e:
            try:
                log(f"[PhrasePlugin] error: {e}")
            except Exception:
                pass
            return HookResult()
