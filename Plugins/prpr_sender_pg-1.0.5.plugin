import traceback
from typing import Dict, Any, Optional

from base_plugin import BasePlugin, MenuItemData, MenuItemType
from client_utils import send_message, get_last_fragment
from ui.bulletin import BulletinHelper
from org.telegram.messenger import MessagesController, UserObject

__id__ = "prpr_sender_pg"
__name__ = "PeroPero from Nekogram"
__description__ = "Adds a 'PeroPero' button to the message context menu. When clicked, it sends `/prpr@nickname` (or `/prprID` if no public username) to the chat, using the username or ID of the message sender."
__version__ = "1.0.5"
__author__ = "@Vladislav_01a & @PluginIDEbot"
__icon__ = "msg_contacts_name_solar"
__min_version__ = "11.12.0"

# Сгенерировано в PluginGRT - @PluginIDEbot

class PeroPeroPlugin(BasePlugin):
    def on_plugin_load(self):
        self.add_menu_item(MenuItemData(
            menu_type=MenuItemType.MESSAGE_CONTEXT_MENU,
            text="PeroPero",
            on_click=self.handle_pero_pero_click,
            icon="msg_contacts_14"
        ))
        self.log(f"{__name__} ({__version__}) loaded successfully!")

    def handle_pero_pero_click(self, context: Dict[str, Any]):
        pg_current_fragment = get_last_fragment()
        if not pg_current_fragment:
            BulletinHelper.show_error("Failed to get current UI fragment for feedback. Cannot proceed.", None)
            return

        try:
            message_object = context.get("message")
            if message_object is None:
                BulletinHelper.show_error("Failed to get message details from the context. This button might have been clicked in an unsupported area or on a non-message item.", pg_current_fragment)
                return
            
            pg_target_chat_id: Optional[int] = None
            if hasattr(message_object, 'getDialogId'):
                pg_target_chat_id = message_object.getDialogId()
            else:
                peer_id_obj = getattr(message_object.messageOwner, 'peer_id', None)
                if peer_id_obj:
                    if hasattr(peer_id_obj, 'user_id') and peer_id_obj.user_id != 0:
                        pg_target_chat_id = peer_id_obj.user_id
                    elif hasattr(peer_id_obj, 'chat_id') and peer_id_obj.chat_id != 0:
                        pg_target_chat_id = -peer_id_obj.chat_id
                    elif hasattr(peer_id_obj, 'channel_id') and peer_id_obj.channel_id != 0:
                        pg_target_chat_id = -peer_id_obj.channel_id

            if not pg_target_chat_id:
                BulletinHelper.show_error("Failed to determine the target chat ID. Cannot send command.", pg_current_fragment)
                return

            pg_sender_user_id: Optional[int] = None
            if hasattr(message_object.messageOwner, 'from_id') and hasattr(message_object.messageOwner.from_id, 'user_id'):
                pg_sender_user_id = message_object.messageOwner.from_id.user_id
            elif hasattr(message_object.messageOwner, 'peer_id') and hasattr(message_object.messageOwner.peer_id, 'user_id'):
                 pg_sender_user_id = message_object.messageOwner.peer_id.user_id
            
            if pg_sender_user_id is None:
                if hasattr(message_object.messageOwner, 'peer_id') and hasattr(message_object.messageOwner.peer_id, 'channel_id') and message_object.messageOwner.peer_id.channel_id != 0:
                    BulletinHelper.show_error("Message is from a channel. Cannot retrieve a user's @username or ID for /prpr.", pg_current_fragment)
                    return
                elif hasattr(message_object.messageOwner, 'peer_id') and hasattr(message_object.messageOwner.peer_id, 'chat_id') and message_object.messageOwner.peer_id.chat_id != 0:
                    BulletinHelper.show_error("Message is from a group chat (not a specific user). Cannot retrieve a user's @username or ID for /prpr.", pg_current_fragment)
                    return
                
                BulletinHelper.show_error("Could not determine sender's user ID for @username or ID fallback.", pg_current_fragment)
                return

            pg_account_id = pg_current_fragment.currentAccount if hasattr(pg_current_fragment, 'currentAccount') else 0
            pg_messages_controller = MessagesController.getInstance(pg_account_id)
            pg_sender_user_obj = pg_messages_controller.getUser(pg_sender_user_id)

            if not pg_sender_user_obj:
                BulletinHelper.show_error("Could not retrieve sender's user object from Telegram.", pg_current_fragment)
                return

            pg_sender_username = UserObject.getPublicUsername(pg_sender_user_obj)
            pg_command_target = "" # pg_command_target holds either "@username" or "ID"

            if pg_sender_username:
                pg_command_target = f"@{pg_sender_username}"
            elif pg_sender_user_id:
                # If no public username, fall back to user ID
                pg_command_target = str(pg_sender_user_id)
            else:
                # This case should be rare if pg_sender_user_obj was found, but for robustness
                BulletinHelper.show_error(f"Sender '{pg_sender_user_obj.first_name}' has no public @username and no valid user ID to fall back on. Cannot send /prpr.", pg_current_fragment)
                return

            pg_command_string = f"/prpr{pg_command_target}"

            send_message({
                "peer": pg_target_chat_id,
                "message": pg_command_string
            })

        except Exception as e:
            self.log(f"Error in handle_pero_pero_click: {e}\n{traceback.format_exc()}")
            BulletinHelper.show_error(f"An unexpected error occurred: {e}", pg_current_fragment)