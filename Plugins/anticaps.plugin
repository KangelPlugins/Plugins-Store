import re
from typing import Any, Optional

from ui.bulletin import BulletinHelper
from base_plugin import BasePlugin, HookResult, HookStrategy

__id__ = "anticaps"
__name__ = "Anti Caps"
__version__ = "1.3.1"
__author__ = "@inclu_01 and @buligaEplugins"
__description__ = "Заменяет капс на строчные буквы при превышении порога."
__icon__ = "BuligaPlugins/2"
__min_version__ = "11.9.0"



class AntiCaps(BasePlugin):

    def on_plugin_load(self):
        self.add_on_send_message_hook()
        self.log("Loaded")

    def on_plugin_unload(self):
        self.log("Unloaded")

    def create_settings(self):
        from ui.settings import Header, Input, Switch, Divider
        from ui.alert import AlertDialogBuilder

        def on_threshold_change(val: str):
            try:
                n = int(str(val).strip())
            except Exception:
                n = 80
            if n < 50:
                n = 50
            if n > 100:
                n = 100
            self.set_setting("threshold_percent", str(n))

        def on_notify_toggle(enabled: bool):
            self.set_setting("show_bulletin", enabled)
            if not enabled:
                builder = AlertDialogBuilder(self._get_context())
                builder.set_title("Уведомления отключены") \
                    .set_message("Всплывающие уведомления плагина больше не будут показываться.") \
                    .set_positive_button("Ок") \
                    .show()

        return [
            Header(text="Настройки Anti Caps"),
            Input(
                key="threshold_percent",
                text="Порог капса (50–100)",
                default="70",
                icon="msg_caps_lock",
                on_change=on_threshold_change
            ),
            Input(
                key="exceptions",
                text="Исключения (через запятую, без пробелов)",
                default="USA,NASA,RUS,EU,UK,IT,US,OOO,ООО",
                icon="msg_abbr"
            ),
            Switch(
                key="show_bulletin",
                text="Показывать уведомление",
                default=True,
                icon="msg_info",
                on_change=on_notify_toggle
            ),
            Divider(text="Если капс ≥ порогу(-а), текст будет нормализован. Исключения остаются в капсе.")
        ]


    def _get_context(self):
        try:
            from client_utils import get_last_fragment
            frag = get_last_fragment()
            if frag is not None:
                return frag.getParentActivity()
        except Exception:
            pass
        return None

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        result = HookResult()
        if not hasattr(params, "message") or not isinstance(params.message, str):
            return result

        original = params.message

        ratio = self._uppercase_ratio(original)
        threshold_percent = self._get_threshold_percent()

        if ratio >= threshold_percent / 100.0:
            normalized = self._normalize_text_over_threshold(original)
            if normalized != original:
                params.message = normalized
                result.strategy = HookStrategy.MODIFY
                result.params = params

                if self.get_setting("show_bulletin", True):
                    BulletinHelper.show_success("Капс исправлен!")

        return result

    def _get_threshold_percent(self) -> int:
        raw_value = self.get_setting("threshold_percent", "80")
        try:
            value = int(str(raw_value).strip())
        except Exception:
            value = 80
        if value < 50:
            value = 50
        if value > 100:
            value = 100
        return value

    def _uppercase_ratio(self, text: str) -> float:
        text_wo_urls = re.sub(r"https?://\S+", " ", text)
        letters = [c for c in text_wo_urls if c.isalpha()]
        if not letters:
            return 0.0
        uppers = [c for c in letters if c.isupper()]
        return len(uppers) / len(letters)

    def _normalize_text_over_threshold(self, text: str) -> str:
        exceptions = self._get_exceptions_set()

        def is_url(tok: str) -> bool:
            return re.match(r"https?://\S+", tok) is not None

        tokens = re.split(r"(\s+)", text)
        out = []
        for tok in tokens:
            if tok.strip() == "":
                out.append(tok)
                continue
            if is_url(tok):
                out.append(tok)
                continue

            letters = ''.join([c for c in tok if c.isalpha()])
            upper_letters = letters.upper()
            if len(letters) >= 2 and upper_letters in exceptions:
                rebuilt = []
                idx = 0
                for ch in tok:
                    if ch.isalpha():
                        rebuilt.append(upper_letters[idx])
                        idx += 1
                    else:
                        rebuilt.append(ch)
                out.append(''.join(rebuilt))
            else:
                out.append(tok.lower())

        normalized = "".join(out)
        normalized = self._sentence_case(normalized)
        return normalized

    def _get_exceptions_set(self):
        builtin = {
            "USA", "EU", "UK", "NASA", "NATO", "UNO", "UN",
            "RUS", "UAE", "IT", "US", "OOO", "ООО", "GPU", "CPU",
            "AI", "ML", "QA", "UI", "UX"
        }
        raw = self.get_setting("exceptions", "USA,NASA,RUS,EU,UK,IT,US,OOO,ООО")
        user = set()
        try:
            parts = [p.strip() for p in str(raw).replace(";", ",").split(",") if p.strip()]
            for p in parts:
                user.add(p.upper())
        except Exception:
            pass
        return builtin.union(user)

    def _sentence_case(self, text: str) -> str:
        result_chars = []
        capitalize_next = True
        for ch in text:
            if capitalize_next and ch.isalpha():
                result_chars.append(ch.upper())
                capitalize_next = False
            else:
                result_chars.append(ch)
            if ch in ".!?\n":
                capitalize_next = True
        return "".join(result_chars)


