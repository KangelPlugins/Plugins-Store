__id__ = "number_in_profile_randomizer_rn"
__name__ = "Custom Profile Number"
__author__ = "@RnPlugins @YouRooni with @PluginIDE"
__version__ = "1.0.1"
__description__ = """Меняет номер телефона в вашем профиле на случайный или указанный вами
(Полезно для скринов)"""

__icon__ = "sPluginIDE/5"
__min_version__ = "11.12.0"

import random
from typing import Any


from base_plugin import BasePlugin, MethodHook
from hook_utils import find_class
from ui.settings import Input, Header, Divider
from client_utils import get_user_config
from java.lang import Long as JavaLong, Boolean as JavaBoolean
from org.telegram.messenger import LocaleController


def get_localized_strings():
    lang = LocaleController.getInstance().getCurrentLocale().getLanguage()
    
    strings = {
        "ru": {
            "header_title": "Рандомизатор Номера",
            "header_subtitle": "Номер в вашем профиле будет меняться на случайный при каждом его отображении",
            "settings_title": "Настройки Номера",
            "country_code": "Код страны",
            "country_code_sub": "Только цифры",
            "operator_code": "Код оператора",
            "operator_code_sub": "Если оставить пустым, будет случайным (3 цифры)",
            "custom_numbers": "Кастомные номера",
            "custom_numbers_sub": "Укажите номера через запятую. Если не заполнено, будут генерироваться случайные",
            "default_country_code": "7"
        },
        "uk": {
            "header_title": "Рандомізатор Номера",
            "header_subtitle": "Номер у вашому профілі буде змінюватися на випадковий при кожному його відображенні",
            "settings_title": "Налаштування Номера",
            "country_code": "Код країни",
            "country_code_sub": "Тільки цифри",
            "operator_code": "Код оператора",
            "operator_code_sub": "Якщо залишити порожнім, буде випадковим (3 цифри)",
            "custom_numbers": "Користувацькі номери",
            "custom_numbers_sub": "Вкажіть номери через кому. Якщо не заповнено, будуть генеруватися випадкові",
            "default_country_code": "380"
        },
        "en": {
            "header_title": "Number Randomizer",
            "header_subtitle": "The number in your profile will change to a random one each time it is displayed",
            "settings_title": "Number Settings",
            "country_code": "Country Code",
            "country_code_sub": "Digits only",
            "operator_code": "Operator Code",
            "operator_code_sub": "If left empty, will be random (3 digits)",
            "custom_numbers": "Custom Numbers",
            "custom_numbers_sub": "Enter numbers separated by commas. If empty, random numbers will be generated",
            "default_country_code": "1"
        }
    }
    
    return strings.get(lang, strings["en"])
    
class RandomPhonePlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self.hooks_pi = []
        self.real_user_id = 0
        self.plugin_handlers = {}
        
    def modify_user_phone(self, user_object):
        if not user_object or not hasattr(user_object, 'id') or user_object.id != self.real_user_id:
            return
            
        try:

            s = get_localized_strings()
            default_code = s["default_country_code"]
            

            custom_numbers_str = self.get_setting("custom_numbers", "").strip()
            

            if custom_numbers_str:
                try:

                    custom_numbers = [num.strip() for num in custom_numbers_str.split(',') if num.strip()]
                    if custom_numbers:

                        user_object.phone = random.choice(custom_numbers)
                        return
                except Exception as e:
                    self.log(f"Ошибка при обработке кастомных номеров: {e}")

            

            country_code = self.get_setting("country_code", default_code).strip()
            operator_code = self.get_setting("operator_code", "").strip()
            
            if not country_code:

                country_code = default_code
            
            if not operator_code:
                operator_code = str(random.randint(900, 999))
            
            remaining_digits = ''.join([str(random.randint(0, 9)) for _ in range(7)])
            
            full_number = country_code + operator_code + remaining_digits
            
            user_object.phone = full_number
        except Exception as e:
            self.log(f"Ошибка при генерации случайного номера: {e}")
    
    def on_plugin_load(self):
        try:
            self.real_user_id = get_user_config().getClientUserId()
            if not self.real_user_id:
                self.log("Не удалось получить ID пользователя. Плагин будет неактивен.")
                return
        except Exception as e:
            self.log(f"Ошибка при получении ID пользователя: {e}")
            return
        
        class GenericHook(MethodHook):
            def __init__(self, plugin, modification_func):
                super().__init__()
                self.plugin = plugin
                self.modification_func = modification_func
            def process_user(self, user):
                self.modification_func(user)
        
        class UserGetHook(GenericHook):
            def after_hooked_method(self, param):
                self.process_user(param.getResult())
        
        class UserPutHook(GenericHook):
            def before_hooked_method(self, param):
                if param.args:
                    self.process_user(param.args[0])
        
        class UserListPutHook(GenericHook):
            def before_hooked_method(self, param):
                if param.args and param.args[0]:
                    try:
                        user_list_pi = param.args[0]
                        for i in range(user_list_pi.size()):
                           self.process_user(user_list_pi.get(i))
                    except Exception as e:
                        self.plugin.log(f"Ошибка в UserListPutHook: {e}")
        
        class ProcessUpdatesHook(GenericHook):
            def before_hooked_method(self, param):
                if param.args and param.args[0]:
                    updates_obj = param.args[0]
                    if hasattr(updates_obj, 'users') and updates_obj.users:
                        for user in updates_obj.users:
                            self.process_user(user)
        
        self.plugin_handlers = {
            "get": UserGetHook(self, self.modify_user_phone),
            "put": UserPutHook(self, self.modify_user_phone),
            "list_put": UserListPutHook(self, self.modify_user_phone),
            "updates": ProcessUpdatesHook(self, self.modify_user_phone),
        }
        
        self.setup_hooks()
        
    def setup_hooks(self):
        hook_configs = [
            ("org.telegram.messenger.UserConfig", "getCurrentUser", [], self.plugin_handlers["get"]),
            ("org.telegram.messenger.MessagesController", "getUser", [JavaLong.TYPE], self.plugin_handlers["get"]),
            ("org.telegram.messenger.MessagesStorage", "getUser", [JavaLong.TYPE], self.plugin_handlers["get"]),
            ("org.telegram.messenger.MessagesController", "putUser", [find_class("org.telegram.tgnet.TLRPC$User"), JavaBoolean.TYPE], self.plugin_handlers["put"]),
            ("org.telegram.messenger.MessagesStorage", "putUsersAndChats", [find_class("java.util.ArrayList"), find_class("java.util.ArrayList"), JavaBoolean.TYPE, JavaBoolean.TYPE], self.plugin_handlers["list_put"]),
            ("org.telegram.messenger.MessagesController", "processUpdates", [find_class("org.telegram.tgnet.TLRPC$Updates"), JavaBoolean.TYPE], self.plugin_handlers["updates"])
        ]
        
        for class_name, method_name, args, handler in hook_configs:
            try:
                TargetClass = find_class(class_name)
                method = TargetClass.getClass().getDeclaredMethod(method_name, *args)
                method.setAccessible(True)
                self.hooks_pi.append(self.hook_method(method, handler))
            except Exception as e:
                self.log(f"Не удалось установить хук на {class_name}.{method_name}: {e}")
    
    def on_plugin_unload(self):
        pass
    
    def create_settings(self):
        s = get_localized_strings()
        return [
            Header(text=s["header_title"]),
            Divider(text=s["header_subtitle"]),
            
            Header(text=s["settings_title"]),
            Input(
                key="country_code",
                text=s["country_code"],
                subtext=s["country_code_sub"],
                default=s["default_country_code"], 
                icon="msg_language"
            ),
            Input(
                key="operator_code", 
                text=s["operator_code"], 
                subtext=s["operator_code_sub"],
                default="", 
                icon="input_bot2"
            ),
            Input(
                key="custom_numbers",
                text=s["custom_numbers"],
                subtext=s["custom_numbers_sub"],
                default="",
                icon="input_bot1"
            ),
        ]