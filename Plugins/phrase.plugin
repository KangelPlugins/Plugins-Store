__id__ = "phrase"
__name__ = "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"
__description__ = "–ò–ò –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –ê–Ω—Ç–∏-–ú–∞—Ç, –ê–Ω—Ç–∏-–ö–∞–ø—Å, –¢–æ—á–∫–∞ –≤ –∫–æ–Ω—Ü–µ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ (—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞)."
__author__ = "@inclu_01 @nirs_offc and @buligaEplugins "
__version__ = "2.0.0"
__icon__ = "BuligaPlugins/1"
__min_version__ = "11.12.0"

import re
import json
import requests
from typing import Any, Optional

from base_plugin import BasePlugin, HookResult, HookStrategy
from android_utils import log, run_on_ui_thread
from client_utils import run_on_queue, send_message, get_last_fragment

_SENTENCE_SPLIT_RE = re.compile(r'(?<=[\.\!\?])\s+')


def _capitalize_first_alpha(s: str) -> str:
    for i, ch in enumerate(s):
        if ch.isalpha():
            return s[:i] + s[i].upper() + s[i+1:]
    return s


class PhrasePlugin(BasePlugin):
    def __init__(self):
        super().__init__()
        self._progress_dialog = None
        self._sent_messages = set()
        self._emote_patterns = self._build_emote_patterns()
        self._last_ai_in = None
        self._last_ai_out = None

    def on_plugin_load(self):
        try:
            self.add_on_send_message_hook()
        except Exception:
            pass

    def create_settings(self):
        from ui.settings import Header, Switch, Text, Divider, Input, Selector
        ai_enabled = self._get_bool_setting("ai_correction", False)
        profanity_enabled = self._get_bool_setting("profanity_filter", False)

        settings = [
            Header(text="–ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"),
            Switch(
                key="capitalize_sentences",
                text="–ó–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞",
                default=True,
                subtext="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç–∞–≤–∏—Ç –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –≤ –Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è",
                icon="msg_palette"
            ),
            Switch(
                key="add_final_dot",
                text="–¢–æ—á–∫–∞ –≤ –∫–æ–Ω—Ü–µ",
                default=True,
                subtext="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–æ—á–∫—É –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
                icon="msg_palette"
            ),
            Switch(
                key="ascii_emotes_replace",
                text="–ó–∞–º–µ–Ω–∞ ASCII-—Å–º–∞–π–ª–æ–≤ –Ω–∞ —ç–º–æ–¥–∑–∏",
                default=False,
                subtext=":) :( XD ‚Üí üôÇ üòü üòÜ",
                icon="msg_palette"
            ),
            Switch(
                key="ai_correction",
                text="–ò–ò: –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è",
                default=False,
                subtext="–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏, –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Å—Ç–∏–ª–∏.",
                icon="msg_photo_text_regular"
            )
        ]

        if ai_enabled:
            settings.extend([
                Divider(),
                Header(text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ø—Å–∞ (–ò–ò)"),
                Selector(
                    key="ai_caps_threshold",
                    text="–ß—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–ø—Å–∞",
                    default=4,
                    items=["–û—Ç–∫–ª—é—á–µ–Ω–æ", "50%", "60%", "70%", "80%", "90%", "100%"],
                    icon="msg_timer"
                )
            ])

        settings.extend([
            Divider(),
            Switch(
                key="profanity_filter",
                text="–ê–Ω—Ç–∏-–ú–∞—Ç [RUS ONLY]",
                default=False,
                subtext="–ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ —Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã (–¢–û–õ–¨–ö–û –î–õ–Ø –†–£–°–°–ö–û–ì–û –Ø–ó–´–ö–ê)",
                icon="msg_info"
            )
        ])
        
        

        if not ai_enabled:
            settings.extend([
                Divider(),
                Header(text="–ö–æ–º–∞–Ω–¥—ã"),
                Switch(
                    key="er_command",
                    text=".er: —Ä–∞–∑–æ–≤–æ–µ –ò–ò-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                    default=False,
                    subtext="–†–∞–∑—Ä–µ—à–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .er –¥–ª—è *—Ä–∞–∑–æ–≤–æ–≥–æ* –ò–ò-–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ü–∏—Å–∞—Ç—å –≤–Ω–∞—á–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–∞–º .er –ø—Ä–æ–ø–∞–¥—ë—Ç –≤ –∏—Ç–æ–≥–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.)",
                    icon="msg_info"
                )
            ])

        settings.extend([
            Divider(),
            Header(text="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏"),
            Text(
                text="–ö–∞–Ω–∞–ª —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: @buligaEplugins",
                icon="msg_online",
            ),
            Text(
                text="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞–≥–∏–Ω–∞: @incLu_01",
                icon="msg_info",
            ),
            Divider(),
            Header(text="–°–ø–∏—Å–∫–∏"),
            Text(
                text="–°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω —Ü–µ–Ω–∑—É—Ä—ã",
                icon="msg_download",
                on_click=lambda view: self._safe_open_url("https://t.me/buligaEplugins/15")
            ),
            Text(
                text="–°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω—ã —ç–º–æ–¥–∑–∏",
                icon="msg_download",
                on_click=lambda view: self._safe_open_url("https://t.me/buligaEplugins/16")
            )
        ])

        return settings

    def on_send_message_hook(self, account: int, params: Any) -> HookResult:
        try:
            if not hasattr(params, "message") or not isinstance(params.message, str):
                return HookResult()
            original = params.message
            
            msg_hash = hash(original)
            if msg_hash in self._sent_messages:
                try:
                    self._sent_messages.discard(msg_hash)
                except Exception:
                    pass
                return HookResult()

            stripped = original.lstrip()

            if stripped.startswith("/") or stripped.startswith("!"):
                return HookResult()

            fx_command = False
            er_command = False

            if stripped.startswith(".fx "):
                fx_command = True
                original = original[4:]
                stripped = original.lstrip()

            if stripped.startswith(".er "):
                if self._get_bool_setting("ai_correction", False):
                    return HookResult()
                if not self._get_bool_setting("er_command", False):
                    return HookResult()
                er_command = True
                original = original[4:]
                stripped = original.lstrip()

            do_capitalize = self.get_setting("capitalize_sentences", True)
            do_final_dot = self.get_setting("add_final_dot", True)
            ai_enabled = self._get_bool_setting("ai_correction", False)
            profanity_enabled = self._get_bool_setting("profanity_filter", False)
            ascii_replace_enabled = self.get_setting("ascii_emotes_replace", False)

            if not do_capitalize and not do_final_dot and not ai_enabled and not profanity_enabled and not ascii_replace_enabled and not fx_command and not er_command:
                return HookResult()

            if ai_enabled or fx_command or er_command:
                self._show_progress_dialog("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞...")
                try:
                    from ui.bulletin import BulletinHelper
                    from org.telegram.messenger import R as R_tg
                    try:
                        BulletinHelper.show_simple("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...", R_tg.raw.timer)
                    except Exception:
                        pass
                except Exception:
                    pass

                pre_text = original
                if profanity_enabled and not er_command:
                    pre_text = self._filter_profanity(pre_text)
                threshold = self._get_ai_caps_threshold()
                if not er_command and self._should_normalize_caps(pre_text, threshold):
                    pre_text = self._normalize_caps(pre_text)

                self._process_fix_async(pre_text, params, er_flag=er_command)
                return HookResult(strategy=HookStrategy.CANCEL)

            msg = original
            if profanity_enabled:
                msg = self._filter_profanity(msg)
            if ascii_replace_enabled:
                msg = self._replace_ascii_emoticons(msg)

            if do_capitalize:
                parts = _SENTENCE_SPLIT_RE.split(msg)
                new_parts = []
                for p in parts:
                    p_stripped = p.lstrip()
                    if not p_stripped:
                        new_parts.append(p)
                        continue
                    leading_ws_len = len(p) - len(p.lstrip())
                    leading = p[:leading_ws_len]
                    content = p[leading_ws_len:]
                    content = _capitalize_first_alpha(content)
                    new_parts.append(leading + content)
                msg = " ".join([part.strip() for part in new_parts]).strip()

            if do_final_dot:
                if msg and msg[-1] not in ".!?":
                    msg = msg + "."

            if msg == original:
                return HookResult()

            params.message = msg
            return HookResult(strategy=HookStrategy.MODIFY, params=params)

        except Exception as e:
            try:
                log(f"[PhrasePlugin] error: {e}")
            except Exception:
                pass
            return HookResult()

    def _get_context(self):
        try:
            frag = get_last_fragment()
            if frag is not None:
                return frag.getParentActivity()
        except Exception:
            pass
        return None

    def _uppercase_ratio(self, text: str) -> float:
        text_wo_urls = re.sub(r"https?://\S+", " ", text)
        letters = [c for c in text_wo_urls if c.isalpha()]
        if not letters:
            return 0.0
        uppers = [c for c in letters if c.isupper()]
        return len(uppers) / len(letters)

    def _normalize_caps(self, text: str) -> str:
        def is_url(tok: str) -> bool:
            return re.match(r"https?://\S+", tok) is not None

        tokens = re.split(r"(\s+)", text)
        out = []
        for tok in tokens:
            if tok.strip() == "":
                out.append(tok)
                continue
            if is_url(tok):
                out.append(tok)
                continue
            letters = [c for c in tok if c.isalpha()]
            if len(letters) >= 2 and sum(1 for c in letters if c.isupper()) / len(letters) >= 0.6:
                out.append(tok.lower())
            else:
                out.append(tok)
        s = "".join(out)
        parts = _SENTENCE_SPLIT_RE.split(s)
        new_parts = []
        for p in parts:
            p_stripped = p.lstrip()
            if not p_stripped:
                new_parts.append(p)
                continue
            leading_ws_len = len(p) - len(p.lstrip())
            leading = p[:leading_ws_len]
            content = p[leading_ws_len:]
            content = _capitalize_first_alpha(content)
            new_parts.append(leading + content)
        return " ".join([part.strip() for part in new_parts]).strip()

    def _get_ai_caps_threshold(self) -> int:
        index = self.get_setting("ai_caps_threshold", 4)
        thresholds = [0, 50, 60, 70, 80, 90, 100]
        try:
            if isinstance(index, int) and 0 <= index < len(thresholds):
                return thresholds[index]
            s = str(index).strip().rstrip('%')
            n = int(s)
            if n == 0:
                return 0
            return max(50, min(100, n))
        except Exception:
            return 80

    def _should_normalize_caps(self, text: str, threshold_percent: int) -> bool:
        if threshold_percent == 0:
            return False
        ratio = self._uppercase_ratio(text)
        if ratio >= (threshold_percent / 100.0):
            return True
        if threshold_percent >= 100 and re.search(r"[A-Z–ê-–Ø–Å]{6,}", text):
            return True
        return False

    def _filter_profanity(self, text: str) -> str:
        s = text
        replacements = { r'\b–±–ª—è[—Ç–¥]—å?\b': '–±–ª–∏–Ω', r'\b–±–ª—è[—Ç–¥]–∏\b': '–±–ª–∏–Ω—ã', r'\b–±–ª—è[—Ç–¥]—è\b': '–±–ª–∏–Ω–∞', r'\b–±–ª—è[—Ç–¥]–µ\b': '–±–ª–∏–Ω–µ', r'\b–±–ª—è[—Ç–¥]—É\b': '–±–ª–∏–Ω—É', r'\b–±–ª—è[—Ç–¥]—ã\b': '–±–ª–∏–Ω—ã', r'\b–±–ª—è\b': '—ç—Ö', r'\b–≥–æ–Ω–¥–æ–Ω\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤', r'\b–≥–æ–Ω–¥–æ–Ω—ã\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ã', r'\b–≥–æ–Ω–¥–æ–Ω–∞\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∞', r'\b–≥–æ–Ω–¥–æ–Ω–µ\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–µ', r'\b–≥–æ–Ω–¥–æ–Ω—É\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—É', r'\b–≥–∞–Ω–¥–æ–Ω\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤', r'\b–≥–∞–Ω–¥–æ–Ω—ã\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—ã', r'\b–≥–∞–Ω–¥–æ–Ω–∞\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–∞', r'\b–≥–∞–Ω–¥–æ–Ω–µ\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤–µ', r'\b–≥–∞–Ω–¥–æ–Ω—É\b': '–ø—Ä–µ–∑–µ—Ä–≤–∞—Ç–∏–≤—É', r'\b–¥–æ[–µ—ë]–±–∞[—Ç—Ç]—Å—è\b': '–ø—Ä–∏–¥—Ä–∞—Ç—å—Å—è', r'\b–¥–æ[–µ—ë]–±–∞[—Ç—Ç]—å—Å—è\b': '–ø—Ä–∏–¥—Ä–∞—Ç—å—Å—è', r'\b–¥–æ—Ö—É—è\b': '–º–Ω–æ–≥–æ', r'\b–¥–æ—Ö—É[–π–∏]\b': '–º–Ω–æ–≥–æ', r'\b–¥—Ä–æ—á–∏–ª–∞\b': '–∑–∞–Ω—É–¥–∞', r'\b–¥—Ä–æ—á–∏–ª—ã\b': '–∑–∞–Ω—É–¥—ã', r'\b–¥—Ä–æ—á–∏–ª–µ\b': '–∑–∞–Ω—É–¥–µ', r'\b–¥—Ä–æ—á–∏–ª—É\b': '–∑–∞–Ω—É–¥—É', r'\b–¥—Ä–æ—á[–∏–∏]—Ç—å\b': '–±–∞–ª–æ–≤–∞—Ç—å—Å—è', r'\b–¥—Ä–æ—á[–∏–∏]–ª\b': '–±–∞–ª–æ–≤–∞–ª—Å—è', r'\b–¥—Ä–æ—á[–∏–∏]–ª–∞\b': '–±–∞–ª–æ–≤–∞–ª–∞—Å—å', r'\b–¥—Ä–æ—á[–∏–∏]–ª–æ\b': '–±–∞–ª–æ–≤–∞–ª–æ—Å—å', r'\b–¥—Ä–æ—á[–∏–∏]–ª–∏\b': '–±–∞–ª–æ–≤–∞–ª–∏—Å—å', r'\b[–µ—ë]–±–∞–Ω–∞—à–∫–∞\b': '—á–æ–∫–Ω—É—Ç–∞—è', r'\b[–µ—ë]–±–∞–Ω–∞—à–∫–∏\b': '—á–æ–∫–Ω—É—Ç—ã–µ', r'\b[–µ—ë]–±–∞–Ω–∞—à–∫–µ\b': '—á–æ–∫–Ω—É—Ç–æ–π', r'\b[–µ—ë]–±–∞–Ω–∞—à–∫—É\b': '—á–æ–∫–Ω—É—Ç—É—é', r'\b–µ–±–∞–Ω—å–∫–æ\b': '–¥–µ–±–∏–ª', r'\b[–µ—ë]–±–∞–Ω—É—Ç—ã–π\b': '–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã–π', r'\b[–µ—ë]–±–∞–Ω—É—Ç—ã–µ\b': '–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ', r'\b[–µ—ë]–±–∞–Ω—É—Ç–æ–≥–æ\b': '–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ', r'\b[–µ—ë]–±–∞–Ω—É—Ç–æ–º—É\b': '–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É', r'\b[–µ—ë]–±–∞–Ω—É—Ç—ã–º\b': '–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã–º', r'\b[–µ—ë]–±–∞–Ω—É—Ç–æ–º\b': '–Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º', r'\b[–µ—ë]–±–∞—Ç—å\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è—Ç—å', r'\b[–µ—ë]–±[–µ—ë]—Ç\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ—Ç', r'\b[–µ—ë]–±[–µ—ë]–ª\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª', r'\b[–µ—ë]–±[–µ—ë]–ª–∞\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–∞', r'\b[–µ—ë]–±[–µ—ë]–ª–æ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–æ', r'\b[–µ—ë]–±[–µ—ë]–ª–∏\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–∏', r'\b[–µ—ë]–±[–µ—ë]–º\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ–º', r'\b[–µ—ë]–±[–µ—ë]—Ç–µ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ—Ç–µ', r'\b[–µ—ë]–±[–µ—ë]–º—Ç–µ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–π—Ç–µ', r'\b–≤—ã–µ–±—É\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—é', r'\b—Ç—Ä–∞—Ö–∞—Ç—å\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è—Ç—å', r'\b—Ç—Ä–∞—Ö–∞–µ—Ç\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ—Ç', r'\b—Ç—Ä–∞—Ö–∞–ª\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª', r'\b—Ç—Ä–∞—Ö–∞–ª–∞\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–∞', r'\b—Ç—Ä–∞—Ö–∞–ª–æ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–æ', r'\b—Ç—Ä–∞—Ö–∞–ª–∏\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–∏', r'\b—Ç—Ä–∞—Ö–∞–µ–º\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ–º', r'\b—Ç—Ä–∞—Ö–∞–µ—Ç–µ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ—Ç–µ', r'\b—Ç—Ä–∞—Ö–∞–π—Ç–µ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–π—Ç–µ', r'\b—Ç—Ä–∞—Ö–∞—é\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è—é', r'\b—Ç—Ä–∞—Ö–Ω—É\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—é', r'\b—Ç—Ä–∞—Ö–Ω—É–ª\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª', r'\b—Ç—Ä–∞—Ö–Ω—É–ª–∞\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–∞', r'\b—Ç—Ä–∞—Ö–Ω—É–ª–æ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–æ', r'\b—Ç—Ä–∞—Ö–Ω—É–ª–∏\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–ª–∏', r'\b—Ç—Ä–∞—Ö–Ω—ë–º\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ–º', r'\b—Ç—Ä–∞—Ö–Ω—ë—Ç–µ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–µ—Ç–µ', r'\b—Ç—Ä–∞—Ö–Ω–∏—Ç–µ\b': '–æ–ø–ª–æ–¥–æ—Ç–≤–æ—Ä—è–π—Ç–µ', r'\b[–µ—ë]–±–∏—Å—å\b': '–∫–∞—Ç–∏—Å—å', r'\b[–µ—ë]–±–∏—Ç–µ—Å—å\b': '–∫–∞—Ç–∏—Ç–µ—Å—å', r'\b[–µ—ë]–±–Ω—É—Ç—ã–π\b': '—Å—É–º–∞—Å—à–µ–¥—à–∏–π', r'\b[–µ—ë]–±–Ω—É—Ç—ã–µ\b': '—Å—É–º–∞—Å—à–µ–¥—à–∏–µ', r'\b[–µ—ë]–±–Ω—É—Ç–æ–≥–æ\b': '—Å—É–º–∞—Å—à–µ–¥—à–µ–≥–æ', r'\b[–µ—ë]–±–Ω—É—Ç–æ–º—É\b': '—Å—É–º–∞—Å—à–µ–¥—à–µ–º—É', r'\b[–µ—ë]–±–Ω—É—Ç—ã–º\b': '—Å—É–º–∞—Å—à–µ–¥—à–∏–º', r'\b[–µ—ë]–±–Ω—É—Ç–æ–º\b': '—Å—É–º–∞—Å—à–µ–¥—à–µ–º', r'\b[–µ—ë]–±–Ω—É—Ç—å\b': '—É–¥–∞—Ä–∏—Ç—å', r'\b[–µ—ë]–±–Ω—É–ª\b': '—É–¥–∞—Ä–∏–ª', r'\b[–µ—ë]–±–Ω—É–ª–∞\b': '—É–¥–∞—Ä–∏–ª–∞', r'\b[–µ—ë]–±–Ω—É–ª–æ\b': '—É–¥–∞—Ä–∏–ª–æ', r'\b[–µ—ë]–±–Ω—É–ª–∏\b': '—É–¥–∞—Ä–∏–ª–∏', r'\b[–µ—ë]–±–Ω—ë–º\b': '—É–¥–∞—Ä–∏–º', r'\b[–µ—ë]–±–Ω—ë—Ç–µ\b': '—É–¥–∞—Ä–∏—Ç–µ', r'\b[–µ—ë]–±–Ω–∏—Ç–µ\b': '—É–¥–∞—Ä–∏—Ç–µ', r'\b[–µ—ë]–±–Ω—É—Ç—å—Å—è\b': '—Å–≤–∞–ª–∏—Ç—å—Å—è', r'\b[–µ—ë]–±–Ω—É–ª—Å—è\b': '—Å–≤–∞–ª–∏–ª—Å—è', r'\b[–µ—ë]–±–Ω—É–ª–∞—Å—å\b': '—Å–≤–∞–ª–∏–ª–∞—Å—å', r'\b[–µ—ë]–±–Ω—É–ª–æ—Å—å\b': '—Å–≤–∞–ª–∏–ª–æ—Å—å', r'\b[–µ—ë]–±–Ω—É–ª–∏—Å—å\b': '—Å–≤–∞–ª–∏–ª–∏—Å—å', r'\b[–µ—ë]–±–Ω—ë–º—Å—è\b': '—Å–≤–∞–ª–∏–º—Å—è', r'\b[–µ—ë]–±–Ω—ë—Ç–µ—Å—å\b': '—Å–≤–∞–ª–∏—Ç–µ—Å—å', r'\b[–µ—ë]–±–Ω–∏—Ç–µ—Å—å\b': '—Å–≤–∞–ª–∏—Ç–µ—Å—å', r'\b–∑–∞[–µ—ë]–±–∞–ª\b': '–¥–æ—Å—Ç–∞–ª', r'\b–∑–∞[–µ—ë]–±–∞–ª–∞\b': '–¥–æ—Å—Ç–∞–ª–∞', r'\b–∑–∞[–µ—ë]–±–∞–ª–æ\b': '–¥–æ—Å—Ç–∞–ª–æ', r'\b–∑–∞[–µ—ë]–±–∞–ª–∏\b': '–¥–æ—Å—Ç–∞–ª–∏', r'\b–∑–∞[–µ—ë]–±–∞—Ç—å\b': '—É—Ç–æ–º–∏—Ç—å', r'\b–∑–∞[–µ—ë]–±[–µ—ë]—Ç\b': '—É—Ç–æ–º–ª—è–µ—Ç', r'\b–∑–∞[–µ—ë]–±[–µ—ë]–ª\b': '—É—Ç–æ–º–∏–ª', r'\b–∑–∞[–µ—ë]–±[–µ—ë]–ª–∞\b': '—É—Ç–æ–º–∏–ª–∞', r'\b–∑–∞[–µ—ë]–±[–µ—ë]–ª–æ\b': '—É—Ç–æ–º–∏–ª–æ', r'\b–∑–∞[–µ—ë]–±[–µ—ë]–ª–∏\b': '—É—Ç–æ–º–∏–ª–∏', r'\b–∑–∞[–µ—ë]–±–∏—Å—å\b': '–æ—Ç–ª–∏—á–Ω–æ', r'\b–∑–∞[–µ—ë]–±–∏—Ç–µ—Å—å\b': '–æ—Ç–ª–∏—á–Ω–æ', r'\b–∑–∞[–µ—ë]–±\b': '–Ω–∞–ø—Ä—è–≥', r'\b–∑–∞[–µ—ë]–±–∞\b': '–Ω–∞–ø—Ä—è–≥–∞', r'\b–∑–∞[–µ—ë]–±—ã\b': '–Ω–∞–ø—Ä—è–≥–∏', r'\b–∑–∞[–µ—ë]–±—É\b': '–Ω–∞–ø—Ä—è–≥—É', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞—Ç—å\b': '–¥–æ—Å—Ç–∞–≤–∞—Ç—å', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞—é\b': '–¥–æ—Å—Ç–∞—é', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–µ—à—å\b': '–¥–æ—Å—Ç–∞—ë—à—å', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–µ—Ç\b': '–¥–æ—Å—Ç–∞—ë—Ç', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–µ–º\b': '–¥–æ—Å—Ç–∞—ë–º', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–µ—Ç–µ\b': '–¥–æ—Å—Ç–∞—ë—Ç–µ', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞—é—Ç\b': '–¥–æ—Å—Ç–∞—é—Ç', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–ª\b': '–¥–æ—Å—Ç–∞–≤–∞–ª', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–ª–∞\b': '–¥–æ—Å—Ç–∞–≤–∞–ª–∞', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–ª–æ\b': '–¥–æ—Å—Ç–∞–≤–∞–ª–æ', r'\b–∑–∞[–µ—ë]–±—ã–≤–∞–ª–∏\b': '–¥–æ—Å—Ç–∞–≤–∞–ª–∏', r'\b–º—Ä–∞–∑—å\b': '–º–µ—Ä–∑–∞–≤–µ—Ü', r'\b–º—Ä–∞–∑–∏\b': '–º–µ—Ä–∑–∞–≤—Ü—ã', r'\b–º—Ä–∞–∑–∏\b': '–º–µ—Ä–∑–∞–≤—Ü–∞', r'\b–º—Ä–∞–∑–∏\b': '–º–µ—Ä–∑–∞–≤—Ü—É', r'\b–º—Ä–∞–∑—å—é\b': '–º–µ—Ä–∑–∞–≤—Ü–µ–º', r'\b–º—Ä–∞–∑–∏\b': '–º–µ—Ä–∑–∞–≤—Ü–µ', r'\b–º—É–¥–∏–ª–∞\b': '–¥—É—Ä–∞–∫', r'\b–º—É–¥–∏–ª—ã\b': '–¥—É—Ä–∞–∫–∏', r'\b–º—É–¥–∏–ª–µ\b': '–¥—É—Ä–∞–∫—É', r'\b–º—É–¥–∏–ª—É\b': '–¥—É—Ä–∞–∫–∞', r'\b–º—É–¥–∏–ª–æ–π\b': '–¥—É—Ä–∞–∫–æ–º', r'\b–º—É–¥–∏–ª–µ\b': '–¥—É—Ä–∞–∫–µ', r'\b–º—É–¥–∞–∫\b': '–∏–¥–∏–æ—Ç', r'\b–º—É–¥–∞–∫–∏\b': '–∏–¥–∏–æ—Ç—ã', r'\b–º—É–¥–∞–∫–∞\b': '–∏–¥–∏–æ—Ç–∞', r'\b–º—É–¥–∞–∫—É\b': '–∏–¥–∏–æ—Ç—É', r'\b–º—É–¥–∞–∫–æ–º\b': '–∏–¥–∏–æ—Ç–æ–º', r'\b–º—É–¥–∞–∫–µ\b': '–∏–¥–∏–æ—Ç–µ', r'\b–Ω–∞[–µ—ë]–±–∞—Ç—å\b': '–æ–±–º–∞–Ω—É—Ç—å', r'\b–Ω–∞[–µ—ë]–±[–µ—ë]—Ç\b': '–æ–±–º–∞–Ω—ã–≤–∞–µ—Ç', r'\b–Ω–∞[–µ—ë]–±[–µ—ë]–ª\b': '–æ–±–º–∞–Ω—É–ª', r'\b–Ω–∞[–µ—ë]–±[–µ—ë]–ª–∞\b': '–æ–±–º–∞–Ω—É–ª–∞', r'\b–Ω–∞[–µ—ë]–±[–µ—ë]–ª–æ\b': '–æ–±–º–∞–Ω—É–ª–æ', r'\b–Ω–∞[–µ—ë]–±[–µ—ë]–ª–∏\b': '–æ–±–º–∞–Ω—É–ª–∏', r'\b–Ω–∞[–µ—ë]–±–Ω—É—Ç—å—Å—è\b': '—Ä—É—Ö–Ω—É—Ç—å', r'\b–Ω–∞[–µ—ë]–±–Ω—É–ª—Å—è\b': '—Ä—É—Ö–Ω—É–ª', r'\b–Ω–∞[–µ—ë]–±–Ω—É–ª–∞—Å—å\b': '—Ä—É—Ö–Ω—É–ª–∞', r'\b–Ω–∞[–µ—ë]–±–Ω—É–ª–æ—Å—å\b': '—Ä—É—Ö–Ω—É–ª–æ', r'\b–Ω–∞[–µ—ë]–±–Ω—É–ª–∏—Å—å\b': '—Ä—É—Ö–Ω—É–ª–∏', r'\b–Ω–∞—Ö[—É—É]—è\b': '–∑–∞—á–µ–º', r'\b–Ω–∞—Ö[—É—É]–π\b': '–Ω–∞—Ñ–∏–≥', r'\b–Ω–∏—Ö[—É—É]—è\b': '–Ω–∏—á–µ–≥–æ', r'\b–Ω–∏—Ö[—É—É]–π\b': '–Ω–∏—á–µ–≥–æ', r'\b–æ—Ö[—É—É][–µ—ë]—Ç—å\b': '–æ—Ñ–∏–≥–µ—Ç—å', r'\b–æ—Ö[—É—É][–µ—ë]–ª\b': '–æ—Ñ–∏–≥–µ–ª', r'\b–æ—Ö[—É—É][–µ—ë]–ª–∞\b': '–æ—Ñ–∏–≥–µ–ª–∞', r'\b–æ—Ö[—É—É][–µ—ë]–ª–æ\b': '–æ—Ñ–∏–≥–µ–ª–æ', r'\b–æ—Ö[—É—É][–µ—ë]–ª–∏\b': '–æ—Ñ–∏–≥–µ–ª–∏', r'\b–æ—Ö[—É—É][–µ—ë]–Ω–Ω—ã–π\b': '–∫–ª–∞—Å—Å–Ω—ã–π', r'\b–æ—Ö[—É—É][–µ—ë]–Ω–Ω—ã–µ\b': '–∫–ª–∞—Å—Å–Ω—ã–µ', r'\b–æ—Ö[—É—É][–µ—ë]–Ω–Ω–æ–≥–æ\b': '–∫–ª–∞—Å—Å–Ω–æ–≥–æ', r'\b–æ—Ö[—É—É][–µ—ë]–Ω–Ω–æ–º—É\b': '–∫–ª–∞—Å—Å–Ω–æ–º—É', r'\b–æ—Ö[—É—É][–µ—ë]–Ω–Ω—ã–º\b': '–∫–ª–∞—Å—Å–Ω—ã–º', r'\b–æ—Ö[—É—É][–µ—ë]–Ω–Ω–æ–º\b': '–∫–ª–∞—Å—Å–Ω–æ–º', r'\b–æ—Ö[—É—É][–µ—ë]—Ç–µ–ª—å–Ω—ã–π\b': '–ø–æ—Ç—Ä—è—Å–Ω—ã–π', r'\b–æ—Ö[—É—É][–µ—ë]—Ç–µ–ª—å–Ω—ã–µ\b': '–ø–æ—Ç—Ä—è—Å–Ω—ã–µ', r'\b–æ—Ö[—É—É][–µ—ë]—Ç–µ–ª—å–Ω–æ–≥–æ\b': '–ø–æ—Ç—Ä—è—Å–Ω–æ–≥–æ', r'\b–æ—Ö[—É—É][–µ—ë]—Ç–µ–ª—å–Ω–æ–º—É\b': '–ø–æ—Ç—Ä—è—Å–Ω–æ–º—É', r'\b–æ—Ö[—É—É][–µ—ë]—Ç–µ–ª—å–Ω—ã–º\b': '–ø–æ—Ç—Ä—è—Å–Ω—ã–º', r'\b–æ—Ö[—É—É][–µ—ë]—Ç–µ–ª—å–Ω–æ–º\b': '–ø–æ—Ç—Ä—è—Å–Ω–æ–º', r'\b–ø–∏–¥–∞—Ä–∞—Å\b': '—É—Ä–æ–¥', r'\b–ø–∏–¥–∞—Ä–∞—Å—ã\b': '—É—Ä–æ–¥—ã', r'\b–ø–∏–¥–∞—Ä–∞—Å–∞\b': '—É—Ä–æ–¥–∞', r'\b–ø–∏–¥–∞—Ä–∞—Å—É\b': '—É—Ä–æ–¥—É', r'\b–ø–∏–¥–∞—Ä–∞—Å–æ–º\b': '—É—Ä–æ–¥–æ–º', r'\b–ø–∏–¥–∞—Ä–∞—Å–µ\b': '—É—Ä–æ–¥–µ', r'\b–ø–∏–¥–æ—Ä\b': '–≥–æ–ª—É–±–æ–π', r'\b–ø–∏–¥–æ—Ä—ã\b': '–≥–æ–ª—É–±—ã–µ', r'\b–ø–∏–¥–æ—Ä–∞\b': '–≥–æ–ª—É–±–æ–≥–æ', r'\b–ø–∏–¥–æ—Ä—É\b': '–≥–æ–ª—É–±–æ–º—É', r'\b–ø–∏–¥–æ—Ä–æ–º\b': '–≥–æ–ª—É–±—ã–º', r'\b–ø–∏–¥–æ—Ä–µ\b': '–≥–æ–ª—É–±–æ–º', r'\b–ø–∏–∑–¥–∞\b': '–∫–∏—Å–∫–∞', r'\b–ø–∏–∑–¥—ã\b': '–∫–∏—Å–∫–∏', r'\b–ø–∏–∑–¥–µ\b': '–∫–∏—Å–∫–µ', r'\b–ø–∏–∑–¥—É\b': '–∫–∏—Å–∫—É', r'\b–ø–∏–∑–¥–æ–π\b': '–∫–∏—Å–∫–æ–π', r'\b–ø–∏–∑–¥–µ\b': '–∫–∏—Å–∫–µ', r'\b–ø–∏–∑–¥–∞–Ω—É—Ç—å\b': '–ª—è–ø–Ω—É—Ç—å', r'\b–ø–∏–∑–¥–∞–Ω—É–ª\b': '–ª—è–ø–Ω—É–ª', r'\b–ø–∏–∑–¥–∞–Ω—É–ª–∞\b': '–ª—è–ø–Ω—É–ª–∞', r'\b–ø–∏–∑–¥–∞–Ω—É–ª–æ\b': '–ª—è–ø–Ω—É–ª–æ', r'\b–ø–∏–∑–¥–∞–Ω—É–ª–∏\b': '–ª—è–ø–Ω—É–ª–∏', r'\b–ø–∏–∑–¥–∞–Ω—É—Ç—å—Å—è\b': '–≥—Ä–æ—Ö–Ω—É—Ç—å—Å—è', r'\b–ø–∏–∑–¥–∞–Ω—É–ª—Å—è\b': '–≥—Ä–æ—Ö–Ω—É–ª—Å—è', r'\b–ø–∏–∑–¥–∞–Ω—É–ª–∞—Å—å\b': '–≥—Ä–æ—Ö–Ω—É–ª–∞—Å—å', r'\b–ø–∏–∑–¥–∞–Ω—É–ª–æ—Å—å\b': '–≥—Ä–æ—Ö–Ω—É–ª–æ—Å—å', r'\b–ø–∏–∑–¥–∞–Ω—É–ª–∏—Å—å\b': '–≥—Ä–æ—Ö–Ω—É–ª–∏—Å—å', r'\b–ø–∏–∑–¥–∞—Ç—ã–π\b': '–∫–ª—ë–≤—ã–π', r'\b–ø–∏–∑–¥–∞—Ç—ã–µ\b': '–∫–ª—ë–≤—ã–µ', r'\b–ø–∏–∑–¥–∞—Ç–æ–≥–æ\b': '–∫–ª—ë–≤–æ–≥–æ', r'\b–ø–∏–∑–¥–∞—Ç–æ–º—É\b': '–∫–ª—ë–≤–æ–º—É', r'\b–ø–∏–∑–¥–∞—Ç—ã–º\b': '–∫–ª—ë–≤—ã–º', r'\b–ø–∏–∑–¥–∞—Ç–æ–º\b': '–∫–ª—ë–≤–æ–º', r'\b–ø–∏–∑–¥–µ—Ü\b': '–∫–∞–ø–µ—Ü', r'\b–ø–∏–∑–¥–µ—Ü–∞\b': '–∫–∞–ø–µ—Ü–∞', r'\b–ø–∏–∑–¥–µ—Ü—É\b': '–∫–∞–ø–µ—Ü—É', r'\b–ø–∏–∑–¥–µ—Ü–æ–º\b': '–∫–∞–ø–µ—Ü–æ–º', r'\b–ø–∏–∑–¥–µ—Ü–µ\b': '–∫–∞–ø–µ—Ü–µ', r'\b–ø–∏–∑–¥–∏—Ç—å\b': '–∫—Ä–∞—Å—Ç—å', r'\b–ø–∏–∑–∂—É\b': '–∫—Ä–∞–¥—É', r'\b–ø–∏–∑–¥–∏—à—å\b': '–∫—Ä–∞–¥—ë—à—å', r'\b–ø–∏–∑–¥–∏—Ç\b': '–∫—Ä–∞–¥—ë—Ç', r'\b–ø–∏–∑–¥–∏–º\b': '–∫—Ä–∞–¥—ë–º', r'\b–ø–∏–∑–¥–∏—Ç–µ\b': '–∫—Ä–∞–¥—ë—Ç–µ', r'\b–ø–∏–∑–¥—è—Ç\b': '–∫—Ä–∞–¥—É—Ç', r'\b–ø–∏–∑–¥–∏–ª\b': '–∫—Ä–∞–ª', r'\b–ø–∏–∑–¥–∏–ª–∞\b': '–∫—Ä–∞–ª–∞', r'\b–ø–∏–∑–¥–∏–ª–æ\b': '–∫—Ä–∞–ª–æ', r'\b–ø–∏–∑–¥–∏–ª–∏\b': '–∫—Ä–∞–ª–∏', r'\b–ø–∏–∑–¥–∏—Ç—å\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–∂—É\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±—å—é —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏—à—å\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±—å—ë—à—å —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏—Ç\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±—å—ë—Ç —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏–º\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±—å—ë–º —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏—Ç–µ\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±—å—ë—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥—è—Ç\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±—å—é—Ç —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏–ª\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±–∏–ª —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏–ª–∞\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±–∏–ª–∞ —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏–ª–æ\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±–∏–ª–æ —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–∏–ª–∏\s+—á–µ–ª–æ–≤–µ–∫–∞\b': '–±–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞', r'\b–ø–∏–∑–¥–µ—Ç—å\b': '–≥–æ–≤–æ—Ä–∏—Ç—å', r'\b–ø–∏–∑–∂—É\b': '–≥–æ–≤–æ—Ä—é', r'\b–ø–∏–∑–¥–∏—à—å\b': '–≥–æ–≤–æ—Ä–∏—à—å', r'\b–ø–∏–∑–¥–∏—Ç\b': '–≥–æ–≤–æ—Ä–∏—Ç', r'\b–ø–∏–∑–¥–∏–º\b': '–≥–æ–≤–æ—Ä–∏–º', r'\b–ø–∏–∑–¥–∏—Ç–µ\b': '–≥–æ–≤–æ—Ä–∏—Ç–µ', r'\b–ø–∏–∑–¥—è—Ç\b': '–≥–æ–≤–æ—Ä—è—Ç', r'\b–ø–∏–∑–¥–µ–ª\b': '–≥–æ–≤–æ—Ä–∏–ª', r'\b–ø–∏–∑–¥–µ–ª–∞\b': '–≥–æ–≤–æ—Ä–∏–ª–∞', r'\b–ø–∏–∑–¥–µ–ª–æ\b': '–≥–æ–≤–æ—Ä–∏–ª–æ', r'\b–ø–∏–∑–¥–µ–ª–∏\b': '–≥–æ–≤–æ—Ä–∏–ª–∏', r'\b–ø–∏–∑–¥—é–∫\b': '–º–∞–ª—å—á–∏—à–∫–∞', r'\b–ø–∏–∑–¥—é–∫–∏\b': '–º–∞–ª—å—á–∏—à–∫–∏', r'\b–ø–∏–∑–¥—é–∫–∞\b': '–º–∞–ª—å—á–∏—à–∫–∏', r'\b–ø–∏–∑–¥—é–∫—É\b': '–º–∞–ª—å—á–∏—à–∫–µ', r'\b–ø–∏–∑–¥—é–∫–æ–º\b': '–º–∞–ª—å—á–∏—à–∫–æ–π', r'\b–ø–∏–∑–¥—é–∫–µ\b': '–º–∞–ª—å—á–∏—à–∫–µ', r'\b–ø–∏–∑–¥—é–ª–∏–Ω–∞\b': '–æ–ø–ª–µ—É—Ö–∞', r'\b–ø–∏–∑–¥—é–ª–∏–Ω—ã\b': '–æ–ø–ª–µ—É—Ö–∏', r'\b–ø–∏–∑–¥—é–ª–∏–Ω–µ\b': '–æ–ø–ª–µ—É—Ö–µ', r'\b–ø–∏–∑–¥—é–ª–∏–Ω—É\b': '–æ–ø–ª–µ—É—Ö—É', r'\b–ø–∏–∑–¥—é–ª–∏–Ω–æ–π\b': '–æ–ø–ª–µ—É—Ö–æ–π', r'\b–ø–∏–∑–¥—é–ª–∏–Ω–µ\b': '–æ–ø–ª–µ—É—Ö–µ', r'\b–ø–æ–¥—ä[–µ—ë]–±\b': '–ø–æ–¥–∫–æ–ª', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã\b': '–ø–æ–¥–∫–æ–ª—ã', r'\b–ø–æ–¥—ä[–µ—ë]–±–∞\b': '–ø–æ–¥–∫–æ–ª–∞', r'\b–ø–æ–¥—ä[–µ—ë]–±—É\b': '–ø–æ–¥–∫–æ–ª—É', r'\b–ø–æ–¥—ä[–µ—ë]–±–æ–º\b': '–ø–æ–¥–∫–æ–ª–æ–º', r'\b–ø–æ–¥—ä[–µ—ë]–±–µ\b': '–ø–æ–¥–∫–æ–ª–µ', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞—Ç—å\b': '–ø–æ–¥—à—É—á–∏–≤–∞—Ç—å', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞—é\b': '–ø–æ–¥—à—É—á–∏–≤–∞—é', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–µ—à—å\b': '–ø–æ–¥—à—É—á–∏–≤–∞–µ—à—å', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–µ—Ç\b': '–ø–æ–¥—à—É—á–∏–≤–∞–µ—Ç', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–µ–º\b': '–ø–æ–¥—à—É—á–∏–≤–∞–µ–º', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–µ—Ç–µ\b': '–ø–æ–¥—à—É—á–∏–≤–∞–µ—Ç–µ', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞—é—Ç\b': '–ø–æ–¥—à—É—á–∏–≤–∞—é—Ç', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–ª\b': '–ø–æ–¥—à—É—á–∏–≤–∞–ª', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–ª–∞\b': '–ø–æ–¥—à—É—á–∏–≤–∞–ª–∞', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–ª–æ\b': '–ø–æ–¥—à—É—á–∏–≤–∞–ª–æ', r'\b–ø–æ–¥—ä[–µ—ë]–±—ã–≤–∞–ª–∏\b': '–ø–æ–¥—à—É—á–∏–≤–∞–ª–∏', r'\b–ø—Ä–æ[–µ—ë]–±–∞—Ç—å\b': '–ø–æ—Ç–µ—Ä—è—Ç—å', r'\b–ø—Ä–æ[–µ—ë]–±[–µ—ë]—Ç\b': '—Ç–µ—Ä—è–µ—Ç', r'\b–ø—Ä–æ[–µ—ë]–±[–µ—ë]–ª\b': '–ø–æ—Ç–µ—Ä—è–ª', r'\b–ø—Ä–æ[–µ—ë]–±[–µ—ë]–ª–∞\b': '–ø–æ—Ç–µ—Ä—è–ª–∞', r'\b–ø—Ä–æ[–µ—ë]–±[–µ—ë]–ª–æ\b': '–ø–æ—Ç–µ—Ä—è–ª–æ', r'\b–ø—Ä–æ[–µ—ë]–±[–µ—ë]–ª–∏\b': '–ø–æ—Ç–µ—Ä—è–ª–∏', r'\b–ø—Ä–æ[–µ—ë]–±\b': '–ø—Ä–æ–º–∞—Ö', r'\b–ø—Ä–æ[–µ—ë]–±–∞\b': '–ø—Ä–æ–º–∞—Ö–∞', r'\b–ø—Ä–æ[–µ—ë]–±—É\b': '–ø—Ä–æ–º–∞—Ö—É', r'\b–ø—Ä–æ[–µ—ë]–±–æ–º\b': '–ø—Ä–æ–º–∞—Ö–æ–º', r'\b–ø—Ä–æ[–µ—ë]–±–µ\b': '–ø—Ä–æ–º–∞—Ö–µ', r'\b—Ö[—É—É][–µ—ë]–≤–∏–Ω–∞\b': '—à—Ç—É–∫–æ–≤–∏–Ω–∞', r'\b—Ö[—É—É][–µ—ë]–≤–∏–Ω—ã\b': '—à—Ç—É–∫–æ–≤–∏–Ω—ã', r'\b—Ö[—É—É][–µ—ë]–≤–∏–Ω–µ\b': '—à—Ç—É–∫–æ–≤–∏–Ω–µ', r'\b—Ö[—É—É][–µ—ë]–≤–∏–Ω—É\b': '—à—Ç—É–∫–æ–≤–∏–Ω—É', r'\b—Ö[—É—É][–µ—ë]–≤–∏–Ω–æ–π\b': '—à—Ç—É–∫–æ–≤–∏–Ω–æ–π', r'\b—Ö[—É—É][–µ—ë]–≤–∏–Ω–µ\b': '—à—Ç—É–∫–æ–≤–∏–Ω–µ', r'\b—Ö[—É—É][–µ—ë]–≤—ã–π\b': '–ø–ª–æ—Ö–æ–π', r'\b—Ö[—É—É][–µ—ë]–≤—ã–µ\b': '–ø–ª–æ—Ö–∏–µ', r'\b—Ö[—É—É][–µ—ë]–≤–æ–≥–æ\b': '–ø–ª–æ—Ö–æ–≥–æ', r'\b—Ö[—É—É][–µ—ë]–≤–æ–º—É\b': '–ø–ª–æ—Ö–æ–º—É', r'\b—Ö[—É—É][–µ—ë]–≤—ã–º\b': '–ø–ª–æ—Ö–∏–º', r'\b—Ö[—É—É][–µ—ë]–≤–æ–º\b': '–ø–ª–æ—Ö–æ–º', r'\b—Ö[—É—É][–µ—ë]–ø–ª[–µ—ë]—Ç\b': '–±–æ–ª—Ç—É–Ω', r'\b—Ö[—É—É][–µ—ë]–ø–ª[–µ—ë]—Ç—ã\b': '–±–æ–ª—Ç—É–Ω—ã', r'\b—Ö[—É—É][–µ—ë]–ø–ª[–µ—ë]—Ç–∞\b': '–±–æ–ª—Ç—É–Ω–∞', r'\b—Ö[—É—É][–µ—ë]–ø–ª[–µ—ë]—Ç—É\b': '–±–æ–ª—Ç—É–Ω—É', r'\b—Ö[—É—É][–µ—ë]–ø–ª[–µ—ë]—Ç–æ–º\b': '–±–æ–ª—Ç—É–Ω–æ–º', r'\b—Ö[—É—É][–µ—ë]–ø–ª[–µ—ë]—Ç–µ\b': '–±–æ–ª—Ç—É–Ω–µ', r'\b—Ö[—É—É][–µ—ë]–ø—É—Ç–∞–ª–æ\b': '–±–µ–∑–¥–µ–ª—å–Ω–∏–∫', r'\b—Ö[—É—É][–µ—ë]–ø—É—Ç–∞–ª—ã\b': '–±–µ–∑–¥–µ–ª—å–Ω–∏–∫–∏', r'\b—Ö[—É—É][–µ—ë]–ø—É—Ç–∞–ª–∞\b': '–±–µ–∑–¥–µ–ª—å–Ω–∏–∫–∞', r'\b—Ö[—É—É][–µ—ë]–ø—É—Ç–∞–ª—É\b': '–±–µ–∑–¥–µ–ª—å–Ω–∏–∫—É', r'\b—Ö[—É—É][–µ—ë]–ø—É—Ç–∞–ª–æ–º\b': '–±–µ–∑–¥–µ–ª—å–Ω–∏–∫–æ–º', r'\b—Ö[—É—É][–µ—ë]–ø—É—Ç–∞–ª–µ\b': '–±–µ–∑–¥–µ–ª—å–Ω–∏–∫–µ', r'\b—Ö[—É—É][–µ—ë]—Å–æ—Å\b': '–º–µ—Ä–∑–∞–≤–µ—Ü', r'\b—Ö[—É—É][–µ—ë]—Å–æ—Å—ã\b': '–º–µ—Ä–∑–∞–≤—Ü—ã', r'\b—Ö[—É—É][–µ—ë]—Å–æ—Å–∞\b': '–º–µ—Ä–∑–∞–≤—Ü–∞', r'\b—Ö[—É—É][–µ—ë]—Å–æ—Å—É\b': '–º–µ—Ä–∑–∞–≤—Ü—É', r'\b—Ö[—É—É][–µ—ë]—Å–æ—Å–æ–º\b': '–º–µ—Ä–∑–∞–≤—Ü–µ–º', r'\b—Ö[—É—É][–µ—ë]—Å–æ—Å–µ\b': '–º–µ—Ä–∑–∞–≤—Ü–µ', r'\b—Ö[—É—É]–π–Ω—É—Ç—å\b': '—à–≤—ã—Ä–Ω—É—Ç—å', r'\b—Ö[—É—É]–π–Ω—É–ª\b': '—à–≤—ã—Ä–Ω—É–ª', r'\b—Ö[—É—É]–π–Ω—É–ª–∞\b': '—à–≤—ã—Ä–Ω—É–ª–∞', r'\b—Ö[—É—É]–π–Ω—É–ª–æ\b': '—à–≤—ã—Ä–Ω—É–ª–æ', r'\b—Ö[—É—É]–π–Ω—É–ª–∏\b': '—à–≤—ã—Ä–Ω—É–ª–∏', r'\b—Ö[—É—É]—è–∫\b': '–±–∞—Ö', r'\b—Ö[—É—É]—è–∫–∞\b': '–±–∞—Ö–∞', r'\b—Ö[—É—É]—è–∫—É\b': '–±–∞—Ö—É', r'\b—Ö[—É—É]—è–∫–æ–º\b': '–±–∞—Ö–æ–º', r'\b—Ö[—É—É]—è–∫–µ\b': '–±–∞—Ö–µ', r'\b—Ö[—É—É]—è—Ä–∏—Ç—å\b': '–ª—É–ø–∏—Ç—å', r'\b—Ö[—É—É]—è—Ä—é\b': '–ª—É–ø–ª—é', r'\b—Ö[—É—É]—è—Ä–∏—à—å\b': '–ª—É–ø–∏—à—å', r'\b—Ö[—É—É]—è—Ä–∏—Ç\b': '–ª—É–ø–∏—Ç', r'\b—Ö[—É—É]—è—Ä–∏–º\b': '–ª—É–ø–∏–º', r'\b—Ö[—É—É]—è—Ä–∏—Ç–µ\b': '–ª—É–ø–∏—Ç–µ', r'\b—Ö[—É—É]—è—Ä—è—Ç\b': '–ª—É–ø—è—Ç', r'\b—Ö[—É—É]—è—Ä–∏–ª\b': '–ª—É–ø–∏–ª', r'\b—Ö[—É—É]—è—Ä–∏–ª–∞\b': '–ª—É–ø–∏–ª–∞', r'\b—Ö[—É—É]—è—Ä–∏–ª–æ\b': '–ª—É–ø–∏–ª–æ', r'\b—Ö[—É—É]—è—Ä–∏–ª–∏\b': '–ª—É–ø–∏–ª–∏', r'\b—Ö[—É—É]—è—Ä–∏–∫\b': '–º–µ–ª–æ—á—å', r'\b—Ö[—É—É]—è—Ä–∏–∫–∏\b': '–º–µ–ª–æ—á–∏', r'\b—Ö[—É—É]—è—Ä–∏–∫–∞\b': '–º–µ–ª–æ—á–∏', r'\b—Ö[—É—É]—è—Ä–∏–∫—É\b': '–º–µ–ª–æ—á–∏', r'\b—Ö[—É—É]—è—Ä–∏–∫–æ–º\b': '–º–µ–ª–æ—á—å—é', r'\b—Ö[—É—É]—è—Ä–∏–∫–µ\b': '–º–µ–ª–æ—á–∏', r'\b—Ö[—É—É]—è—á–∏—Ç—å\b': '–∫–æ–ª–æ—Ç–∏—Ç—å', r'\b—Ö[—É—É]—è—á—É\b': '–∫–æ–ª–æ—á—É', r'\b—Ö[—É—É]—è—á–∏—à—å\b': '–∫–æ–ª–æ—Ç–∏—à—å', r'\b—Ö[—É—É]—è—á–∏—Ç\b': '–∫–æ–ª–æ—Ç–∏—Ç', r'\b—Ö[—É—É]—è—á–∏–º\b': '–∫–æ–ª–æ—Ç–∏–º', r'\b—Ö[—É—É]—è—á–∏—Ç–µ\b': '–∫–æ–ª–æ—Ç–∏—Ç–µ', r'\b—Ö[—É—É]—è—á–∞—Ç\b': '–∫–æ–ª–æ—Ç—è—Ç', r'\b—Ö[—É—É]—è—á–∏–ª\b': '–∫–æ–ª–æ—Ç–∏–ª', r'\b—Ö[—É—É]—è—á–∏–ª–∞\b': '–∫–æ–ª–æ—Ç–∏–ª–∞', r'\b—Ö[—É—É]—è—á–∏–ª–æ\b': '–∫–æ–ª–æ—Ç–∏–ª–æ', r'\b—Ö[—É—É]—è—á–∏–ª–∏\b': '–∫–æ–ª–æ—Ç–∏–ª–∏', r'\b—Ö[—É—É]–π\b': '—Ö–µ—Ä', r'\b—Ö[—É—É]—è\b': '—Ö–µ—Ä–∞', r'\b—Ö[—É—É]—é\b': '—Ö–µ—Ä—É', r'\b—Ö[—É—É]—ë–º\b': '—Ö–µ—Ä–æ–º', r'\b—Ö[—É—É]–µ\b': '—Ö–µ—Ä–µ', r'\b—Ö[—É—É]–π–ª–æ\b': '–ø–æ–¥–æ–Ω–æ–∫', r'\b—Ö[—É—É]–π–ª—ã\b': '–ø–æ–¥–æ–Ω–∫–∏', r'\b—Ö[—É—É]–π–ª—ã\b': '–ø–æ–¥–æ–Ω–∫–∞', r'\b—Ö[—É—É]–π–ª–µ\b': '–ø–æ–¥–æ–Ω–∫—É', r'\b—Ö[—É—É]–π–ª–æ–π\b': '–ø–æ–¥–æ–Ω–∫–æ–º', r'\b—Ö[—É—É]–π–ª–µ\b': '–ø–æ–¥–æ–Ω–∫–µ', r'\b—Ö[—É—É]–π–Ω—è\b': '–µ—Ä—É–Ω–¥–∞', r'\b—Ö[—É—É]–π–Ω–∏\b': '–µ—Ä—É–Ω–¥—ã', r'\b—Ö[—É—É]–π–Ω–µ\b': '–µ—Ä—É–Ω–¥–µ', r'\b—Ö[—É—É]–π–Ω—é\b': '–µ—Ä—É–Ω–¥—É', r'\b—Ö[—É—É]–π–Ω–µ–π\b': '–µ—Ä—É–Ω–¥–æ–π', r'\b—Ö[—É—É]–π–Ω–µ\b': '–µ—Ä—É–Ω–¥–µ', }
        for pattern, replacement in replacements.items():
            s = re.sub(pattern, replacement, s, flags=re.IGNORECASE)
        s = self._filter_profanity_smart(s)
        return s

    def _filter_profanity_smart(self, text: str) -> str:
        s = text
        sep = r'[^a-zA-Z–∞-—è–ê-–Ø—ë–Å]*'
        def cls(ch: str) -> str:
            m = {
                '–∞': 'a@', '–µ': 'e3', '–æ': 'o0', '—Ä': 'p', '—Å': 'c', '—Ö': 'x*', '—É': 'y', '–∫': 'k', '–º': 'm', '—Ç': 't', '–≤': 'b', '–Ω': 'h', '–∑': '3', '–±': '6', '—ë': 'e', '–∏': 'iu', '—á': '4', '—è': '9q', '–≥': 'r', '–¥': 'd', '–ª': 'l', '–ø': 'n', '–π': 'j'
            }
            chars = ch + m.get(ch, '')
            return '[' + re.escape(chars) + ']+'
        def pat(word: str):
            return re.compile(r'(?<!\w)' + sep.join(cls(c) for c in word) + r'(?!\w)', re.IGNORECASE)
        def apply_case(src: str, repl: str) -> str:
            if src.isupper():
                return repl.upper()
            if src[:1].isupper():
                return repl.capitalize()
            return repl
        pairs = [
            (pat('–±–ª—è'), '–±–ª–∏–Ω'),
            (pat('–±–ª—è—Ç—å'), '–±–ª–∏–Ω'),
            (pat('—Å—É–∫–∞'), '—Å–æ–±–∞–∫–∞'),
            (pat('–ø–∏–∑–¥'), '–ø–∏–ø–µ—Ü'),
            (pat('–º—É–¥'), '–ø–ª–æ—Ö–∏—à'),
            (pat('–∑–∞–ª—É–ø'), '–∂–æ–ø–∞'),
            (pat('–ø–∏–¥'), '–Ω–µ–¥—Ä—É–≥'),
            (pat('—Ö—É–π'), '—Ö–µ—Ä'),
            (pat('–µ–±'), '–æ–ø—Å'),
        ]
        for rg, rp in pairs:
            s = rg.sub(lambda m: apply_case(m.group(0), rp), s)
        return s

    def _get_bool_setting(self, key: str, default: bool) -> bool:
        try:
            val = self.get_setting(key, default)
            if isinstance(val, bool):
                return val
            if isinstance(val, (int, float)):
                return bool(val)
            if isinstance(val, str):
                s = val.strip().lower()
                if s in ("1", "true", "on", "yes", "y"):
                    return True
                if s in ("0", "false", "off", "no", "n"):
                    return False
                return default
            return default
        except Exception:
            return default

    def _open_profanity_list(self):
        self._safe_open_url("https://t.me/buligaEplugins/14")

    def _open_url(self, url: str):
        try:
            from android.content import Intent
            from android.net import Uri

            intent = Intent(Intent.ACTION_VIEW)
            intent.setData(Uri.parse(url))
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)

            context = self._get_context()
            if context:
                context.startActivity(intent)
            else:
                try:
                    from org.telegram.messenger import ApplicationLoader
                    ApplicationLoader.applicationContext.startActivity(intent)
                except Exception:
                    pass
        except Exception as e:
            try:
                log(f"[PhrasePlugin] Error opening URL {url}: {e}")
            except Exception:
                pass

    def _safe_open_url(self, url: str):
        try:
            self._open_url(url)
        except Exception:
            pass

    def _local_spell_fix(self, text: str) -> str:
        corrections = {
            r"\bhe+l+o+\b": "hello",
            r"\bpriv+et\b": "–ø—Ä–∏–≤–µ—Ç",
            r"\bpreved\b": "–ø—Ä–∏–≤–µ—Ç",
            r"\bspasibo\b": "—Å–ø–∞—Å–∏–±–æ",
            r"\bpozhaluysta\b": "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
        }

        def apply_case(src: str, repl: str) -> str:
            if src.isupper():
                return repl.upper()
            if src[:1].isupper():
                return repl.capitalize()
            return repl

        s = text
        for pattern, repl in corrections.items():
            s = re.sub(pattern, lambda m: apply_case(m.group(0), repl), s, flags=re.IGNORECASE)
        return s

    def _replace_ascii_emoticons(self, text: str) -> str:
        s = text
        for pat, emoji in self._emote_patterns:
            s = pat.sub(r"\1" + emoji + r"\2", s)
        return s

    def _build_emote_patterns(self):
        end = r"(\s|$|[\.,!\?:;])"
        patterns = [
            (re.compile(r'(^|\s)(?:\:-\)|:\)|=\)|c:|:\]|\:-\])' + end, re.I), 'üôÇ'),
            (re.compile(r'(^|\s)(?:\:-\(|:\(|=\(\.\.\.|:c|\:-c|\:-<|:<|\:-\[|:\[|8\(|8\-\()' + end, re.I), 'üòü'),
            (re.compile(r'(^|\s)(?:\:-D|:D|=D|8D|xD|XD)' + end), 'üòÑ'),
            (re.compile(r'(^|\s)(?:;\-\)|;\)|;\]|;\-\])' + end), 'üòâ'),
            (re.compile(r'(^|\s)(?:\:-P|:P|\:-p|:p|=P|=p|\:-√æ|:√æ)' + end), 'üòõ'),
            (re.compile(r'(^|\s)(?:\:-b|:b)' + end, re.I), 'üòã'),
            (re.compile(r'(^|\s)(?:\:-O|:O|\:-o|:o|\:-0|:0)' + end), 'üò≤'),
            (re.compile(r'(^|\s)(?:\:-\*|:\*|:√ó)' + end), 'üòò'),
            (re.compile(r'(^|\s)(?:\:-/|:/|\:-\\|:\\|=/|=\\|\-_-)' + end), 'üòê'),
            (re.compile(r'(^|\s)(?:--|\-__-)' + end), 'üòë'),
            (re.compile(r'(^|\s)(?:\:-\||:\||=\|)' + end), 'üòê'),
            (re.compile(r"(^|\s)(?::'\(|:\'\(|=\"\()(\s|$)"), 'üò≠'),
            (re.compile(r"(^|\s)(?::'-\)|:\'\))" + end), 'üòÇ'),
            (re.compile(r'(^|\s)(?:\:-\{|:\{|=\(|=\[)' + end), '‚òπÔ∏è'),
            (re.compile(r'(^|\s)(?:\:-\}|:\})' + end), 'üòè'),
            (re.compile(r'(^|\s)(?:B-\)|B\)|8-\)|8\)|\|-\)|\|\))' + end), 'üòé'),
            (re.compile(r'(^|\s)(?:\:-\$|:\$)' + end), 'üò≥'),
            (re.compile(r'(^|\s)(?:\:-!|:!)' + end), 'üò¨'),
            (re.compile(r'(^|\s)(?::\(|>:\-\(|>:\[)' + end), 'üò°'),
            (re.compile(r'(^|\s)(?:>:\-D|>=D)' + end), 'üòà'),
            (re.compile(r'(^|\s)(?:<3)' + end), '‚ù§Ô∏è'),
            (re.compile(r'(^|\s)(?:</3|<\\3|</\\3)' + end), 'üíî'),
            (re.compile(r'(^|\s)(?:O:\)|O:\-\)|0:\)|0:\-\))' + end), 'üòá'),
            (re.compile(r'(^|\s)(?:\:-X|:X|\:-x|:x|\:-#|:#)' + end), 'üò∂'),
            (re.compile(r'(^|\s)(?:\:-@|:@)' + end), 'ü§Ø'),
            (re.compile(r'(^|\s)(?:\^\^|\^_\^)' + end), 'üòä'),
            (re.compile(r'(^|\s)(?:O_O|o_o|0_0|0\.o|o\.0|O\.o)' + end), 'üò≥'),
            (re.compile(r'(^|\s)(?:T_T|TT_TT|;_;|Q_Q)' + end), 'üò≠'),
            (re.compile(r'(^|\s)(?::3|=3)' + end), 'ü•∞'),
            (re.compile(r'(^|\s)(?::\^\)|:=\))' + end), 'üòè'),
            (re.compile(r'(^|\s)(?:D:|D=|DX)' + end), 'üò¶'),
            (re.compile(r"(^|\s)(?:D-':|D':)" + end), 'üò®')
        ]
        return patterns

    def _process_fix_async(self, text: str, params: Any, er_flag: bool = False):
        def worker():
            try:
                if self._last_ai_in == text and self._last_ai_out:
                    run_on_ui_thread(lambda: self._send_corrected_message(self._last_ai_out, params))
                    return

                url = "https://keyboard.yandex.net/gpt/fix"
                payload = {"text": text}
                headers = {
                    "Content-Type": "application/json; charset=utf-8",
                    "User-Agent": "okhttp/4.12.0",
                    "Connection": "Keep-Alive",
                    "Accept-Encoding": "gzip"
                }
                run_on_ui_thread(lambda: self._set_progress("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî 10%", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...", 10))
                resp = requests.post(
                    url,
                    headers=headers,
                    data=json.dumps(payload, ensure_ascii=False).encode("utf-8"),
                    timeout=10
                )
                run_on_ui_thread(lambda: self._set_progress("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî 30%", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...", 30))
                fixed = ""
                if resp.status_code == 200:
                    data = resp.json()
                    fixed = data.get("response", "").strip()
                    if fixed:
                        run_on_ui_thread(lambda: self._set_progress("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî 70%", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...", 70))
                        if self._get_bool_setting("profanity_filter", False) and not er_flag:
                            fixed = self._filter_profanity(fixed)
                        if self.get_setting("ascii_emotes_replace", False) and not er_flag:
                            fixed = self._replace_ascii_emoticons(fixed)
                        if not er_flag:
                            threshold = self._get_ai_caps_threshold()
                            if self._should_normalize_caps(fixed, threshold):
                                fixed = self._normalize_caps(fixed)
                            fixed = self._local_spell_fix(fixed)
                            if self.get_setting("capitalize_sentences", True):
                                parts = _SENTENCE_SPLIT_RE.split(fixed)
                                fixed_parts = []
                                for p in parts:
                                    p_stripped = p.lstrip()
                                    if not p_stripped:
                                        fixed_parts.append(p)
                                        continue
                                    leading_ws_len = len(p) - len(p.lstrip())
                                    leading = p[:leading_ws_len]
                                    content = p[leading_ws_len:]
                                    content = _capitalize_first_alpha(content)
                                    fixed_parts.append(leading + content)
                                fixed = " ".join([part.strip() for part in fixed_parts]).strip()
                            if self.get_setting("add_final_dot", True) and fixed and fixed[-1] not in ".!?":
                                fixed = fixed + "."
                        run_on_ui_thread(lambda: self._set_progress("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî 100%", "–ì–æ—Ç–æ–≤–æ", 100))
                        self._last_ai_in, self._last_ai_out = text, fixed
                        run_on_ui_thread(lambda: self._send_corrected_message(fixed, params))
                        return

                if not fixed:
                    try:
                        resp2 = requests.post(
                            url,
                            headers=headers,
                            data=json.dumps(payload, ensure_ascii=False).encode("utf-8"),
                            timeout=20
                        )
                        if resp2.status_code == 200:
                            data2 = resp2.json()
                            fixed = data2.get("response", "").strip()
                            if fixed:
                                run_on_ui_thread(lambda: self._set_progress("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî 70%", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞...", 70))
                                if self._get_bool_setting("profanity_filter", False) and not er_flag:
                                    fixed = self._filter_profanity(fixed)
                                if self.get_setting("ascii_emotes_replace", False) and not er_flag:
                                    fixed = self._replace_ascii_emoticons(fixed)
                                if not er_flag:
                                    threshold = self._get_ai_caps_threshold()
                                    if self._should_normalize_caps(fixed, threshold):
                                        fixed = self._normalize_caps(fixed)
                                    fixed = self._local_spell_fix(fixed)
                                    if self.get_setting("capitalize_sentences", True):
                                        parts = _SENTENCE_SPLIT_RE.split(fixed)
                                        fixed_parts = []
                                        for p in parts:
                                            p_stripped = p.lstrip()
                                            if not p_stripped:
                                                fixed_parts.append(p)
                                                continue
                                            leading_ws_len = len(p) - len(p.lstrip())
                                            leading = p[:leading_ws_len]
                                            content = p[leading_ws_len:]
                                            content = _capitalize_first_alpha(content)
                                            fixed_parts.append(leading + content)
                                        fixed = " ".join([part.strip() for part in fixed_parts]).strip()
                                    if self.get_setting("add_final_dot", True) and fixed and fixed[-1] not in ".!?":
                                        fixed = fixed + "."
                                run_on_ui_thread(lambda: self._set_progress("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ‚Äî 100%", "–ì–æ—Ç–æ–≤–æ", 100))
                                self._last_ai_in, self._last_ai_out = text, fixed
                                run_on_ui_thread(lambda: self._send_corrected_message(fixed, params))
                                return
                    except Exception:
                        pass

                fallback = text
                if not er_flag:
                    threshold = self._get_ai_caps_threshold()
                    if self._should_normalize_caps(fallback, threshold):
                        fallback = self._normalize_caps(fallback)
                    fallback = self._local_spell_fix(fallback)
                    if self.get_setting("ascii_emotes_replace", False):
                        fallback = self._replace_ascii_emoticons(fallback)
                    if self.get_setting("capitalize_sentences", True):
                        parts = _SENTENCE_SPLIT_RE.split(fallback)
                        new_parts = []
                        for p in parts:
                            p_stripped = p.lstrip()
                            if not p_stripped:
                                new_parts.append(p)
                                continue
                            leading_ws_len = len(p) - len(p.lstrip())
                            leading = p[:leading_ws_len]
                            content = p[leading_ws_len:]
                            content = _capitalize_first_alpha(content)
                            new_parts.append(leading + content)
                        fallback = " ".join([part.strip() for part in new_parts]).strip()
                    if self.get_setting("add_final_dot", True) and fallback and fallback[-1] not in ".!?":
                        fallback = fallback + "."
                run_on_ui_thread(lambda: self._send_corrected_message(fallback, params))
            except Exception as e:
                try:
                    log(f"[PhrasePlugin] AI fix error: {e}")
                except Exception:
                    pass
                run_on_ui_thread(lambda: self._send_corrected_message(text, params))
            finally:
                run_on_ui_thread(self._dismiss_progress_dialog)

        run_on_queue(worker)

    def _send_corrected_message(self, corrected: str, params: Any):
        try:
            try:
                self._sent_messages.add(hash(corrected))
            except Exception:
                pass

            message_params = {
                "message": corrected,
                "peer": params.peer,
                "replyToMsg": getattr(params, "replyToMsg", None),
                "replyToTopMsg": getattr(params, "replyToTopMsg", None)
            }
            send_message(message_params)
            try:
                from ui.bulletin import BulletinHelper
                try:
                    BulletinHelper.show_success("–¢–µ–∫—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω –ò–ò")
                except Exception:
                    pass
            except Exception:
                pass
        except Exception as e:
            try:
                log(f"[PhrasePlugin] send_message error: {e}")
            except Exception:
                pass
    def _show_progress_dialog(self, title: str):
        try:
            from ui.alert import AlertDialogBuilder
            from client_utils import get_last_fragment
            frag = get_last_fragment()
            if not frag:
                return
            activity = frag.getParentActivity()
            if not activity:
                return
            try:
                self._progress_dialog = AlertDialogBuilder(activity, AlertDialogBuilder.ALERT_TYPE_SPINNER)
            except Exception:
                self._progress_dialog = AlertDialogBuilder(activity)
            self._progress_dialog.set_title(title)
            self._progress_dialog.set_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            self._progress_dialog.set_cancelable(False)
            self._progress_dialog.show()
        except Exception:
            pass

    def _set_progress(self, title: str, message: str, percent: int):
        try:
            if self._progress_dialog:
                bar_len = 12
                filled = int(max(0, min(100, percent)) * bar_len / 100)
                bar = "‚ñà" * filled + "‚ñë" * (bar_len - filled)
                self._progress_dialog.set_title(f"{title}")
                self._progress_dialog.set_message(f"[{bar}] {percent}%\n{message}")
        except Exception:
            pass

    def _dismiss_progress_dialog(self):
        try:
            if self._progress_dialog:
                self._progress_dialog.dismiss()
        except Exception:
            pass
        finally:
            self._progress_dialog = None

    def _is_anticaps_enabled(self) -> bool:
        try:
            from com.exteragram.messenger.plugins import PluginsController
            controller = PluginsController.getInstance()
            if hasattr(controller, "plugins"):
                java_map = controller.plugins
                java_plugin = java_map.get("anticaps") if java_map else None
                if java_plugin is None:
                    return False
                for attr in ("isEnabled", "enabled", "getEnabled"):
                    try:
                        val = getattr(java_plugin, attr)
                        if callable(val):
                            val = val()
                        if isinstance(val, bool):
                            return val
                    except Exception:
                        continue
                return True
        except Exception:
            return False
        return False
